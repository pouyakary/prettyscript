--- old.jsDeclarationsFunctions.types
+++ new.jsDeclarationsFunctions.types
@@= skipped -4, +4 lines =@@
 >a : () => void

 export function b() {}
->b : typeof b
+>b : { (): void; cat: string; }

 b.cat = "cat";
 >b.cat = "cat" : "cat"
 >b.cat : string
->b : typeof b
+>b : { (): void; cat: string; }
 >cat : string
 >"cat" : "cat"

 export function c() {}
->c : typeof c
+>c : { (): void; Cls: typeof Cls; }

 c.Cls = class {}
 >c.Cls = class {} : typeof Cls
 >c.Cls : typeof Cls
->c : typeof c
+>c : { (): void; Cls: typeof Cls; }
 >Cls : typeof Cls
 >class {} : typeof Cls

@@= skipped -47, +47 lines =@@
  * @param {T} a
  */
 export function f(a) {
->f : typeof f
+>f : { <T>(a: T): T; self: typeof f; }
 >a : T

     return a;
 >a : T
 }
 f.self = f;
->f.self = f : typeof f
->f.self : typeof f
->f : typeof f
->self : typeof f
->f : typeof f
+>f.self = f : { <T>(a: T): T; self: typeof f; }
+>f.self : { <T>(a: T): T; self: typeof f; }
+>f : { <T>(a: T): T; self: typeof f; }
+>self : { <T>(a: T): T; self: typeof f; }
+>f : { <T>(a: T): T; self: typeof f; }

 /**
  * @param {{x: string}} a
  * @param {{y: typeof b}} b
  */
 function g(a, b) {
->g : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>g : (a: { x: string; }, b: { y: any; }) => any
 >a : { x: string; }
->b : { y: typeof import("index").b; }
+>b : { y: any; }

     return a.x && b.y();
->a.x && b.y() : void
+>a.x && b.y() : any
 >a.x : string
 >a : { x: string; }
 >x : string
->b.y() : void
->b.y : typeof import("index").b
->b : { y: typeof import("index").b; }
->y : typeof import("index").b
+>b.y() : any
+>b.y : { y: any; }
+>b : { y: any; }
+>y : { y: any; }
 }

 export { g };
->g : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>g : (a: { x: string; }, b: { y: any; }) => any

 /**
  * @param {{x: string}} a
  * @param {{y: typeof b}} b
  */
 function hh(a, b) {
->hh : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>hh : (a: { x: string; }, b: { y: any; }) => any
 >a : { x: string; }
->b : { y: typeof import("index").b; }
+>b : { y: any; }

     return a.x && b.y();
->a.x && b.y() : void
+>a.x && b.y() : any
 >a.x : string
 >a : { x: string; }
 >x : string
->b.y() : void
->b.y : typeof import("index").b
->b : { y: typeof import("index").b; }
->y : typeof import("index").b
+>b.y() : any
+>b.y : { y: any; }
+>b : { y: any; }
+>y : { y: any; }
 }

 export { hh as h };
->hh : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
->h : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>hh : (a: { x: string; }, b: { y: any; }) => any
+>h : (a: { x: string; }, b: { y: any; }) => any

 export function i() {}
 >i : () => void
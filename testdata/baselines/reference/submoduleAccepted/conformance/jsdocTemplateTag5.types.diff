--- old.jsdocTemplateTag5.types
+++ new.jsdocTemplateTag5.types
@@= skipped -7, +7 lines =@@
  * @template V
  */
 function Multimap() {
->Multimap : typeof Multimap
+>Multimap : { <K extends string, V>(): void; prototype: { get(key: K): V; }; }

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
 >this._map = {} : {}
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map : any
+>this : any
+>_map : any
 >{} : {}

 };
@@= skipped -15, +15 lines =@@
 Multimap.prototype = {
 >Multimap.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get(key: K): V; }
 >Multimap.prototype : { get(key: K): V; }
->Multimap : typeof Multimap
+>Multimap : { <K extends string, V>(): void; prototype: { get(key: K): V; }; }
 >prototype : { get(key: K): V; }
 >{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get(key: K): V; }

@@= skipped -13, +13 lines =@@
 >key : K

         return this._map[key + ''];
->this._map[key + ''] : V
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map[key + ''] : any
+>this._map : any
+>this : { get(key: K): V; }
+>_map : any
 >key + '' : string
 >key : K
 >'' : ""
@@= skipped -17, +17 lines =@@
  * @template V
  */
 var Multimap2 = function() {
->Multimap2 : typeof Multimap2
->function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : typeof Multimap2
+>Multimap2 : { <K extends string, V>(): void; prototype: { get: (key: K) => V; }; }
+>function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : { <K extends string, V>(): void; prototype: { get: (key: K) => V; }; }

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
 >this._map = {} : {}
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map : any
+>this : any
+>_map : any
 >{} : {}

 };
@@= skipped -16, +16 lines =@@
 Multimap2.prototype = {
 >Multimap2.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get: function(key) {        return this._map[key + ''];    }} : { get: (key: K) => V; }
 >Multimap2.prototype : { get: (key: K) => V; }
->Multimap2 : typeof Multimap2
+>Multimap2 : { <K extends string, V>(): void; prototype: { get: (key: K) => V; }; }
 >prototype : { get: (key: K) => V; }
 >{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get: function(key) {        return this._map[key + ''];    }} : { get: (key: K) => V; }

@@= skipped -14, +14 lines =@@
 >key : K

         return this._map[key + ''];
->this._map[key + ''] : V
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map[key + ''] : any
+>this._map : any
+>this : { get: (key: K) => V; }
+>_map : any
 >key + '' : string
 >key : K
 >'' : ""
@@= skipped -11, +11 lines =@@
 }

 var Ns = {};
->Ns : typeof Ns
->{} : {}
+>Ns : { Multimap3: { (): void; prototype: { get(key: K): V; }; }; }
+>{} : { Multimap3: { (): void; prototype: { get(key: K): V; }; }; }

 /**
  * Should work for expando-namespaced initialisers too
@@= skipped -10, +10 lines =@@
  * @template V
  */
 Ns.Multimap3 = function() {
->Ns.Multimap3 = function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : typeof Multimap3
->Ns.Multimap3 : typeof Multimap3
->Ns : typeof Ns
->Multimap3 : typeof Multimap3
->function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : typeof Multimap3
+>Ns.Multimap3 = function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : { (): void; prototype: { get(key: K): V; }; }
+>Ns.Multimap3 : { (): void; prototype: { get(key: K): V; }; }
+>Ns : { Multimap3: { (): void; prototype: { get(key: K): V; }; }; }
+>Multimap3 : { (): void; prototype: { get(key: K): V; }; }
+>function() {    /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */    this._map = {};} : { (): void; prototype: { get(key: K): V; }; }

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
 >this._map = {} : {}
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map : any
+>this : { Multimap3: { (): void; prototype: { get(key: K): V; }; }; }
+>_map : any
 >{} : {}

 };
@@= skipped -19, +19 lines =@@
 Ns.Multimap3.prototype = {
 >Ns.Multimap3.prototype = {    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get(key: K): V; }
 >Ns.Multimap3.prototype : { get(key: K): V; }
->Ns.Multimap3 : typeof Multimap3
->Ns : typeof Ns
->Multimap3 : typeof Multimap3
+>Ns.Multimap3 : { (): void; prototype: { get(key: K): V; }; }
+>Ns : { Multimap3: { (): void; prototype: { get(key: K): V; }; }; }
+>Multimap3 : { (): void; prototype: { get(key: K): V; }; }
 >prototype : { get(key: K): V; }
 >{    /**     * @param {K} key the key ok     * @returns {V} the value ok     */    get(key) {        return this._map[key + ''];    }} : { get(key: K): V; }

@@= skipped -15, +15 lines =@@
 >key : K

         return this._map[key + ''];
->this._map[key + ''] : V
->this._map : { [x: string]: V; }
->this : this
->_map : { [x: string]: V; }
+>this._map[key + ''] : any
+>this._map : any
+>this : { get(key: K): V; }
+>_map : any
 >key + '' : string
 >key : K
 >'' : ""
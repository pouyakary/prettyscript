--- old.enumTag.types
+++ new.enumTag.types
@@= skipped -78, +78 lines =@@
  */
 function consume(t,s,f) {
 >consume : (t: Target, s: Second, f: Fs) => void
->t : string
->s : number
+>t : Target
+>s : Second
 >f : Fs

     /** @type {string} */
     var str = t
 >str : string
->t : string
+>t : Target

     /** @type {number} */
     var num = s
 >num : number
->s : number
+>s : Second

     /** @type {(n: number) => number} */
     var fun = f
@@= skipped -21, +21 lines =@@

     /** @type {Target} */
     var v = Target.START
->v : string
+>v : Target
 >Target.START : string
 >Target : { START: string; MIDDLE: string; END: string; MISTAKE: number; OK_I_GUESS: number; }
 >START : string

     v = Target.UNKNOWN // error, can't find 'UNKNOWN'
 >v = Target.UNKNOWN : any
->v : string
+>v : Target
 >Target.UNKNOWN : any
 >Target : { START: string; MIDDLE: string; END: string; MISTAKE: number; OK_I_GUESS: number; }
 >UNKNOWN : any

     v = Second.MISTAKE // meh..ok, I guess?
 >v = Second.MISTAKE : string
->v : string
+>v : Target
 >Second.MISTAKE : string
 >Second : { MISTAKE: string; OK: number; FINE: number; }
 >MISTAKE : string

     v = 'something else' // allowed, like Typescript's classic enums and unlike its string enums
 >v = 'something else' : "something else"
->v : string
+>v : Target
 >'something else' : "something else"
 }
 /** @param {string} s */
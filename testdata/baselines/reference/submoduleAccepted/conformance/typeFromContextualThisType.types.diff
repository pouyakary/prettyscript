--- old.typeFromContextualThisType.types
+++ new.typeFromContextualThisType.types
@@= skipped -9, +9 lines =@@
 >a : () => void

         this.b = n => n;
->this.b = n => n : (n: number) => number
+>this.b = n => n : (n: any) => any
 >this.b : ((n: number) => number) | undefined
 >this : { a(): void; b?(n: number): number; }
 >b : ((n: number) => number) | undefined
->n => n : (n: number) => number
->n : number
->n : number
+>n => n : (n: any) => any
+>n : any
+>n : any
     }
 };

 /** @type {{ d(): void; e?(n: number): number; f?(n: number): number; g?: number }} */
 const o2 = {
->o2 : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
+>o2 : { d(): void; e?(n: number): number; f?(n: number): number; g?: number | undefined; }
 >{    d() {        this.e = this.f = m => this.g || m;    }} : { d(): void; }

     d() {
 >d : () => void

         this.e = this.f = m => this.g || m;
->this.e = this.f = m => this.g || m : (m: number) => number
+>this.e = this.f = m => this.g || m : (m: any) => any
 >this.e : ((n: number) => number) | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
+>this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number | undefined; }
 >e : ((n: number) => number) | undefined
->this.f = m => this.g || m : (m: number) => number
+>this.f = m => this.g || m : (m: any) => any
 >this.f : ((n: number) => number) | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
+>this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number | undefined; }
 >f : ((n: number) => number) | undefined
->m => this.g || m : (m: number) => number
->m : number
->this.g || m : number
+>m => this.g || m : (m: any) => any
+>m : any
+>this.g || m : any
 >this.g : number | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
+>this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number | undefined; }
 >g : number | undefined
->m : number
+>m : any
     }
 };

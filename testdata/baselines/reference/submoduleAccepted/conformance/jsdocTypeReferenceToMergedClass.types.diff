--- old.jsdocTypeReferenceToMergedClass.types
+++ new.jsdocTypeReferenceToMergedClass.types
@@= skipped -1, +1 lines =@@

 === jsdocTypeReferenceToMergedClass.js ===
 var Workspace = {}
->Workspace : typeof Workspace
->{} : {}
+>Workspace : { Project: { (): void; prototype: { isServiceProject(): void; }; }; }
+>{} : { Project: { (): void; prototype: { isServiceProject(): void; }; }; }

 /** @type {Workspace.Project} */
 var p;
->p : wp
+>p : Workspace.Project

 p.isServiceProject()
->p.isServiceProject() : void
->p.isServiceProject : () => void
->p : wp
->isServiceProject : () => void
+>p.isServiceProject() : any
+>p.isServiceProject : any
+>p : Workspace.Project
+>isServiceProject : any

 Workspace.Project = function wp() { }
->Workspace.Project = function wp() { } : typeof wp
->Workspace.Project : typeof wp
->Workspace : typeof Workspace
->Project : typeof wp
->function wp() { } : typeof wp
->wp : typeof wp
+>Workspace.Project = function wp() { } : { (): void; prototype: { isServiceProject(): void; }; }
+>Workspace.Project : { (): void; prototype: { isServiceProject(): void; }; }
+>Workspace : { Project: { (): void; prototype: { isServiceProject(): void; }; }; }
+>Project : { (): void; prototype: { isServiceProject(): void; }; }
+>function wp() { } : { (): void; prototype: { isServiceProject(): void; }; }
+>wp : { (): void; prototype: { isServiceProject(): void; }; }

 Workspace.Project.prototype = {
 >Workspace.Project.prototype = {  isServiceProject() {}} : { isServiceProject(): void; }
 >Workspace.Project.prototype : { isServiceProject(): void; }
->Workspace.Project : typeof wp
->Workspace : typeof Workspace
->Project : typeof wp
+>Workspace.Project : { (): void; prototype: { isServiceProject(): void; }; }
+>Workspace : { Project: { (): void; prototype: { isServiceProject(): void; }; }; }
+>Project : { (): void; prototype: { isServiceProject(): void; }; }
 >prototype : { isServiceProject(): void; }
 >{  isServiceProject() {}} : { isServiceProject(): void; }

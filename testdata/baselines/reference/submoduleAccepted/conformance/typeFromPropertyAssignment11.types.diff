--- old.typeFromPropertyAssignment11.types
+++ new.typeFromPropertyAssignment11.types
@@= skipped -1, +1 lines =@@

 === module.js ===
 var Inner = function() {}
->Inner : typeof Inner
->function() {} : typeof Inner
+>Inner : { (): void; prototype: { m(): void; i: number; }; }
+>function() {} : { (): void; prototype: { m(): void; i: number; }; }

 Inner.prototype = {
 >Inner.prototype = {    m() { },    i: 1} : { m(): void; i: number; }
 >Inner.prototype : { m(): void; i: number; }
->Inner : typeof Inner
+>Inner : { (): void; prototype: { m(): void; i: number; }; }
 >prototype : { m(): void; i: number; }
 >{    m() { },    i: 1} : { m(): void; i: number; }

@@= skipped -22, +22 lines =@@
 >Inner.prototype.j = 2 : 2
 >Inner.prototype.j : any
 >Inner.prototype : { m(): void; i: number; }
->Inner : typeof Inner
+>Inner : { (): void; prototype: { m(): void; i: number; }; }
 >prototype : { m(): void; i: number; }
 >j : any
 >2 : 2
@@= skipped -9, +9 lines =@@
 Inner.prototype.k;
 >Inner.prototype.k : any
 >Inner.prototype : { m(): void; i: number; }
->Inner : typeof Inner
+>Inner : { (): void; prototype: { m(): void; i: number; }; }
 >prototype : { m(): void; i: number; }
 >k : any

 var inner = new Inner()
->inner : Inner
->new Inner() : Inner
->Inner : typeof Inner
+>inner : any
+>new Inner() : any
+>Inner : { (): void; prototype: { m(): void; i: number; }; }

 inner.m()
->inner.m() : void
->inner.m : () => void
->inner : Inner
->m : () => void
+>inner.m() : any
+>inner.m : any
+>inner : any
+>m : any

 inner.i
->inner.i : number
->inner : Inner
->i : number
+>inner.i : any
+>inner : any
+>i : any

 inner.j
->inner.j : number
->inner : Inner
->j : number
+>inner.j : any
+>inner : any
+>j : any

 inner.k
->inner.k : string
->inner : Inner
->k : string
+>inner.k : any
+>inner : any
+>k : any

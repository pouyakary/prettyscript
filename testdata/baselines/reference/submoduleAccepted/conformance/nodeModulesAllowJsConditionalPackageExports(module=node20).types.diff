--- old.nodeModulesAllowJsConditionalPackageExports(module=node20).types
+++ new.nodeModulesAllowJsConditionalPackageExports(module=node20).types
@@= skipped -2, +2 lines =@@
 === index.js ===
 // esm format file
 import * as cjs from "package/cjs";
->cjs : typeof cjs
+>cjs : any

 import * as mjs from "package/mjs";
->mjs : typeof mjs
+>mjs : any

 import * as type from "package";
->type : typeof type
+>type : any

 cjs;
->cjs : typeof cjs
+>cjs : any

 mjs;
->mjs : typeof mjs
+>mjs : any

 type;
->type : typeof type
+>type : any

 import * as cjsi from "inner/a";
 >cjsi : typeof cjsi

 import * as mjsi from "inner/b";
->mjsi : typeof cjsi
+>mjsi : any

 import * as typei from "inner";
->typei : typeof cjsi
+>typei : any

 import * as ts from "inner/types";
 >ts : typeof cjsi

 cjsi.mjsSource;
->cjsi.mjsSource : true
+>cjsi.mjsSource : any
 >cjsi : typeof cjsi
->mjsSource : true
+>mjsSource : any

 mjsi.mjsSource;
->mjsi.mjsSource : true
->mjsi : typeof cjsi
->mjsSource : true
+>mjsi.mjsSource : any
+>mjsi : any
+>mjsSource : any

 typei.mjsSource;
->typei.mjsSource : true
->typei : typeof cjsi
->mjsSource : true
+>typei.mjsSource : any
+>typei : any
+>mjsSource : any

 ts.mjsSource;
->ts.mjsSource : true
+>ts.mjsSource : any
 >ts : typeof cjsi
->mjsSource : true
+>mjsSource : any

 === index.mjs ===
 // esm format file
 import * as cjs from "package/cjs";
->cjs : typeof cjs
+>cjs : any

 import * as mjs from "package/mjs";
->mjs : typeof mjs
+>mjs : any

 import * as type from "package";
->type : typeof type
+>type : any

 cjs;
->cjs : typeof cjs
+>cjs : any

 mjs;
->mjs : typeof mjs
+>mjs : any

 type;
->type : typeof type
+>type : any

 import * as cjsi from "inner/a";
->cjsi : typeof cjsi
+>cjsi : any

 import * as mjsi from "inner/b";
->mjsi : typeof cjsi
+>mjsi : typeof mjsi

 import * as typei from "inner";
->typei : typeof cjsi
+>typei : typeof mjsi

 import * as ts from "inner/types";
->ts : typeof cjsi
+>ts : typeof mjsi

 cjsi.mjsSource;
->cjsi.mjsSource : true
->cjsi : typeof cjsi
->mjsSource : true
+>cjsi.mjsSource : any
+>cjsi : any
+>mjsSource : any

 mjsi.mjsSource;
 >mjsi.mjsSource : true
->mjsi : typeof cjsi
+>mjsi : typeof mjsi
 >mjsSource : true

 typei.mjsSource;
 >typei.mjsSource : true
->typei : typeof cjsi
+>typei : typeof mjsi
 >mjsSource : true

 ts.mjsSource;
 >ts.mjsSource : true
->ts : typeof cjsi
+>ts : typeof mjsi
 >mjsSource : true

 === index.cjs ===
 // cjs format file
 import * as cjs from "package/cjs";
->cjs : typeof cjs
+>cjs : any

 import * as mjs from "package/mjs";
->mjs : typeof mjs
+>mjs : any

 import * as type from "package";
->type : typeof type
+>type : any

 cjs;
->cjs : typeof cjs
+>cjs : any

 mjs;
->mjs : typeof mjs
+>mjs : any

 type;
->type : typeof type
+>type : any

 import * as cjsi from "inner/a";
 >cjsi : typeof cjsi

 import * as mjsi from "inner/b";
->mjsi : typeof cjsi
+>mjsi : any

 import * as typei from "inner";
->typei : typeof cjsi.type
+>typei : any

 import * as ts from "inner/types";
 >ts : typeof cjsi
@@= skipped -139, +139 lines =@@
 >cjsSource : true

 mjsi.cjsSource;
->mjsi.cjsSource : true
->mjsi : typeof cjsi
->cjsSource : true
+>mjsi.cjsSource : any
+>mjsi : any
+>cjsSource : any

 typei.implicitCjsSource;
->typei.implicitCjsSource : true
->typei : typeof cjsi.type
->implicitCjsSource : true
+>typei.implicitCjsSource : any
+>typei : any
+>implicitCjsSource : any

 ts.cjsSource;
 >ts.cjsSource : true
@@= skipped -17, +17 lines =@@
 === node_modules/inner/index.d.ts ===
 // cjs format file
 import * as cjs from "inner/a";
->cjs : any
+>cjs : typeof cjs

 import * as mjs from "inner/b";
->mjs : typeof mjs
+>mjs : any

 import * as type from "inner";
->type : typeof mjs.type
+>type : any

 import * as ts from "inner/types";
->ts : typeof mjs
+>ts : typeof cjs

 export { cjs };
->cjs : any
+>cjs : typeof cjs

 export { mjs };
->mjs : typeof mjs
+>mjs : any

 export { type };
->type : typeof mjs.type
+>type : any

 export { ts };
->ts : typeof mjs
+>ts : typeof cjs

 export const implicitCjsSource = true;
 >implicitCjsSource : true
@@= skipped -63, +63 lines =@@
 >cjs : typeof cjs

 import * as mjs from "inner/b";
->mjs : typeof cjs
+>mjs : any

 import * as type from "inner";
->type : typeof cjs.type
+>type : any

 import * as ts from "inner/types";
 >ts : typeof cjs
@@= skipped -12, +12 lines =@@
 >cjs : typeof cjs

 export { mjs };
->mjs : typeof cjs
+>mjs : any

 export { type };
->type : typeof cjs.type
+>type : any

 export { ts };
 >ts : typeof cjs
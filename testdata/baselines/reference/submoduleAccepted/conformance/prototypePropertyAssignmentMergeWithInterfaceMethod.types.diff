--- old.prototypePropertyAssignmentMergeWithInterfaceMethod.types
+++ new.prototypePropertyAssignmentMergeWithInterfaceMethod.types
@@= skipped -4, +4 lines =@@
 declare namespace lf {
   export interface Transaction {
     attach(query: query.Builder): Promise<Array<Object>>
->attach : (query: query.Builder) => Promise<Array<Object>>
+>attach : (query: query.Builder) => Promise<Object[]>
 >query : query.Builder
 >query : any

     begin(scope: Array<schema.Table>): Promise<void>
->begin : (scope: Array<schema.Table>) => Promise<void>
+>begin : (scope: schema.Table[]) => Promise<void>
 >scope : schema.Table[]
 >schema : any

@@= skipped -13, +13 lines =@@
 >commit : () => Promise<void>

     exec(queries: Array<query.Builder>): Promise<Array<Array<Object>>>
->exec : (queries: Array<query.Builder>) => Promise<Array<Array<Object>>>
+>exec : (queries: query.Builder[]) => Promise<Object[][]>
 >queries : query.Builder[]
 >query : any

@@= skipped -13, +13 lines =@@
 }
 === lovefield.js ===
 lf.Transaction = function() {};
->lf.Transaction = function() {} : typeof Transaction
->lf.Transaction : typeof Transaction
->lf : typeof lf
->Transaction : typeof Transaction
->function() {} : typeof Transaction
+>lf.Transaction = function() {} : () => void
+>lf.Transaction : any
+>lf : any
+>Transaction : any
+>function() {} : () => void

 /**
  * @param {!Array<!lf.schema.Table>} scope
  * @return {!IThenable}
  */
 lf.Transaction.prototype.begin = function(scope) {};
->lf.Transaction.prototype.begin = function(scope) {} : (scope: Array<lf.schema.Table>) => IThenable
+>lf.Transaction.prototype.begin = function(scope) {} : (scope: any) => void
 >lf.Transaction.prototype.begin : any
 >lf.Transaction.prototype : any
->lf.Transaction : typeof Transaction
->lf : typeof lf
->Transaction : typeof Transaction
+>lf.Transaction : any
+>lf : any
+>Transaction : any
 >prototype : any
 >begin : any
->function(scope) {} : (scope: Array<lf.schema.Table>) => IThenable
->scope : lf.schema.Table[]
+>function(scope) {} : (scope: any) => void
+>scope : any

--- old.chainedPrototypeAssignment.types
+++ new.chainedPrototypeAssignment.types
@@= skipped -8, +8 lines =@@
 >'./mod' : "./mod"

 var a = new mod.A()
->a : A
->new mod.A() : A
->mod.A : typeof A
+>a : any
+>new mod.A() : any
+>mod.A : { (): void; prototype: { m(n: number): number; }; }
 >mod : typeof mod
->A : typeof A
+>A : { (): void; prototype: { m(n: number): number; }; }

 var b = new mod.B()
->b : B
->new mod.B() : B
->mod.B : typeof B
+>b : any
+>new mod.B() : any
+>mod.B : { (): void; prototype: { m(n: number): number; }; }
 >mod : typeof mod
->B : typeof B
+>B : { (): void; prototype: { m(n: number): number; }; }

 a.m('nope')
->a.m('nope') : number
->a.m : (n: number) => number
->a : A
->m : (n: number) => number
+>a.m('nope') : any
+>a.m : any
+>a : any
+>m : any
 >'nope' : "nope"

 b.m('not really')
->b.m('not really') : number
->b.m : (n: number) => number
->b : B
->m : (n: number) => number
+>b.m('not really') : any
+>b.m : any
+>b : any
+>m : any
 >'not really' : "not really"

 === types.d.ts ===
@@= skipped -38, +38 lines =@@
 === mod.js ===
 /// <reference path='./types.d.ts'/>
 var A = function A() {
->A : typeof A
->function A() {    this.a = 1} : typeof A
->A : typeof A
+>A : { (): void; prototype: { m(n: number): number; }; }
+>function A() {    this.a = 1} : { (): void; prototype: { m(n: number): number; }; }
+>A : { (): void; prototype: { m(n: number): number; }; }

     this.a = 1
 >this.a = 1 : 1
 >this.a : any
->this : this
+>this : any
 >a : any
 >1 : 1
 }
 var B = function B() {
->B : typeof B
->function B() {    this.b = 2} : typeof B
->B : typeof B
+>B : { (): void; prototype: { m(n: number): number; }; }
+>function B() {    this.b = 2} : { (): void; prototype: { m(n: number): number; }; }
+>B : { (): void; prototype: { m(n: number): number; }; }

     this.b = 2
 >this.b = 2 : 2
 >this.b : any
->this : this
+>this : any
 >b : any
 >2 : 2
 }
 exports.A = A
->exports.A = A : typeof A
->exports.A : typeof A
+>exports.A = A : { (): void; prototype: { m(n: number): number; }; }
+>exports.A : { (): void; prototype: { m(n: number): number; }; }
 >exports : typeof import("mod")
->A : typeof A
->A : typeof A
+>A : { (): void; prototype: { m(n: number): number; }; }
+>A : { (): void; prototype: { m(n: number): number; }; }

 exports.B = B
->exports.B = B : typeof B
->exports.B : typeof B
+>exports.B = B : { (): void; prototype: { m(n: number): number; }; }
+>exports.B : { (): void; prototype: { m(n: number): number; }; }
 >exports : typeof import("mod")
->B : typeof B
->B : typeof B
+>B : { (): void; prototype: { m(n: number): number; }; }
+>B : { (): void; prototype: { m(n: number): number; }; }

 A.prototype = B.prototype = {
 >A.prototype = B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
 >A.prototype : { m(n: number): number; }
->A : typeof A
+>A : { (): void; prototype: { m(n: number): number; }; }
 >prototype : { m(n: number): number; }
 >B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
 >B.prototype : { m(n: number): number; }
->B : typeof B
+>B : { (): void; prototype: { m(n: number): number; }; }
 >prototype : { m(n: number): number; }
 >{    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }

//// [tests/cases/compiler/declarationEmitAugmentationUsesCorrectSourceFile.ts] ////

=== node_modules/knex/index.d.ts ===
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward
// A bunch of random text to move the positions forward

type ShouldJustBeAny = [any][0];
>ShouldJustBeAny : Symbol(ShouldJustBeAny, Decl(index.d.ts, 0, 0))

declare namespace knex {
>knex : Symbol(knex, Decl(index.d.ts, 10, 32), Decl(index.ts, 0, 14))

  export { Knex };
>Knex : Symbol(knex.Knex, Decl(index.d.ts, 13, 10))
}

declare namespace Knex {
>Knex : Symbol(Knex, Decl(index.d.ts, 14, 1), Decl(index.ts, 1, 23))

  interface Interface {
>Interface : Symbol(Interface, Decl(index.d.ts, 16, 24))

    method(): ShouldJustBeAny;
>method : Symbol(Interface.method, Decl(index.d.ts, 17, 23))
>ShouldJustBeAny : Symbol(ShouldJustBeAny, Decl(index.d.ts, 0, 0))
  }
}

export = knex;
>knex : Symbol(knex, Decl(index.d.ts, 10, 32), Decl(index.ts, 0, 14))

=== index.ts ===
import "knex";
declare module "knex" {
>"knex" : Symbol(knex, Decl(index.d.ts, 10, 32), Decl(index.ts, 0, 14))

  namespace Knex {
>Knex : Symbol(Knex, Decl(index.d.ts, 14, 1), Decl(index.ts, 1, 23))

    function newFunc(): Knex.Interface;
>newFunc : Symbol(newFunc, Decl(index.ts, 2, 18))
>Knex : Symbol(Knex, Decl(index.d.ts, 14, 1), Decl(index.ts, 1, 23))
>Interface : Symbol(Interface, Decl(index.d.ts, 16, 24))
  }
}




//// [tests/cases/compiler/exhaustiveSwitchStatementsGeneric1.ts] ////

=== exhaustiveSwitchStatementsGeneric1.ts ===
// https://github.com/microsoft/typescript-go/issues/986

interface A {
>A : Symbol(A, Decl(exhaustiveSwitchStatementsGeneric1.ts, 0, 0))

  type: "a";
>type : Symbol(A.type, Decl(exhaustiveSwitchStatementsGeneric1.ts, 2, 13))
}

interface B {
>B : Symbol(B, Decl(exhaustiveSwitchStatementsGeneric1.ts, 4, 1))

  type: "b";
>type : Symbol(B.type, Decl(exhaustiveSwitchStatementsGeneric1.ts, 6, 13))
}

interface Types {
>Types : Symbol(Types, Decl(exhaustiveSwitchStatementsGeneric1.ts, 8, 1))

  a: A;
>a : Symbol(Types.a, Decl(exhaustiveSwitchStatementsGeneric1.ts, 10, 17))
>A : Symbol(A, Decl(exhaustiveSwitchStatementsGeneric1.ts, 0, 0))

  b: B;
>b : Symbol(Types.b, Decl(exhaustiveSwitchStatementsGeneric1.ts, 11, 7))
>B : Symbol(B, Decl(exhaustiveSwitchStatementsGeneric1.ts, 4, 1))
}

export function exhaustiveSwitch<T extends keyof Types>(type: T): boolean {
>exhaustiveSwitch : Symbol(exhaustiveSwitch, Decl(exhaustiveSwitchStatementsGeneric1.ts, 13, 1))
>T : Symbol(T, Decl(exhaustiveSwitchStatementsGeneric1.ts, 15, 33))
>Types : Symbol(Types, Decl(exhaustiveSwitchStatementsGeneric1.ts, 8, 1))
>type : Symbol(type, Decl(exhaustiveSwitchStatementsGeneric1.ts, 15, 56))
>T : Symbol(T, Decl(exhaustiveSwitchStatementsGeneric1.ts, 15, 33))

  switch (type) {
>type : Symbol(type, Decl(exhaustiveSwitchStatementsGeneric1.ts, 15, 56))

    case "a":
      return true;
    case "b":
      return true;
  }
}


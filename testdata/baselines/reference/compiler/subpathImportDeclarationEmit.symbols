//// [tests/cases/compiler/subpathImportDeclarationEmit.ts] ////

=== /src/main.ts ===
import { bar } from "./indirect.js";
>bar : Symbol(bar, Decl(main.ts, 0, 8))

console.log(await bar());
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>bar : Symbol(bar, Decl(main.ts, 0, 8))

=== /src/subpath.ts ===
async function bar(): Promise<string> {
>bar : Symbol(bar, Decl(subpath.ts, 0, 0))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  return "bar";
}
export const barrel = { bar };
>barrel : Symbol(barrel, Decl(subpath.ts, 3, 12))
>bar : Symbol(bar, Decl(subpath.ts, 3, 23))

=== /src/indirect.ts ===
import { barrel } from "#subpath";
>barrel : Symbol(barrel, Decl(indirect.ts, 0, 8))

const { bar } = barrel;
>bar : Symbol(bar, Decl(indirect.ts, 1, 7))
>barrel : Symbol(barrel, Decl(indirect.ts, 0, 8))

export { bar };
>bar : Symbol(bar, Decl(indirect.ts, 2, 8))


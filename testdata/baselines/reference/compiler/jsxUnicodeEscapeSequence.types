//// [tests/cases/compiler/jsxUnicodeEscapeSequence.tsx] ////

=== jsxUnicodeEscapeSequence.tsx ===
/// <reference path="react16.d.ts" />

export const InlineUnicodeChar = () => {
>InlineUnicodeChar : () => JSX.Element
>() => {    // This should work correctly - inline character with other content    return <div><span>Warning: âš  Error</span></div>;} : () => JSX.Element

    // This should work correctly - inline character with other content
    return <div><span>Warning: âš  Error</span></div>;
><div><span>Warning: âš  Error</span></div> : JSX.Element
>div : any
><span>Warning: âš  Error</span> : JSX.Element
>span : any
>span : any
>div : any

};

export const StandaloneUnicodeChar = () => {
>StandaloneUnicodeChar : () => JSX.Element
>() => {    // This should reproduce the issue - unicode character on its own line    return (<div><span>âš </span>        âš     </div>);} : () => JSX.Element

    // This should reproduce the issue - unicode character on its own line
    return (<div><span>âš </span>
>(<div><span>âš </span>        âš     </div>) : JSX.Element
><div><span>âš </span>        âš     </div> : JSX.Element
>div : any
><span>âš </span> : JSX.Element
>span : any
>span : any

        âš 
    </div>);
>div : any

};

export const MultipleUnicodeChars = () => {
>MultipleUnicodeChars : () => JSX.Element
>() => {    // Test multiple unicode characters    return (<div>        âš         â›”        ðŸš¨    </div>);} : () => JSX.Element

    // Test multiple unicode characters
    return (<div>
>(<div>        âš         â›”        ðŸš¨    </div>) : JSX.Element
><div>        âš         â›”        ðŸš¨    </div> : JSX.Element
>div : any

        âš 
        â›”
        ðŸš¨
    </div>);
>div : any

};


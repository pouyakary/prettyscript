//// [tests/cases/compiler/subtypeReductionWithAnyFunctionType.ts] ////

=== subtypeReductionWithAnyFunctionType.ts ===
// https://github.com/microsoft/typescript-go/issues/849

declare function useMemo<T>(func: () => T): T;
>useMemo : Symbol(useMemo, Decl(subtypeReductionWithAnyFunctionType.ts, 0, 0))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 2, 25))
>func : Symbol(func, Decl(subtypeReductionWithAnyFunctionType.ts, 2, 28))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 2, 25))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 2, 25))

function getPredicate(alwaysTrue: boolean) {
>getPredicate : Symbol(getPredicate, Decl(subtypeReductionWithAnyFunctionType.ts, 2, 46))
>alwaysTrue : Symbol(alwaysTrue, Decl(subtypeReductionWithAnyFunctionType.ts, 4, 22))

    const predicate: (input: string) => boolean = useMemo(() => {
>predicate : Symbol(predicate, Decl(subtypeReductionWithAnyFunctionType.ts, 5, 9))
>input : Symbol(input, Decl(subtypeReductionWithAnyFunctionType.ts, 5, 22))
>useMemo : Symbol(useMemo, Decl(subtypeReductionWithAnyFunctionType.ts, 0, 0))

        if (alwaysTrue) {
>alwaysTrue : Symbol(alwaysTrue, Decl(subtypeReductionWithAnyFunctionType.ts, 4, 22))

            return () => true;
        }
        return x => x.length > 0;
>x : Symbol(x, Decl(subtypeReductionWithAnyFunctionType.ts, 9, 14))
>x : Symbol(x, Decl(subtypeReductionWithAnyFunctionType.ts, 9, 14))

    });
    return predicate;
>predicate : Symbol(predicate, Decl(subtypeReductionWithAnyFunctionType.ts, 5, 9))
}

// https://github.com/microsoft/typescript-go/issues/1016

declare function compact<T>(array: T[]): T[];
>compact : Symbol(compact, Decl(subtypeReductionWithAnyFunctionType.ts, 12, 1))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 25))
>array : Symbol(array, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 28))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 25))
>T : Symbol(T, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 25))

declare function makeFooer(): Fooer;
>makeFooer : Symbol(makeFooer, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 45))
>Fooer : Symbol(Fooer, Decl(subtypeReductionWithAnyFunctionType.ts, 17, 36))

interface Fooer {
>Fooer : Symbol(Fooer, Decl(subtypeReductionWithAnyFunctionType.ts, 17, 36))

    foo: (v: string) => string;
>foo : Symbol(Fooer.foo, Decl(subtypeReductionWithAnyFunctionType.ts, 18, 17))
>v : Symbol(v, Decl(subtypeReductionWithAnyFunctionType.ts, 19, 10))
}
function f() {
>f : Symbol(f, Decl(subtypeReductionWithAnyFunctionType.ts, 20, 1))

    const _ = compact([makeFooer(), { foo: (v) => v }]);
>_ : Symbol(_, Decl(subtypeReductionWithAnyFunctionType.ts, 22, 9))
>compact : Symbol(compact, Decl(subtypeReductionWithAnyFunctionType.ts, 12, 1))
>makeFooer : Symbol(makeFooer, Decl(subtypeReductionWithAnyFunctionType.ts, 16, 45))
>foo : Symbol(foo, Decl(subtypeReductionWithAnyFunctionType.ts, 22, 37))
>v : Symbol(v, Decl(subtypeReductionWithAnyFunctionType.ts, 22, 44))
>v : Symbol(v, Decl(subtypeReductionWithAnyFunctionType.ts, 22, 44))
}


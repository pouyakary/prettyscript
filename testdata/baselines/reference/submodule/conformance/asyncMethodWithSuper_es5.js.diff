--- old.asyncMethodWithSuper_es5.js
+++ new.asyncMethodWithSuper_es5.js
@@= skipped -65, +65 lines =@@
 }
 class B extends A {
     // async method with only call/get on 'super' does not require a binding
-    simple() {
-        return __awaiter(this, void 0, void 0, function* () {
-            // call with property access
-            super.x();
-            // call additional property.
-            super.y();
-            // call with element access
-            super["x"]();
-            // property access (read)
-            const a = super.x;
-            // element access (read)
-            const b = super["x"];
-        });
+    async simple() {
+        // call with property access
+        super.x();
+        // call additional property.
+        super.y();
+        // call with element access
+        super["x"]();
+        // property access (read)
+        const a = super.x;
+        // element access (read)
+        const b = super["x"];
     }
     // async method with assignment/destructuring on 'super' requires a binding
-    advanced() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const f = () => { };
-            // call with property access
-            super.x();
-            // call with element access
-            super["x"]();
-            // property access (read)
-            const a = super.x;
-            // element access (read)
-            const b = super["x"];
-            // property access (assign)
-            super.x = f;
-            // element access (assign)
-            super["x"] = f;
-            // destructuring assign with property access
-            ({ f: super.x } = { f });
-            // destructuring assign with element access
-            ({ f: super["x"] } = { f });
-        });
+    async advanced() {
+        const f = () => { };
+        // call with property access
+        super.x();
+        // call with element access
+        super["x"]();
+        // property access (read)
+        const a = super.x;
+        // element access (read)
+        const b = super["x"];
+        // property access (assign)
+        super.x = f;
+        // element access (assign)
+        super["x"] = f;
+        // destructuring assign with property access
+        ({ f: super.x } = { f });
+        // destructuring assign with element access
+        ({ f: super["x"] } = { f });
     }
 }
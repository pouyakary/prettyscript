--- old.mixinAccessors4.types
+++ new.mixinAccessors4.types
@@= skipped -17, +17 lines =@@
 }

 function Mixin<T extends typeof A>(Super: T) {
->Mixin : <T extends typeof A>(Super: T) => { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
+>Mixin : <T extends typeof A>(Super: T) => { new (...args: any[]): B; prototype: Mixin.B; } & T
 >A : typeof A
 >Super : T

   return class B extends Super {
->class B extends Super {    get myName(): string {      return "B";    }  } : { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
->B : { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
+>class B extends Super {    get myName(): string {      return "B";    }  } : { new (...args: any[]): B; prototype: Mixin.B; } & T
+>B : { new (...args: any[]): B; prototype: Mixin.B; } & T
 >Super : A

     get myName(): string {
@@= skipped -20, +20 lines =@@

 class C extends Mixin(A) {
 >C : C
->Mixin(A) : Mixin<typeof A>.B & A
->Mixin : <T extends typeof A>(Super: T) => { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
+>Mixin(A) : Mixin.B & A
+>Mixin : <T extends typeof A>(Super: T) => { new (...args: any[]): B; prototype: Mixin.B; } & T
 >A : typeof A

   get myName(): string {
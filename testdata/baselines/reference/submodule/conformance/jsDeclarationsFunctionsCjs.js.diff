--- old.jsDeclarationsFunctionsCjs.js
+++ new.jsDeclarationsFunctionsCjs.js
@@= skipped -61, +61 lines =@@


 //// [index.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+export var a = function a() { };
 module.exports.a = function a() { };
+export var b = function b() { };
 module.exports.b = function b() { };
 module.exports.b.cat = "cat";
+export var c = function c() { };
 module.exports.c = function c() { };
 module.exports.c.Cls = class {
 };
@@= skipped -11, +16 lines =@@
  * @param {number} b
  * @return {string}
  */
-module.exports.d = function d(a, b) { return /** @type {*} */ (null); };
-/**
- * @template T,U
- * @param {T} a
- * @param {U} b
- * @return {T & U}
- */
-module.exports.e = function e(a, b) { return /** @type {*} */ (null); };
+export var d = function d(a, b) { return /** @type {*} */ (null as ); };
+/**
+ * @param {number} a
+ * @param {number} b
+ * @return {string}
+ */
+module.exports.d = function d(a, b) { return /** @type {*} */ null; };
+/**
+ * @template T,U
+ * @param {T} a
+ * @param {U} b
+ * @return {T & U}
+ */
+export var e = function e(a, b) { return /** @type {*} */ (null as ); };
+/**
+ * @template T,U
+ * @param {T} a
+ * @param {U} b
+ * @return {T & U}
+ */
+module.exports.e = function e(a, b) { return /** @type {*} */ null; };
+/**
+ * @template T
+ * @param {T} a
+ */
+export var f = function f(a) {
+    return a;
+};
 /**
  * @template T
  * @param {T} a
@@= skipped -23, +43 lines =@@
 function g(a, b) {
     return a.x && b.y();
 }
+export var g = g;
 module.exports.g = g;
 /**
  * @param {{x: string}} a
@@= skipped -8, +9 lines =@@
 function hh(a, b) {
     return a.x && b.y();
 }
+export var h = hh;
 module.exports.h = hh;
+export var i = function i() { };
 module.exports.i = function i() { };
+export var ii = module.exports.i;
 module.exports.ii = module.exports.i;
 // note that this last one doesn't make much sense in cjs, since exports aren't hoisted bindings
+export var jj = module.exports.j;
+// note that this last one doesn't make much sense in cjs, since exports aren't hoisted bindings
 module.exports.jj = module.exports.j;
+export var j = function j() { };
 module.exports.j = function j() { };


 //// [index.d.ts]
-export function a(): void;
-export function b(): void;
-export namespace b {
-    let cat: string;
-}
-export function c(): void;
-export namespace c {
-    export { Cls };
-}
-export function d(a: number, b: number): string;
-export function e<T, U>(a: T, b: U): T & U;
-export function f<T>(a: T): T;
-export namespace f {
-    import self = f;
-    export { self };
-}
-export function i(): void;
-export function j(): void;
-declare class Cls {
-}
-/**
- * @param {{x: string}} a
- * @param {{y: typeof module.exports.b}} b
- */
-export function g(a: {
-    x: string;
-}, b: {
-    y: {
-        (): void;
-        cat: string;
-    };
-}): void;
-/**
- * @param {{x: string}} a
- * @param {{y: typeof module.exports.b}} b
- */
-declare function hh(a: {
-    x: string;
-}, b: {
-    y: {
-        (): void;
-        cat: string;
-    };
-}): void;
-export { hh as h, i as ii, j as jj };
+export var a = function a();;
+export var b = function b();;
+export var c = function c();;
+/**
+ * @param {number} a
+ * @param {number} b
+ * @return {string}
+ */
+export var d = function d(a, b);;
+/**
+ * @template T,U
+ * @param {T} a
+ * @param {U} b
+ * @return {T & U}
+ */
+export var e = function e(a, b);;
+/**
+ * @template T
+ * @param {T} a
+ */
+export var f = function f(a);;
+export var g = g;
+export var h = hh;
+export var i = function i();;
+export var ii = module.exports.i;
+export var jj = module.exports.j;
+export var j = function j();;
+export {};
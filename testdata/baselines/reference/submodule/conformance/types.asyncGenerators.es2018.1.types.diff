--- old.types.asyncGenerators.es2018.1.types
+++ new.types.asyncGenerators.es2018.1.types
@@= skipped -195, +195 lines =@@

 };
 const assignability11: () => AsyncIterator<number> = async function * () {
->assignability11 : () => AsyncIterator<number>
+>assignability11 : () => AsyncIterator<number, any, any>
 >async function * () {    yield 1;} : () => AsyncGenerator<number, void, any>

     yield 1;
@@= skipped -9, +9 lines =@@

 };
 const assignability12: () => AsyncIterator<number> = async function * () {
->assignability12 : () => AsyncIterator<number>
+>assignability12 : () => AsyncIterator<number, any, any>
 >async function * () {    yield Promise.resolve(1);} : () => AsyncGenerator<number, void, any>

     yield Promise.resolve(1);
@@= skipped -13, +13 lines =@@

 };
 const assignability13: () => AsyncIterator<number> = async function * () {
->assignability13 : () => AsyncIterator<number>
+>assignability13 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* [1, 2];} : () => AsyncGenerator<number, void, unknown>

     yield* [1, 2];
@@= skipped -11, +11 lines =@@

 };
 const assignability14: () => AsyncIterator<number> = async function * () {
->assignability14 : () => AsyncIterator<number>
+>assignability14 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* [Promise.resolve(1)];} : () => AsyncGenerator<number, void, unknown>

     yield* [Promise.resolve(1)];
@@= skipped -14, +14 lines =@@

 };
 const assignability15: () => AsyncIterator<number> = async function * () {
->assignability15 : () => AsyncIterator<number>
+>assignability15 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* (async function * () { yield 1; })();} : () => AsyncGenerator<number, void, any>

     yield* (async function * () { yield 1; })();
@@= skipped -113, +113 lines =@@
 >1 : 1
 }
 async function * explicitReturnType11(): AsyncIterator<number> {
->explicitReturnType11 : () => AsyncIterator<number>
+>explicitReturnType11 : () => AsyncIterator<number, any, any>

     yield 1;
 >yield 1 : any
 >1 : 1
 }
 async function * explicitReturnType12(): AsyncIterator<number> {
->explicitReturnType12 : () => AsyncIterator<number>
+>explicitReturnType12 : () => AsyncIterator<number, any, any>

     yield Promise.resolve(1);
 >yield Promise.resolve(1) : any
@@= skipped -18, +18 lines =@@
 >1 : 1
 }
 async function * explicitReturnType13(): AsyncIterator<number> {
->explicitReturnType13 : () => AsyncIterator<number>
+>explicitReturnType13 : () => AsyncIterator<number, any, any>

     yield* [1, 2];
 >yield* [1, 2] : any
@@= skipped -9, +9 lines =@@
 >2 : 2
 }
 async function * explicitReturnType14(): AsyncIterator<number> {
->explicitReturnType14 : () => AsyncIterator<number>
+>explicitReturnType14 : () => AsyncIterator<number, any, any>

     yield* [Promise.resolve(1)];
 >yield* [Promise.resolve(1)] : any
@@= skipped -12, +12 lines =@@
 >1 : 1
 }
 async function * explicitReturnType15(): AsyncIterator<number> {
->explicitReturnType15 : () => AsyncIterator<number>
+>explicitReturnType15 : () => AsyncIterator<number, any, any>

     yield* (async function * () { yield 1; })();
 >yield* (async function * () { yield 1; })() : void
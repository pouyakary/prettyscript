--- old.genericCallWithGenericSignatureArguments.types
+++ new.genericCallWithGenericSignatureArguments.types
@@= skipped -75, +75 lines =@@
 >r4 : (x: { x: number; y?: number; }) => { x: number; y?: number; }
 >foo((x: typeof a) => a, (x: typeof b) => b) : (x: { x: number; y?: number; }) => { x: number; y?: number; }
 >foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
->(x: typeof a) => a : (x: typeof a) => { x: number; y?: number; }
+>(x: typeof a) => a : (x: { x: number; y?: number; }) => { x: number; y?: number; }
 >x : { x: number; y?: number; }
 >a : { x: number; y?: number; }
 >a : { x: number; y?: number; }
->(x: typeof b) => b : (x: typeof b) => { x: number; z?: number; }
+>(x: typeof b) => b : (x: { x: number; z?: number; }) => { x: number; z?: number; }
 >x : { x: number; z?: number; }
 >b : { x: number; z?: number; }
 >b : { x: number; z?: number; }
@@= skipped -13, +13 lines =@@
 >r5 : (x: { x: number; z?: number; }) => { x: number; z?: number; }
 >foo((x: typeof b) => b, (x: typeof a) => a) : (x: { x: number; z?: number; }) => { x: number; z?: number; }
 >foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
->(x: typeof b) => b : (x: typeof b) => { x: number; z?: number; }
+>(x: typeof b) => b : (x: { x: number; z?: number; }) => { x: number; z?: number; }
 >x : { x: number; z?: number; }
 >b : { x: number; z?: number; }
 >b : { x: number; z?: number; }
->(x: typeof a) => a : (x: typeof a) => { x: number; y?: number; }
+>(x: typeof a) => a : (x: { x: number; y?: number; }) => { x: number; y?: number; }
 >x : { x: number; y?: number; }
 >a : { x: number; y?: number; }
 >a : { x: number; y?: number; }
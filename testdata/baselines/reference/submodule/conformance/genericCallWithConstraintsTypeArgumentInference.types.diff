--- old.genericCallWithConstraintsTypeArgumentInference.types
+++ new.genericCallWithConstraintsTypeArgumentInference.types
@@= skipped -113, +113 lines =@@
     }

     foo3<T extends Derived>(t: T, u: U) {
->foo3 : <T extends Derived>(t: T, u: U) => T
+>foo3 : <T_1 extends Derived>(t: T_1, u: U) => T_1
 >t : T
 >u : U

@@= skipped -9, +9 lines =@@
     }

     foo4<U extends Derived2>(t: T, u: U) {
->foo4 : <U extends Derived2>(t: T, u: U) => T
+>foo4 : <U_1 extends Derived2>(t: T, u: U_1) => T
 >t : T
 >u : U

@@= skipped -9, +9 lines =@@
     }

     foo5<T extends Derived, U extends Derived2>(t: T, u: U) {
->foo5 : <T extends Derived, U extends Derived2>(t: T, u: U) => T
+>foo5 : <T_1 extends Derived, U_1 extends Derived2>(t: T_1, u: U_1) => T_1
 >t : T
 >u : U

@@= skipped -19, +19 lines =@@
     }

     foo7<T extends Base, U extends Derived>(u: U) {
->foo7 : <T extends Base, U extends Derived>(u: U) => T
+>foo7 : <T_1 extends Base, U_1 extends Derived>(u: U_1) => T_1
 >u : U

         var x: T;
@@= skipped -120, +120 lines =@@
 >u : U

     foo3<T extends Derived>(t: T, u: U): T;
->foo3 : <T extends Derived>(t: T, u: U) => T
+>foo3 : <T_1 extends Derived>(t: T_1, u: U) => T_1
 >t : T
 >u : U

     foo4<U extends Derived2>(t: T, u: U): T;
->foo4 : <U extends Derived2>(t: T, u: U) => T
+>foo4 : <U_1 extends Derived2>(t: T, u: U_1) => T
 >t : T
 >u : U

     foo5<T extends Derived, U extends Derived2>(t: T, u: U): T;
->foo5 : <T extends Derived, U extends Derived2>(t: T, u: U) => T
+>foo5 : <T_1 extends Derived, U_1 extends Derived2>(t: T_1, u: U_1) => T_1
 >t : T
 >u : U

@@= skipped -18, +18 lines =@@
 >foo6 : <T extends Derived, U extends Derived2>() => T

     foo7<T extends Base, U extends Derived>(u: U): T;
->foo7 : <T extends Base, U extends Derived>(u: U) => T
+>foo7 : <T_1 extends Base, U_1 extends Derived>(u: U_1) => T_1
 >u : U

     foo8<T extends Base, U extends Derived>(): T;
--- old.awaitUsingDeclarationsInForOf.5(target=es5).js
+++ new.awaitUsingDeclarationsInForOf.5(target=es5).js
@@= skipped -12, +12 lines =@@


 //// [awaitUsingDeclarationsInForOf.5.js]
-// https://github.com/microsoft/TypeScript/pull/55558#issuecomment-1817595357
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
     if (value !== null && value !== void 0) {
         if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
@@= skipped -78, +68 lines =@@
             await result_1;
     }
 }
-export function test() {
-    return __awaiter(this, void 0, void 0, function* () {
-        for (const _a_2 of x) {
-            const env_2 = { stack: [], error: void 0, hasError: false };
-            try {
-                const _a = __addDisposableResource(env_2, _a_2, true);
-                ;
-            }
-            catch (e_2) {
-                env_2.error = e_2;
-                env_2.hasError = true;
-            }
-            finally {
-                const result_2 = __disposeResources(env_2);
-                if (result_2)
-                    yield result_2;
-            }
-        }
-    });
+export async function test() {
+    for (const _a_2 of x) {
+        const env_2 = { stack: [], error: void 0, hasError: false };
+        try {
+            const _a = __addDisposableResource(env_2, _a_2, true);
+            ;
+        }
+        catch (e_2) {
+            env_2.error = e_2;
+            env_2.hasError = true;
+        }
+        finally {
+            const result_2 = __disposeResources(env_2);
+            if (result_2)
+                await result_2;
+        }
+    }
 }
--- old.typeParameterConstModifiersReverseMappedTypes.types
+++ new.typeParameterConstModifiersReverseMappedTypes.types
@@= skipped -1, +1 lines =@@

 === typeParameterConstModifiersReverseMappedTypes.ts ===
 declare function test1<const T>(obj: {
->test1 : <const T>(obj: { [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test1 : <const T>(obj: { [K in keyof T]: T[K]; }) => [T, { [K in keyof T]: T[K]; }]
 >obj : { [K in keyof T]: T[K]; }

   [K in keyof T]: T[K];
@@= skipped -10, +10 lines =@@
 const result1 = test1({
 >result1 : [{ readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }, { readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }]
 >test1({  prop: "foo",  nested: {    nestedProp: "bar",  },}) : [{ readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }, { readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }]
->test1 : <const T>(obj: { [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test1 : <const T>(obj: { [K in keyof T]: T[K]; }) => [T, { [K in keyof T]: T[K]; }]
 >{  prop: "foo",  nested: {    nestedProp: "bar",  },} : { prop: "foo"; nested: { nestedProp: "bar"; }; }

   prop: "foo",
@@= skipped -19, +19 lines =@@
 });

 declare function test2<const T>(obj: {
->test2 : <const T>(obj: { readonly [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test2 : <const T>(obj: { readonly [K in keyof T]: T[K]; }) => [T, { readonly [K in keyof T]: T[K]; }]
 >obj : { readonly [K in keyof T]: T[K]; }

   readonly [K in keyof T]: T[K];
@@= skipped -10, +10 lines =@@
 const result2 = test2({
 >result2 : [{ prop: "foo"; nested: { readonly nestedProp: "bar"; }; }, { readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }]
 >test2({  prop: "foo",  nested: {    nestedProp: "bar",  },}) : [{ prop: "foo"; nested: { readonly nestedProp: "bar"; }; }, { readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }]
->test2 : <const T>(obj: { readonly [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test2 : <const T>(obj: { readonly [K in keyof T]: T[K]; }) => [T, { readonly [K in keyof T]: T[K]; }]
 >{  prop: "foo",  nested: {    nestedProp: "bar",  },} : { prop: "foo"; nested: { nestedProp: "bar"; }; }

   prop: "foo",
@@= skipped -19, +19 lines =@@
 });

 declare function test3<const T>(obj: {
->test3 : <const T>(obj: { -readonly [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test3 : <const T>(obj: { -readonly [K in keyof T]: T[K]; }) => [T, { -readonly [K in keyof T]: T[K]; }]
 >obj : { -readonly [K in keyof T]: T[K]; }

   -readonly [K in keyof T]: T[K];
@@= skipped -10, +10 lines =@@
 const result3 = test3({
 >result3 : [{ readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }, { prop: "foo"; nested: { readonly nestedProp: "bar"; }; }]
 >test3({  prop: "foo",  nested: {    nestedProp: "bar",  },}) : [{ readonly prop: "foo"; readonly nested: { readonly nestedProp: "bar"; }; }, { prop: "foo"; nested: { readonly nestedProp: "bar"; }; }]
->test3 : <const T>(obj: { -readonly [K in keyof T]: T[K]; }) => [T, typeof obj]
+>test3 : <const T>(obj: { -readonly [K in keyof T]: T[K]; }) => [T, { -readonly [K in keyof T]: T[K]; }]
 >{  prop: "foo",  nested: {    nestedProp: "bar",  },} : { prop: "foo"; nested: { nestedProp: "bar"; }; }

   prop: "foo",
--- old.controlFlowStringIndex.symbols
+++ new.controlFlowStringIndex.symbols
@@= skipped -15, +15 lines =@@
 >A : Symbol(A, Decl(controlFlowStringIndex.ts, 0, 0))

 if (value.foo !== null) {
->value.foo : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>value.foo : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))
 >value : Symbol(value, Decl(controlFlowStringIndex.ts, 4, 13))
->foo : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>foo : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))

     value.foo.toExponential()
 >value.foo.toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
->value.foo : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>value.foo : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))
 >value : Symbol(value, Decl(controlFlowStringIndex.ts, 4, 13))
->foo : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>foo : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))
 >toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))

     value.other // should still be number | null
@@= skipped -17, +17 lines =@@
 >other : Symbol(other, Decl(controlFlowStringIndex.ts, 0, 10))

     value.bar // should still be number | null
->value.bar : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>value.bar : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))
 >value : Symbol(value, Decl(controlFlowStringIndex.ts, 4, 13))
->bar : Symbol(A.__index, Decl(controlFlowStringIndex.ts, 1, 25))
+>bar : Symbol(__index, Decl(controlFlowStringIndex.ts, 1, 25))
 }

--- old.parserharness.js
+++ new.parserharness.js
@@= skipped -2083, +2083 lines =@@


 //// [parserharness.js]
-//ï»¿
-// Copyright (c) Microsoft Corporation.  All rights reserved.
-// 
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//   http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
 ///<reference path='..\compiler\io.ts'/>
 ///<reference path='..\compiler\typescript.ts'/>
 ///<reference path='..\services\typescriptServices.ts' />
@@= skipped -208, +194 lines =@@
         }
     }
     Harness.emitLog = emitLog;
-    let Runnable = (() => {
-        class Runnable {
-            constructor(description, block) {
-                this.description = description;
-                this.block = block;
-                // The error, if any, that occurred when running 'block'
-                this.error = null;
-                // Whether or not this object has any failures (including in its descendants)
-                this.passed = null;
-                // A list of bugs impacting this object
-                this.bugs = [];
-                // A list of all our child Runnables
-                this.children = [];
-            }
-            addChild(child) {
-                this.children.push(child);
-            }
-            /** Call function fn, which may take a done function and may possibly execute
-             *  asynchronously, calling done when finished. Returns true or false depending
-             *  on whether the function was asynchronous or not.
-             */
-            call(fn, done) {
-                var isAsync = true;
-                try {
-                    if (fn.length === 0) {
-                        // No async.
-                        fn();
-                        done();
-                        return false;
-                    }
-                    else {
-                        // Possibly async
-                        Runnable.pushGlobalErrorHandler(done);
-                        fn(function () {
-                            isAsync = false; // If we execute synchronously, this will get called before the return below.
-                            Runnable.popGlobalErrorHandler();
-                            done();
-                        });
-                        return isAsync;
-                    }
-                }
-                catch (e) {
-                    done(e);
-                    return false;
-                }
-            }
-            run(done) { }
-            runBlock(done) {
-                return this.call(this.block, done);
-            }
-            runChild(index, done) {
-                return this.call(((done) => this.children[index].run(done)), done);
-            }
-            static pushGlobalErrorHandler(done) {
-                errorHandlerStack.push(function (e) {
-                    done(e);
-                });
-            }
-            static popGlobalErrorHandler() {
-                errorHandlerStack.pop();
-            }
-            static handleError(e) {
-                if (errorHandlerStack.length === 0) {
-                    IO.printLine('Global error: ' + e);
-                }
-                else {
-                    errorHandlerStack[errorHandlerStack.length - 1](e);
-                }
-            }
+    class Runnable {
+        description;
+        block;
+        constructor(description, block) {
+            this.description = description;
+            this.block = block;
         }
         // The current stack of Runnable objects
-        Runnable.currentStack = [];
-        Runnable.errorHandlerStack = [];
-        return Runnable;
-    })();
+        static currentStack = [];
+        // The error, if any, that occurred when running 'block'
+        error = null;
+        // Whether or not this object has any failures (including in its descendants)
+        passed = null;
+        // A list of bugs impacting this object
+        bugs = [];
+        // A list of all our child Runnables
+        children = [];
+        addChild(child) {
+            this.children.push(child);
+        }
+        /** Call function fn, which may take a done function and may possibly execute
+         *  asynchronously, calling done when finished. Returns true or false depending
+         *  on whether the function was asynchronous or not.
+         */
+        call(fn, done) {
+            var isAsync = true;
+            try {
+                if (fn.length === 0) {
+                    // No async.
+                    fn();
+                    done();
+                    return false;
+                }
+                else {
+                    // Possibly async
+                    Runnable.pushGlobalErrorHandler(done);
+                    fn(function () {
+                        isAsync = false; // If we execute synchronously, this will get called before the return below.
+                        Runnable.popGlobalErrorHandler();
+                        done();
+                    });
+                    return isAsync;
+                }
+            }
+            catch (e) {
+                done(e);
+                return false;
+            }
+        }
+        run(done) { }
+        runBlock(done) {
+            return this.call(this.block, done);
+        }
+        runChild(index, done) {
+            return this.call(((done) => this.children[index].run(done)), done);
+        }
+        static errorHandlerStack = [];
+        static pushGlobalErrorHandler(done) {
+            errorHandlerStack.push(function (e) {
+                done(e);
+            });
+        }
+        static popGlobalErrorHandler() {
+            errorHandlerStack.pop();
+        }
+        static handleError(e) {
+            if (errorHandlerStack.length === 0) {
+                IO.printLine('Global error: ' + e);
+            }
+            else {
+                errorHandlerStack[errorHandlerStack.length - 1](e);
+            }
+        }
+    }
     Harness.Runnable = Runnable;
     class TestCase extends Runnable {
+        description;
+        block;
         constructor(description, block) {
             super(description, block);
             this.description = description;
@@= skipped -109, +110 lines =@@
     }
     Harness.TestCase = TestCase;
     class Scenario extends Runnable {
+        description;
+        block;
         constructor(description, block) {
             super(description, block);
             this.description = description;
@@= skipped -100, +102 lines =@@
             }
         })(Clock = Perf.Clock || (Perf.Clock = {}));
         class Timer {
-            constructor() {
-                this.time = 0;
-            }
+            startTime;
+            time = 0;
             start() {
                 this.time = 0;
                 this.startTime = Clock.now();
@@= skipped -14, +13 lines =@@
         }
         Perf.Timer = Timer;
         class Dataset {
-            constructor() {
-                this.data = [];
-            }
+            data = [];
             add(value) {
                 this.data.push(value);
             }
@@= skipped -43, +41 lines =@@
         Perf.Dataset = Dataset;
         // Base benchmark class with some defaults.
         class Benchmark {
-            constructor() {
-                this.iterations = 10;
-                this.description = "";
-                this.results = {};
-            }
+            iterations = 10;
+            description = "";
             bench(subBench) { }
             before() { }
             beforeEach() { }
             after() { }
             afterEach() { }
+            results = {};
             addTimingFor(name, timing) {
                 this.results[name] = this.results[name] || new Dataset();
                 this.results[name].add(timing);
@@= skipped -70, +68 lines =@@
          *  TypeScript compiler to fill with source code or errors.
          */
         class WriterAggregator {
-            constructor() {
-                this.lines = [];
-                this.currentLine = "";
-            }
+            lines = [];
+            currentLine = "";
             Write(str) {
                 this.currentLine += str;
             }
@@= skipped -25, +23 lines =@@
         Compiler.WriterAggregator = WriterAggregator;
         /** Mimics having multiple files, later concatenated to a single file. */
         class EmitterIOHost {
-            constructor() {
-                this.fileCollection = {};
-            }
+            fileCollection = {};
             /** create file gets the whole path to create, so this works as expected with the --out parameter */
             createFile(s, useUTF8) {
                 if (this.fileCollection[s]) {
@@= skipped -80, +78 lines =@@
         Compiler.compile = compile;
         // Types
         class Type {
+            type;
+            code;
+            identifier;
             constructor(type, code, identifier) {
                 this.type = type;
                 this.code = code;
@@= skipped -116, +119 lines =@@
         }
         Compiler.Type = Type;
         class TypeFactory {
+            any;
+            number;
+            string;
+            boolean;
             constructor() {
                 this.any = this.get('var x : any', 'x');
                 this.number = this.get('var x : number', 'x');
@@= skipped -201, +205 lines =@@
         Compiler.generateDeclFile = generateDeclFile;
         /** Contains the code and errors of a compilation and some helper methods to check its status. */
         class CompilerResult {
+            fileResults;
+            scripts;
+            code;
+            errors;
             /** @param fileResults an array of strings for the filename and an ITextWriter with its code */
             constructor(fileResults, errorLines, scripts) {
                 this.fileResults = fileResults;
@@= skipped -35, +39 lines =@@
         Compiler.CompilerResult = CompilerResult;
         // Compiler Error.
         class CompilerError {
+            file;
+            line;
+            column;
+            message;
             constructor(file, line, column, message) {
                 this.file = file;
                 this.line = line;
@@= skipped -289, +293 lines =@@
         TestCaseParser.makeUnitsFromTest = makeUnitsFromTest;
     })(TestCaseParser = Harness.TestCaseParser || (Harness.TestCaseParser = {}));
     class ScriptInfo {
+        name;
+        content;
+        isResident;
+        maxScriptVersions;
+        version;
+        editRanges = [];
         constructor(name, content, isResident, maxScriptVersions) {
             this.name = name;
             this.content = content;
             this.isResident = isResident;
             this.maxScriptVersions = maxScriptVersions;
-            this.editRanges = [];
             this.version = 1;
         }
         updateContent(content, isResident) {
@@= skipped -50, +55 lines =@@
     }
     Harness.ScriptInfo = ScriptInfo;
     class TypeScriptLS {
-        constructor() {
-            this.ls = null;
-            this.scripts = [];
-            this.maxScriptVersions = 100;
-        }
+        ls = null;
+        scripts = [];
+        maxScriptVersions = 100;
         addDefaultLibrary() {
             this.addScript("lib.d.ts", Harness.Compiler.libText, true);
         }
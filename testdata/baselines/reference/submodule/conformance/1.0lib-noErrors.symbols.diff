--- old.1.0lib-noErrors.symbols
+++ new.1.0lib-noErrors.symbols
@@= skipped -22, +22 lines =@@
 /////////////////////////////

 declare var NaN: number;
->NaN : Symbol(NaN, Decl(1.0lib-noErrors.ts, 21, 11))
+>NaN : Symbol(NaN, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 21, 11))

 declare var Infinity: number;
->Infinity : Symbol(Infinity, Decl(1.0lib-noErrors.ts, 22, 11))
+>Infinity : Symbol(Infinity, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 22, 11))

 /**
   * Evaluates JavaScript code and executes it. 
   * @param x A String value that contains valid JavaScript code.
   */
 declare function eval(x: string): any;
->eval : Symbol(eval, Decl(1.0lib-noErrors.ts, 22, 29))
+>eval : Symbol(eval, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 22, 29))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 28, 22))

 /**
@@= skipped -21, +21 lines =@@
   * All other strings are considered decimal.
   */
 declare function parseInt(s: string, radix?: number): number;
->parseInt : Symbol(parseInt, Decl(1.0lib-noErrors.ts, 28, 38))
+>parseInt : Symbol(parseInt, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 28, 38))
 >s : Symbol(s, Decl(1.0lib-noErrors.ts, 37, 26))
 >radix : Symbol(radix, Decl(1.0lib-noErrors.ts, 37, 36))

@@= skipped -9, +9 lines =@@
   * @param string A string that contains a floating-point number. 
   */
 declare function parseFloat(string: string): number;
->parseFloat : Symbol(parseFloat, Decl(1.0lib-noErrors.ts, 37, 61))
+>parseFloat : Symbol(parseFloat, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 37, 61))
 >string : Symbol(string, Decl(1.0lib-noErrors.ts, 43, 28))

 /**
@@= skipped -8, +8 lines =@@
   * @param number A numeric value.
   */
 declare function isNaN(number: number): boolean;
->isNaN : Symbol(isNaN, Decl(1.0lib-noErrors.ts, 43, 52))
+>isNaN : Symbol(isNaN, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 43, 52))
 >number : Symbol(number, Decl(1.0lib-noErrors.ts, 49, 23))

 /** 
@@= skipped -8, +8 lines =@@
   * @param number Any numeric value.
   */
 declare function isFinite(number: number): boolean;
->isFinite : Symbol(isFinite, Decl(1.0lib-noErrors.ts, 49, 48))
+>isFinite : Symbol(isFinite, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 49, 48))
 >number : Symbol(number, Decl(1.0lib-noErrors.ts, 55, 26))

 /**
@@= skipped -8, +8 lines =@@
   * @param encodedURI A value representing an encoded URI.
   */
 declare function decodeURI(encodedURI: string): string;
->decodeURI : Symbol(decodeURI, Decl(1.0lib-noErrors.ts, 55, 51))
+>decodeURI : Symbol(decodeURI, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 55, 51))
 >encodedURI : Symbol(encodedURI, Decl(1.0lib-noErrors.ts, 61, 27))

 /**
@@= skipped -8, +8 lines =@@
   * @param encodedURIComponent A value representing an encoded URI component.
   */
 declare function decodeURIComponent(encodedURIComponent: string): string;
->decodeURIComponent : Symbol(decodeURIComponent, Decl(1.0lib-noErrors.ts, 61, 55))
+>decodeURIComponent : Symbol(decodeURIComponent, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 61, 55))
 >encodedURIComponent : Symbol(encodedURIComponent, Decl(1.0lib-noErrors.ts, 67, 36))

 /** 
@@= skipped -8, +8 lines =@@
   * @param uri A value representing an encoded URI.
   */
 declare function encodeURI(uri: string): string;
->encodeURI : Symbol(encodeURI, Decl(1.0lib-noErrors.ts, 67, 73))
+>encodeURI : Symbol(encodeURI, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 67, 73))
 >uri : Symbol(uri, Decl(1.0lib-noErrors.ts, 73, 27))

 /**
@@= skipped -8, +8 lines =@@
   * @param uriComponent A value representing an encoded URI component.
   */
 declare function encodeURIComponent(uriComponent: string | number | boolean): string;
->encodeURIComponent : Symbol(encodeURIComponent, Decl(1.0lib-noErrors.ts, 73, 48))
+>encodeURIComponent : Symbol(encodeURIComponent, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 73, 48))
 >uriComponent : Symbol(uriComponent, Decl(1.0lib-noErrors.ts, 79, 36))

 interface PropertyDescriptor {
->PropertyDescriptor : Symbol(PropertyDescriptor, Decl(1.0lib-noErrors.ts, 79, 85))
+>PropertyDescriptor : Symbol(PropertyDescriptor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 79, 85))

     configurable?: boolean;
->configurable : Symbol(PropertyDescriptor.configurable, Decl(1.0lib-noErrors.ts, 81, 30))
+>configurable : Symbol(PropertyDescriptor.configurable, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 81, 30))

     enumerable?: boolean;
->enumerable : Symbol(PropertyDescriptor.enumerable, Decl(1.0lib-noErrors.ts, 82, 27))
+>enumerable : Symbol(PropertyDescriptor.enumerable, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 82, 27))

     value?: any;
->value : Symbol(PropertyDescriptor.value, Decl(1.0lib-noErrors.ts, 83, 25))
+>value : Symbol(PropertyDescriptor.value, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 83, 25))

     writable?: boolean;
->writable : Symbol(PropertyDescriptor.writable, Decl(1.0lib-noErrors.ts, 84, 16))
+>writable : Symbol(PropertyDescriptor.writable, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 84, 16))

     get?(): any;
->get : Symbol(PropertyDescriptor.get, Decl(1.0lib-noErrors.ts, 85, 23))
+>get : Symbol(PropertyDescriptor.get, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 85, 23))

     set?(v: any): void;
->set : Symbol(PropertyDescriptor.set, Decl(1.0lib-noErrors.ts, 86, 16))
+>set : Symbol(PropertyDescriptor.set, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 86, 16))
 >v : Symbol(v, Decl(1.0lib-noErrors.ts, 87, 9))
 }

 interface PropertyDescriptorMap {
->PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(1.0lib-noErrors.ts, 88, 1))
+>PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 88, 1))

     [s: string]: PropertyDescriptor;
 >s : Symbol(s, Decl(1.0lib-noErrors.ts, 91, 5))
->PropertyDescriptor : Symbol(PropertyDescriptor, Decl(1.0lib-noErrors.ts, 79, 85))
+>PropertyDescriptor : Symbol(PropertyDescriptor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 79, 85))
 }

 interface Object {
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
     constructor: Function;
->constructor : Symbol(Object.constructor, Decl(1.0lib-noErrors.ts, 94, 18))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 94, 18))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))

     /** Returns a string representation of an object. */
     toString(): string;
->toString : Symbol(Object.toString, Decl(1.0lib-noErrors.ts, 96, 26))
+>toString : Symbol(Object.toString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 96, 26))

     /** Returns a date converted to a string using the current locale. */
     toLocaleString(): string;
->toLocaleString : Symbol(Object.toLocaleString, Decl(1.0lib-noErrors.ts, 99, 23))
+>toLocaleString : Symbol(Object.toLocaleString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 99, 23))

     /** Returns the primitive value of the specified object. */
     valueOf(): Object;
->valueOf : Symbol(Object.valueOf, Decl(1.0lib-noErrors.ts, 102, 29))
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>valueOf : Symbol(Object.valueOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 102, 29))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     /**
       * Determines whether an object has a property with the specified name. 
       * @param v A property name.
       */
     hasOwnProperty(v: string): boolean;
->hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(1.0lib-noErrors.ts, 105, 22))
+>hasOwnProperty : Symbol(Object.hasOwnProperty, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 105, 22))
 >v : Symbol(v, Decl(1.0lib-noErrors.ts, 111, 19))

     /**
@@= skipped -68, +68 lines =@@
       * @param v Another object whose prototype chain is to be checked.
       */
     isPrototypeOf(v: Object): boolean;
->isPrototypeOf : Symbol(Object.isPrototypeOf, Decl(1.0lib-noErrors.ts, 111, 39))
+>isPrototypeOf : Symbol(Object.isPrototypeOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 111, 39))
 >v : Symbol(v, Decl(1.0lib-noErrors.ts, 117, 18))
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     /** 
       * Determines whether a specified property is enumerable.
       * @param v A property name.
       */
     propertyIsEnumerable(v: string): boolean;
->propertyIsEnumerable : Symbol(Object.propertyIsEnumerable, Decl(1.0lib-noErrors.ts, 117, 38))
+>propertyIsEnumerable : Symbol(Object.propertyIsEnumerable, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 117, 38))
 >v : Symbol(v, Decl(1.0lib-noErrors.ts, 123, 25))
 }

@@= skipped -17, +17 lines =@@
   * Provides functionality common to all JavaScript objects.
   */
 declare var Object: {
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     new (value?: any): Object;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 130, 9))
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     (): any;
     (value: any): any;
@@= skipped -13, +13 lines =@@
     /** A reference to the prototype for a class of objects. */
     prototype: Object;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 132, 22))
->Object : Symbol(Object, Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))
+>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 92, 1), Decl(1.0lib-noErrors.ts, 129, 11))

     /** 
       * Returns the prototype of an object. 
@@= skipped -20, +20 lines =@@
 >getOwnPropertyDescriptor : Symbol(getOwnPropertyDescriptor, Decl(1.0lib-noErrors.ts, 141, 32))
 >o : Symbol(o, Decl(1.0lib-noErrors.ts, 149, 29))
 >p : Symbol(p, Decl(1.0lib-noErrors.ts, 149, 36))
->PropertyDescriptor : Symbol(PropertyDescriptor, Decl(1.0lib-noErrors.ts, 79, 85))
+>PropertyDescriptor : Symbol(PropertyDescriptor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 79, 85))

     /** 
       * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly 
@@= skipped -20, +20 lines =@@
 >create : Symbol(create, Decl(1.0lib-noErrors.ts, 156, 42))
 >o : Symbol(o, Decl(1.0lib-noErrors.ts, 163, 11))
 >properties : Symbol(properties, Decl(1.0lib-noErrors.ts, 163, 18))
->PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(1.0lib-noErrors.ts, 88, 1))
+>PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 88, 1))

     /**
       * Adds a property to an object, or modifies attributes of an existing property. 
@@= skipped -13, +13 lines =@@
 >o : Symbol(o, Decl(1.0lib-noErrors.ts, 171, 19))
 >p : Symbol(p, Decl(1.0lib-noErrors.ts, 171, 26))
 >attributes : Symbol(attributes, Decl(1.0lib-noErrors.ts, 171, 37))
->PropertyDescriptor : Symbol(PropertyDescriptor, Decl(1.0lib-noErrors.ts, 79, 85))
+>PropertyDescriptor : Symbol(PropertyDescriptor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 79, 85))

     /**
       * Adds one or more properties to an object, and/or modifies attributes of existing properties. 
@@= skipped -11, +11 lines =@@
 >defineProperties : Symbol(defineProperties, Decl(1.0lib-noErrors.ts, 171, 75))
 >o : Symbol(o, Decl(1.0lib-noErrors.ts, 178, 21))
 >properties : Symbol(properties, Decl(1.0lib-noErrors.ts, 178, 28))
->PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(1.0lib-noErrors.ts, 88, 1))
+>PropertyDescriptorMap : Symbol(PropertyDescriptorMap, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 88, 1))

     /**
       * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
@@= skipped -63, +63 lines =@@
   * Creates a new function.
   */
 interface Function {
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))

     /**
       * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
@@= skipped -8, +8 lines =@@
       * @param argArray A set of arguments to be passed to the function.
       */
     apply(thisArg: any, argArray?: any): any;
->apply : Symbol(Function.apply, Decl(1.0lib-noErrors.ts, 226, 20))
+>apply : Symbol(Function.apply, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 226, 20))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 232, 10))
 >argArray : Symbol(argArray, Decl(1.0lib-noErrors.ts, 232, 23))

@@= skipped -10, +10 lines =@@
       * @param argArray A list of arguments to be passed to the method.
       */
     call(thisArg: any, ...argArray: any[]): any;
->call : Symbol(Function.call, Decl(1.0lib-noErrors.ts, 232, 45))
+>call : Symbol(Function.call, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 232, 45))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 239, 9))
 >argArray : Symbol(argArray, Decl(1.0lib-noErrors.ts, 239, 22))

@@= skipped -11, +11 lines =@@
       * @param argArray A list of arguments to be passed to the new function.
       */
     bind(thisArg: any, ...argArray: any[]): any;
->bind : Symbol(Function.bind, Decl(1.0lib-noErrors.ts, 239, 48))
+>bind : Symbol(Function.bind, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 239, 48))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 247, 9))
 >argArray : Symbol(argArray, Decl(1.0lib-noErrors.ts, 247, 22))

     prototype: any;
->prototype : Symbol(Function.prototype, Decl(1.0lib-noErrors.ts, 247, 48))
+>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 247, 48))

     length: number;
->length : Symbol(Function.length, Decl(1.0lib-noErrors.ts, 249, 19))
+>length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 249, 19))

     // Non-standard extensions
     arguments: any;
->arguments : Symbol(Function.arguments, Decl(1.0lib-noErrors.ts, 250, 19))
+>arguments : Symbol(Function.arguments, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 250, 19))

     caller: Function;
->caller : Symbol(Function.caller, Decl(1.0lib-noErrors.ts, 253, 19))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>caller : Symbol(Function.caller, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 253, 19))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
 }

 declare var Function: {
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))

     /** 
       * Creates a new function.
@@= skipped -28, +28 lines =@@
       */
     new (...args: string[]): Function;
 >args : Symbol(args, Decl(1.0lib-noErrors.ts, 262, 9))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))

     (...args: string[]): Function;
 >args : Symbol(args, Decl(1.0lib-noErrors.ts, 263, 5))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))

     prototype: Function;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 263, 34))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
 }

 interface IArguments {
->IArguments : Symbol(IArguments, Decl(1.0lib-noErrors.ts, 265, 1))
+>IArguments : Symbol(IArguments, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 265, 1))

     [index: number]: any;
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 268, 5))

     length: number;
->length : Symbol(IArguments.length, Decl(1.0lib-noErrors.ts, 268, 25))
+>length : Symbol(IArguments.length, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 268, 25))

     callee: Function;
->callee : Symbol(IArguments.callee, Decl(1.0lib-noErrors.ts, 269, 19))
->Function : Symbol(Function, Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
+>callee : Symbol(IArguments.callee, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 269, 19))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 221, 1), Decl(1.0lib-noErrors.ts, 257, 11))
 }

 interface String {
->String : Symbol(String, Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))

     /** Returns a string representation of a string. */
     toString(): string;
->toString : Symbol(String.toString, Decl(1.0lib-noErrors.ts, 273, 18))
+>toString : Symbol(String.toString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 273, 18))

     /**
       * Returns the character at the specified index.
       * @param pos The zero-based index of the desired character.
       */
     charAt(pos: number): string;
->charAt : Symbol(String.charAt, Decl(1.0lib-noErrors.ts, 275, 23))
+>charAt : Symbol(String.charAt, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 275, 23))
 >pos : Symbol(pos, Decl(1.0lib-noErrors.ts, 281, 11))

     /** 
@@= skipped -45, +45 lines =@@
       * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
       */
     charCodeAt(index: number): number;
->charCodeAt : Symbol(String.charCodeAt, Decl(1.0lib-noErrors.ts, 281, 32))
+>charCodeAt : Symbol(String.charCodeAt, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 281, 32))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 287, 15))

     /**
@@= skipped -8, +8 lines =@@
       * @param strings The strings to append to the end of the string.  
       */
     concat(...strings: string[]): string;
->concat : Symbol(String.concat, Decl(1.0lib-noErrors.ts, 287, 38))
+>concat : Symbol(String.concat, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 287, 38))
 >strings : Symbol(strings, Decl(1.0lib-noErrors.ts, 293, 11))

     /**
@@= skipped -9, +9 lines =@@
       * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
       */
     indexOf(searchString: string, position?: number): number;
->indexOf : Symbol(String.indexOf, Decl(1.0lib-noErrors.ts, 293, 41))
+>indexOf : Symbol(String.indexOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 293, 41))
 >searchString : Symbol(searchString, Decl(1.0lib-noErrors.ts, 300, 12))
 >position : Symbol(position, Decl(1.0lib-noErrors.ts, 300, 33))

@@= skipped -10, +10 lines =@@
       * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
       */
     lastIndexOf(searchString: string, position?: number): number;
->lastIndexOf : Symbol(String.lastIndexOf, Decl(1.0lib-noErrors.ts, 300, 61))
+>lastIndexOf : Symbol(String.lastIndexOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 300, 61))
 >searchString : Symbol(searchString, Decl(1.0lib-noErrors.ts, 307, 16))
 >position : Symbol(position, Decl(1.0lib-noErrors.ts, 307, 37))

@@= skipped -9, +9 lines =@@
       * @param that String to compare to target string
       */
     localeCompare(that: string): number;
->localeCompare : Symbol(String.localeCompare, Decl(1.0lib-noErrors.ts, 307, 65))
+>localeCompare : Symbol(String.localeCompare, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 307, 65))
 >that : Symbol(that, Decl(1.0lib-noErrors.ts, 313, 18))

     /** 
@@= skipped -8, +8 lines =@@
       * @param regexp A variable name or string literal containing the regular expression pattern and flags.
       */
     match(regexp: string): string[];
->match : Symbol(String.match, Decl(1.0lib-noErrors.ts, 313, 40), Decl(1.0lib-noErrors.ts, 319, 36))
+>match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 313, 40), Decl(1.0lib-noErrors.ts, 319, 36))
 >regexp : Symbol(regexp, Decl(1.0lib-noErrors.ts, 319, 10))

     /** 
@@= skipped -8, +8 lines =@@
       * @param regexp A regular expression object that contains the regular expression pattern and applicable flags. 
       */
     match(regexp: RegExp): string[];
->match : Symbol(String.match, Decl(1.0lib-noErrors.ts, 313, 40), Decl(1.0lib-noErrors.ts, 319, 36))
+>match : Symbol(String.match, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 313, 40), Decl(1.0lib-noErrors.ts, 319, 36))
 >regexp : Symbol(regexp, Decl(1.0lib-noErrors.ts, 325, 10))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     /**
       * Replaces text in a string, using a regular expression or search string.
@@= skipped -10, +10 lines =@@
       * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.
       */
     replace(searchValue: string, replaceValue: string): string;
->replace : Symbol(String.replace, Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102), Decl(1.0lib-noErrors.ts, 346, 63))
+>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102) ... and 1 more)
 >searchValue : Symbol(searchValue, Decl(1.0lib-noErrors.ts, 332, 12))
 >replaceValue : Symbol(replaceValue, Decl(1.0lib-noErrors.ts, 332, 32))

@@= skipped -10, +10 lines =@@
       * @param replaceValue A function that returns the replacement text.
       */
     replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;
->replace : Symbol(String.replace, Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102), Decl(1.0lib-noErrors.ts, 346, 63))
+>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102) ... and 1 more)
 >searchValue : Symbol(searchValue, Decl(1.0lib-noErrors.ts, 339, 12))
 >replaceValue : Symbol(replaceValue, Decl(1.0lib-noErrors.ts, 339, 32))
 >substring : Symbol(substring, Decl(1.0lib-noErrors.ts, 339, 48))
@@= skipped -12, +12 lines =@@
       * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.
       */
     replace(searchValue: RegExp, replaceValue: string): string;
->replace : Symbol(String.replace, Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102), Decl(1.0lib-noErrors.ts, 346, 63))
+>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102) ... and 1 more)
 >searchValue : Symbol(searchValue, Decl(1.0lib-noErrors.ts, 346, 12))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
 >replaceValue : Symbol(replaceValue, Decl(1.0lib-noErrors.ts, 346, 32))

     /**
@@= skipped -11, +11 lines =@@
       * @param replaceValue A function that returns the replacement text.
       */
     replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;
->replace : Symbol(String.replace, Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102), Decl(1.0lib-noErrors.ts, 346, 63))
+>replace : Symbol(String.replace, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 325, 36), Decl(1.0lib-noErrors.ts, 332, 63), Decl(1.0lib-noErrors.ts, 339, 102) ... and 1 more)
 >searchValue : Symbol(searchValue, Decl(1.0lib-noErrors.ts, 353, 12))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
 >replaceValue : Symbol(replaceValue, Decl(1.0lib-noErrors.ts, 353, 32))
 >substring : Symbol(substring, Decl(1.0lib-noErrors.ts, 353, 48))
 >args : Symbol(args, Decl(1.0lib-noErrors.ts, 353, 66))
@@= skipped -12, +12 lines =@@
       * @param regexp The regular expression pattern and applicable flags. 
       */
     search(regexp: string): number;
->search : Symbol(String.search, Decl(1.0lib-noErrors.ts, 353, 102), Decl(1.0lib-noErrors.ts, 359, 35))
+>search : Symbol(String.search, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 353, 102), Decl(1.0lib-noErrors.ts, 359, 35))
 >regexp : Symbol(regexp, Decl(1.0lib-noErrors.ts, 359, 11))

     /**
@@= skipped -8, +8 lines =@@
       * @param regexp The regular expression pattern and applicable flags. 
       */
     search(regexp: RegExp): number;
->search : Symbol(String.search, Decl(1.0lib-noErrors.ts, 353, 102), Decl(1.0lib-noErrors.ts, 359, 35))
+>search : Symbol(String.search, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 353, 102), Decl(1.0lib-noErrors.ts, 359, 35))
 >regexp : Symbol(regexp, Decl(1.0lib-noErrors.ts, 365, 11))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     /**
       * Returns a section of a string.
@@= skipped -11, +11 lines =@@
       * If this value is not specified, the substring continues to the end of stringObj.
       */
     slice(start?: number, end?: number): string;
->slice : Symbol(String.slice, Decl(1.0lib-noErrors.ts, 365, 35))
+>slice : Symbol(String.slice, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 365, 35))
 >start : Symbol(start, Decl(1.0lib-noErrors.ts, 373, 10))
 >end : Symbol(end, Decl(1.0lib-noErrors.ts, 373, 25))

@@= skipped -10, +10 lines =@@
       * @param limit A value used to limit the number of elements returned in the array.
       */
     split(separator: string, limit?: number): string[];
->split : Symbol(String.split, Decl(1.0lib-noErrors.ts, 373, 48), Decl(1.0lib-noErrors.ts, 380, 55))
+>split : Symbol(String.split, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 373, 48), Decl(1.0lib-noErrors.ts, 380, 55))
 >separator : Symbol(separator, Decl(1.0lib-noErrors.ts, 380, 10))
 >limit : Symbol(limit, Decl(1.0lib-noErrors.ts, 380, 28))

@@= skipped -10, +10 lines =@@
       * @param limit A value used to limit the number of elements returned in the array.
       */
     split(separator: RegExp, limit?: number): string[];
->split : Symbol(String.split, Decl(1.0lib-noErrors.ts, 373, 48), Decl(1.0lib-noErrors.ts, 380, 55))
+>split : Symbol(String.split, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 373, 48), Decl(1.0lib-noErrors.ts, 380, 55))
 >separator : Symbol(separator, Decl(1.0lib-noErrors.ts, 387, 10))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
 >limit : Symbol(limit, Decl(1.0lib-noErrors.ts, 387, 28))

     /**
@@= skipped -12, +12 lines =@@
       * If end is omitted, the characters from start through the end of the original string are returned.
       */
     substring(start: number, end?: number): string;
->substring : Symbol(String.substring, Decl(1.0lib-noErrors.ts, 387, 55))
+>substring : Symbol(String.substring, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 387, 55))
 >start : Symbol(start, Decl(1.0lib-noErrors.ts, 395, 14))
 >end : Symbol(end, Decl(1.0lib-noErrors.ts, 395, 28))

     /** Converts all the alphabetic characters in a string to lowercase. */
     toLowerCase(): string;
->toLowerCase : Symbol(String.toLowerCase, Decl(1.0lib-noErrors.ts, 395, 51))
+>toLowerCase : Symbol(String.toLowerCase, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 395, 51))

     /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
     toLocaleLowerCase(): string;
->toLocaleLowerCase : Symbol(String.toLocaleLowerCase, Decl(1.0lib-noErrors.ts, 398, 26))
+>toLocaleLowerCase : Symbol(String.toLocaleLowerCase, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 398, 26))

     /** Converts all the alphabetic characters in a string to uppercase. */
     toUpperCase(): string;
->toUpperCase : Symbol(String.toUpperCase, Decl(1.0lib-noErrors.ts, 401, 32))
+>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 401, 32))

     /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
     toLocaleUpperCase(): string;
->toLocaleUpperCase : Symbol(String.toLocaleUpperCase, Decl(1.0lib-noErrors.ts, 404, 26))
+>toLocaleUpperCase : Symbol(String.toLocaleUpperCase, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 404, 26))

     /** Removes the leading and trailing white space and line terminator characters from a string. */
     trim(): string;
->trim : Symbol(String.trim, Decl(1.0lib-noErrors.ts, 407, 32))
+>trim : Symbol(String.trim, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 407, 32))

     /** Returns the length of a String object. */
     length: number;
->length : Symbol(String.length, Decl(1.0lib-noErrors.ts, 410, 19))
+>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 410, 19))

     // IE extensions
     /**
@@= skipped -35, +35 lines =@@
       * @param length The number of characters to include in the returned substring.
       */
     substr(from: number, length?: number): string;
->substr : Symbol(String.substr, Decl(1.0lib-noErrors.ts, 413, 19))
+>substr : Symbol(String.substr, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 413, 19))
 >from : Symbol(from, Decl(1.0lib-noErrors.ts, 421, 11))
 >length : Symbol(length, Decl(1.0lib-noErrors.ts, 421, 24))

@@= skipped -12, +12 lines =@@
   * Allows manipulation and formatting of text strings and determination and location of substrings within strings. 
   */
 declare var String: {
->String : Symbol(String, Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))

     new (value?: any): String;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 430, 9))
->String : Symbol(String, Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))

     (value?: any): string;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 431, 5))

     prototype: String;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 431, 26))
->String : Symbol(String, Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))
+>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 271, 1), Decl(1.0lib-noErrors.ts, 429, 11))

     fromCharCode(...codes: number[]): string;
 >fromCharCode : Symbol(fromCharCode, Decl(1.0lib-noErrors.ts, 432, 22))
@@= skipped -19, +19 lines =@@
 }

 interface Boolean {
->Boolean : Symbol(Boolean, Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
+>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
 }
 declare var Boolean: {
->Boolean : Symbol(Boolean, Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
+>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))

     new (value?: any): Boolean;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 439, 9))
->Boolean : Symbol(Boolean, Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
+>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))

     (value?: any): boolean;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 440, 5))

     prototype: Boolean;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 440, 27))
->Boolean : Symbol(Boolean, Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
+>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 434, 1), Decl(1.0lib-noErrors.ts, 438, 11))
 }

 interface Number {
->Number : Symbol(Number, Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))
+>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))

     /**
       * Returns a string representation of an object.
       * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
       */
     toString(radix?: number): string;
->toString : Symbol(Number.toString, Decl(1.0lib-noErrors.ts, 444, 18))
+>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 444, 18))
 >radix : Symbol(radix, Decl(1.0lib-noErrors.ts, 449, 13))

     /** 
@@= skipped -33, +33 lines =@@
       * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
       */
     toFixed(fractionDigits?: number): string;
->toFixed : Symbol(Number.toFixed, Decl(1.0lib-noErrors.ts, 449, 37))
+>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 449, 37))
 >fractionDigits : Symbol(fractionDigits, Decl(1.0lib-noErrors.ts, 455, 12))

     /**
@@= skipped -8, +8 lines =@@
       * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
       */
     toExponential(fractionDigits?: number): string;
->toExponential : Symbol(Number.toExponential, Decl(1.0lib-noErrors.ts, 455, 45))
+>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 455, 45))
 >fractionDigits : Symbol(fractionDigits, Decl(1.0lib-noErrors.ts, 461, 18))

     /**
@@= skipped -8, +8 lines =@@
       * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
       */
     toPrecision(precision?: number): string;
->toPrecision : Symbol(Number.toPrecision, Decl(1.0lib-noErrors.ts, 461, 51))
+>toPrecision : Symbol(Number.toPrecision, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 461, 51))
 >precision : Symbol(precision, Decl(1.0lib-noErrors.ts, 467, 16))
 }

 /** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */
 declare var Number: {
->Number : Symbol(Number, Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))
+>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))

     new (value?: any): Number;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 472, 9))
->Number : Symbol(Number, Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))
+>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))

     (value?: any): number;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 473, 5))

     prototype: Number;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 473, 26))
->Number : Symbol(Number, Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))
+>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 442, 1), Decl(1.0lib-noErrors.ts, 471, 11))

     /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */
     MAX_VALUE: number;
@@= skipped -50, +50 lines =@@
 }

 interface Math {
->Math : Symbol(Math, Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))

     /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */
     E: number;
->E : Symbol(Math.E, Decl(1.0lib-noErrors.ts, 501, 16))
+>E : Symbol(Math.E, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 501, 16))

     /** The natural logarithm of 10. */
     LN10: number;
->LN10 : Symbol(Math.LN10, Decl(1.0lib-noErrors.ts, 503, 14))
+>LN10 : Symbol(Math.LN10, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 503, 14))

     /** The natural logarithm of 2. */
     LN2: number;
->LN2 : Symbol(Math.LN2, Decl(1.0lib-noErrors.ts, 505, 17))
+>LN2 : Symbol(Math.LN2, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 505, 17))

     /** The base-2 logarithm of e. */
     LOG2E: number;
->LOG2E : Symbol(Math.LOG2E, Decl(1.0lib-noErrors.ts, 507, 16))
+>LOG2E : Symbol(Math.LOG2E, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 507, 16))

     /** The base-10 logarithm of e. */
     LOG10E: number;
->LOG10E : Symbol(Math.LOG10E, Decl(1.0lib-noErrors.ts, 509, 18))
+>LOG10E : Symbol(Math.LOG10E, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 509, 18))

     /** Pi. This is the ratio of the circumference of a circle to its diameter. */
     PI: number;
->PI : Symbol(Math.PI, Decl(1.0lib-noErrors.ts, 511, 19))
+>PI : Symbol(Math.PI, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 511, 19))

     /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */
     SQRT1_2: number;
->SQRT1_2 : Symbol(Math.SQRT1_2, Decl(1.0lib-noErrors.ts, 513, 15))
+>SQRT1_2 : Symbol(Math.SQRT1_2, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 513, 15))

     /** The square root of 2. */
     SQRT2: number;
->SQRT2 : Symbol(Math.SQRT2, Decl(1.0lib-noErrors.ts, 515, 20))
+>SQRT2 : Symbol(Math.SQRT2, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 515, 20))

     /**
       * Returns the absolute value of a number (the value without regard to whether it is positive or negative). 
@@= skipped -40, +40 lines =@@
       * @param x A numeric expression for which the absolute value is needed.
       */
     abs(x: number): number;
->abs : Symbol(Math.abs, Decl(1.0lib-noErrors.ts, 517, 18))
+>abs : Symbol(Math.abs, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 517, 18))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 523, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression.
       */
     acos(x: number): number;
->acos : Symbol(Math.acos, Decl(1.0lib-noErrors.ts, 523, 27))
+>acos : Symbol(Math.acos, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 523, 27))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 528, 9))

     /** 
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression.
       */
     asin(x: number): number;
->asin : Symbol(Math.asin, Decl(1.0lib-noErrors.ts, 528, 28))
+>asin : Symbol(Math.asin, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 528, 28))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 533, 9))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression for which the arctangent is needed.
       */
     atan(x: number): number;
->atan : Symbol(Math.atan, Decl(1.0lib-noErrors.ts, 533, 28))
+>atan : Symbol(Math.atan, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 533, 28))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 538, 9))

     /**
@@= skipped -9, +9 lines =@@
       * @param x A numeric expression representing the cartesian x-coordinate.
       */
     atan2(y: number, x: number): number;
->atan2 : Symbol(Math.atan2, Decl(1.0lib-noErrors.ts, 538, 28))
+>atan2 : Symbol(Math.atan2, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 538, 28))
 >y : Symbol(y, Decl(1.0lib-noErrors.ts, 544, 10))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 544, 20))

@@= skipped -9, +9 lines =@@
       * @param x A numeric expression.
       */
     ceil(x: number): number;
->ceil : Symbol(Math.ceil, Decl(1.0lib-noErrors.ts, 544, 40))
+>ceil : Symbol(Math.ceil, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 544, 40))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 549, 9))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression that contains an angle measured in radians.
       */
     cos(x: number): number;
->cos : Symbol(Math.cos, Decl(1.0lib-noErrors.ts, 549, 28))
+>cos : Symbol(Math.cos, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 549, 28))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 554, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression representing the power of e.
       */
     exp(x: number): number;
->exp : Symbol(Math.exp, Decl(1.0lib-noErrors.ts, 554, 27))
+>exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 554, 27))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 559, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression.
       */
     floor(x: number): number;
->floor : Symbol(Math.floor, Decl(1.0lib-noErrors.ts, 559, 27))
+>floor : Symbol(Math.floor, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 559, 27))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 564, 10))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression.
       */
     log(x: number): number;
->log : Symbol(Math.log, Decl(1.0lib-noErrors.ts, 564, 29))
+>log : Symbol(Math.log, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 564, 29))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 569, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param values Numeric expressions to be evaluated.
       */
     max(...values: number[]): number;
->max : Symbol(Math.max, Decl(1.0lib-noErrors.ts, 569, 27))
+>max : Symbol(Math.max, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 569, 27))
 >values : Symbol(values, Decl(1.0lib-noErrors.ts, 574, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param values Numeric expressions to be evaluated.
       */
     min(...values: number[]): number;
->min : Symbol(Math.min, Decl(1.0lib-noErrors.ts, 574, 37))
+>min : Symbol(Math.min, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 574, 37))
 >values : Symbol(values, Decl(1.0lib-noErrors.ts, 579, 8))

     /**
@@= skipped -9, +9 lines =@@
       * @param y The exponent value of the expression.
       */
     pow(x: number, y: number): number;
->pow : Symbol(Math.pow, Decl(1.0lib-noErrors.ts, 579, 37))
+>pow : Symbol(Math.pow, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 579, 37))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 585, 8))
 >y : Symbol(y, Decl(1.0lib-noErrors.ts, 585, 18))

     /** Returns a pseudorandom number between 0 and 1. */
     random(): number;
->random : Symbol(Math.random, Decl(1.0lib-noErrors.ts, 585, 38))
+>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 585, 38))

     /** 
       * Returns a supplied numeric expression rounded to the nearest number.
       * @param x The value to be rounded to the nearest number.
       */
     round(x: number): number;
->round : Symbol(Math.round, Decl(1.0lib-noErrors.ts, 587, 21))
+>round : Symbol(Math.round, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 587, 21))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 592, 10))

     /**
@@= skipped -21, +21 lines =@@
       * @param x A numeric expression that contains an angle measured in radians.
       */
     sin(x: number): number;
->sin : Symbol(Math.sin, Decl(1.0lib-noErrors.ts, 592, 29))
+>sin : Symbol(Math.sin, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 592, 29))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 597, 8))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression.
       */
     sqrt(x: number): number;
->sqrt : Symbol(Math.sqrt, Decl(1.0lib-noErrors.ts, 597, 27))
+>sqrt : Symbol(Math.sqrt, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 597, 27))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 602, 9))

     /**
@@= skipped -8, +8 lines =@@
       * @param x A numeric expression that contains an angle measured in radians.
       */
     tan(x: number): number;
->tan : Symbol(Math.tan, Decl(1.0lib-noErrors.ts, 602, 28))
+>tan : Symbol(Math.tan, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 602, 28))
 >x : Symbol(x, Decl(1.0lib-noErrors.ts, 607, 8))
 }
 /** An intrinsic object that provides basic mathematics functionality and constants. */
 declare var Math: Math;
->Math : Symbol(Math, Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))
->Math : Symbol(Math, Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 499, 1), Decl(1.0lib-noErrors.ts, 610, 11))

 /** Enables basic storage and retrieval of dates and times. */
 interface Date {
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     /** Returns a string representation of a date. The format of the string depends on the locale. */
     toString(): string;
->toString : Symbol(Date.toString, Decl(1.0lib-noErrors.ts, 613, 16))
+>toString : Symbol(Date.toString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 613, 16))

     /** Returns a date as a string value. */
     toDateString(): string;
->toDateString : Symbol(Date.toDateString, Decl(1.0lib-noErrors.ts, 615, 23))
+>toDateString : Symbol(Date.toDateString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 615, 23))

     /** Returns a time as a string value. */
     toTimeString(): string;
->toTimeString : Symbol(Date.toTimeString, Decl(1.0lib-noErrors.ts, 617, 27))
+>toTimeString : Symbol(Date.toTimeString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 617, 27))

     /** Returns a value as a string value appropriate to the host environment's current locale. */
     toLocaleString(): string;
->toLocaleString : Symbol(Date.toLocaleString, Decl(1.0lib-noErrors.ts, 619, 27))
+>toLocaleString : Symbol(Date.toLocaleString, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 619, 27))

     /** Returns a date as a string value appropriate to the host environment's current locale. */
     toLocaleDateString(): string;
->toLocaleDateString : Symbol(Date.toLocaleDateString, Decl(1.0lib-noErrors.ts, 621, 29))
+>toLocaleDateString : Symbol(Date.toLocaleDateString, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 621, 29))

     /** Returns a time as a string value appropriate to the host environment's current locale. */
     toLocaleTimeString(): string;
->toLocaleTimeString : Symbol(Date.toLocaleTimeString, Decl(1.0lib-noErrors.ts, 623, 33))
+>toLocaleTimeString : Symbol(Date.toLocaleTimeString, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 623, 33))

     /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */
     valueOf(): number;
->valueOf : Symbol(Date.valueOf, Decl(1.0lib-noErrors.ts, 625, 33))
+>valueOf : Symbol(Date.valueOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 625, 33))

     /** Gets the time value in milliseconds. */
     getTime(): number;
->getTime : Symbol(Date.getTime, Decl(1.0lib-noErrors.ts, 627, 22))
+>getTime : Symbol(Date.getTime, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 627, 22))

     /** Gets the year, using local time. */
     getFullYear(): number;
->getFullYear : Symbol(Date.getFullYear, Decl(1.0lib-noErrors.ts, 629, 22))
+>getFullYear : Symbol(Date.getFullYear, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 629, 22))

     /** Gets the year using Universal Coordinated Time (UTC). */
     getUTCFullYear(): number;
->getUTCFullYear : Symbol(Date.getUTCFullYear, Decl(1.0lib-noErrors.ts, 631, 26))
+>getUTCFullYear : Symbol(Date.getUTCFullYear, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 631, 26))

     /** Gets the month, using local time. */
     getMonth(): number;
->getMonth : Symbol(Date.getMonth, Decl(1.0lib-noErrors.ts, 633, 29))
+>getMonth : Symbol(Date.getMonth, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 633, 29))

     /** Gets the month of a Date object using Universal Coordinated Time (UTC). */
     getUTCMonth(): number;
->getUTCMonth : Symbol(Date.getUTCMonth, Decl(1.0lib-noErrors.ts, 635, 23))
+>getUTCMonth : Symbol(Date.getUTCMonth, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 635, 23))

     /** Gets the day-of-the-month, using local time. */
     getDate(): number;
->getDate : Symbol(Date.getDate, Decl(1.0lib-noErrors.ts, 637, 26))
+>getDate : Symbol(Date.getDate, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 637, 26))

     /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */
     getUTCDate(): number;
->getUTCDate : Symbol(Date.getUTCDate, Decl(1.0lib-noErrors.ts, 639, 22))
+>getUTCDate : Symbol(Date.getUTCDate, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 639, 22))

     /** Gets the day of the week, using local time. */
     getDay(): number;
->getDay : Symbol(Date.getDay, Decl(1.0lib-noErrors.ts, 641, 25))
+>getDay : Symbol(Date.getDay, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 641, 25))

     /** Gets the day of the week using Universal Coordinated Time (UTC). */
     getUTCDay(): number;
->getUTCDay : Symbol(Date.getUTCDay, Decl(1.0lib-noErrors.ts, 643, 21))
+>getUTCDay : Symbol(Date.getUTCDay, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 643, 21))

     /** Gets the hours in a date, using local time. */
     getHours(): number;
->getHours : Symbol(Date.getHours, Decl(1.0lib-noErrors.ts, 645, 24))
+>getHours : Symbol(Date.getHours, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 645, 24))

     /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */
     getUTCHours(): number;
->getUTCHours : Symbol(Date.getUTCHours, Decl(1.0lib-noErrors.ts, 647, 23))
+>getUTCHours : Symbol(Date.getUTCHours, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 647, 23))

     /** Gets the minutes of a Date object, using local time. */
     getMinutes(): number;
->getMinutes : Symbol(Date.getMinutes, Decl(1.0lib-noErrors.ts, 649, 26))
+>getMinutes : Symbol(Date.getMinutes, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 649, 26))

     /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */
     getUTCMinutes(): number;
->getUTCMinutes : Symbol(Date.getUTCMinutes, Decl(1.0lib-noErrors.ts, 651, 25))
+>getUTCMinutes : Symbol(Date.getUTCMinutes, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 651, 25))

     /** Gets the seconds of a Date object, using local time. */
     getSeconds(): number;
->getSeconds : Symbol(Date.getSeconds, Decl(1.0lib-noErrors.ts, 653, 28))
+>getSeconds : Symbol(Date.getSeconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 653, 28))

     /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */
     getUTCSeconds(): number;
->getUTCSeconds : Symbol(Date.getUTCSeconds, Decl(1.0lib-noErrors.ts, 655, 25))
+>getUTCSeconds : Symbol(Date.getUTCSeconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 655, 25))

     /** Gets the milliseconds of a Date, using local time. */
     getMilliseconds(): number;
->getMilliseconds : Symbol(Date.getMilliseconds, Decl(1.0lib-noErrors.ts, 657, 28))
+>getMilliseconds : Symbol(Date.getMilliseconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 657, 28))

     /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */
     getUTCMilliseconds(): number;
->getUTCMilliseconds : Symbol(Date.getUTCMilliseconds, Decl(1.0lib-noErrors.ts, 659, 30))
+>getUTCMilliseconds : Symbol(Date.getUTCMilliseconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 659, 30))

     /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */
     getTimezoneOffset(): number;
->getTimezoneOffset : Symbol(Date.getTimezoneOffset, Decl(1.0lib-noErrors.ts, 661, 33))
+>getTimezoneOffset : Symbol(Date.getTimezoneOffset, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 661, 33))

     /** 
       * Sets the date and time value in the Date object.
       * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT. 
       */
     setTime(time: number): number;
->setTime : Symbol(Date.setTime, Decl(1.0lib-noErrors.ts, 663, 32))
+>setTime : Symbol(Date.setTime, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 663, 32))
 >time : Symbol(time, Decl(1.0lib-noErrors.ts, 668, 12))

     /**
@@= skipped -125, +125 lines =@@
       * @param ms A numeric value equal to the millisecond value.
       */
     setMilliseconds(ms: number): number;
->setMilliseconds : Symbol(Date.setMilliseconds, Decl(1.0lib-noErrors.ts, 668, 34))
+>setMilliseconds : Symbol(Date.setMilliseconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 668, 34))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 673, 20))

     /** 
@@= skipped -8, +8 lines =@@
       * @param ms A numeric value equal to the millisecond value. 
       */
     setUTCMilliseconds(ms: number): number;
->setUTCMilliseconds : Symbol(Date.setUTCMilliseconds, Decl(1.0lib-noErrors.ts, 673, 40))
+>setUTCMilliseconds : Symbol(Date.setUTCMilliseconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 673, 40))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 678, 23))

     /**
@@= skipped -9, +9 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setSeconds(sec: number, ms?: number): number;
->setSeconds : Symbol(Date.setSeconds, Decl(1.0lib-noErrors.ts, 678, 43))
+>setSeconds : Symbol(Date.setSeconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 678, 43))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 685, 15))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 685, 27))

@@= skipped -10, +10 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setUTCSeconds(sec: number, ms?: number): number;
->setUTCSeconds : Symbol(Date.setUTCSeconds, Decl(1.0lib-noErrors.ts, 685, 49))
+>setUTCSeconds : Symbol(Date.setUTCSeconds, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 685, 49))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 691, 18))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 691, 30))

@@= skipped -11, +11 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setMinutes(min: number, sec?: number, ms?: number): number;
->setMinutes : Symbol(Date.setMinutes, Decl(1.0lib-noErrors.ts, 691, 52))
+>setMinutes : Symbol(Date.setMinutes, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 691, 52))
 >min : Symbol(min, Decl(1.0lib-noErrors.ts, 698, 15))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 698, 27))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 698, 41))
@@= skipped -12, +12 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setUTCMinutes(min: number, sec?: number, ms?: number): number;
->setUTCMinutes : Symbol(Date.setUTCMinutes, Decl(1.0lib-noErrors.ts, 698, 63))
+>setUTCMinutes : Symbol(Date.setUTCMinutes, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 698, 63))
 >min : Symbol(min, Decl(1.0lib-noErrors.ts, 705, 18))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 705, 30))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 705, 44))
@@= skipped -13, +13 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setHours(hours: number, min?: number, sec?: number, ms?: number): number;
->setHours : Symbol(Date.setHours, Decl(1.0lib-noErrors.ts, 705, 66))
+>setHours : Symbol(Date.setHours, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 705, 66))
 >hours : Symbol(hours, Decl(1.0lib-noErrors.ts, 713, 13))
 >min : Symbol(min, Decl(1.0lib-noErrors.ts, 713, 27))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 713, 41))
@@= skipped -14, +14 lines =@@
       * @param ms A numeric value equal to the milliseconds value.
       */
     setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
->setUTCHours : Symbol(Date.setUTCHours, Decl(1.0lib-noErrors.ts, 713, 77))
+>setUTCHours : Symbol(Date.setUTCHours, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 713, 77))
 >hours : Symbol(hours, Decl(1.0lib-noErrors.ts, 721, 16))
 >min : Symbol(min, Decl(1.0lib-noErrors.ts, 721, 30))
 >sec : Symbol(sec, Decl(1.0lib-noErrors.ts, 721, 44))
@@= skipped -11, +11 lines =@@
       * @param date A numeric value equal to the day of the month.
       */
     setDate(date: number): number;
->setDate : Symbol(Date.setDate, Decl(1.0lib-noErrors.ts, 721, 80))
+>setDate : Symbol(Date.setDate, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 721, 80))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 726, 12))

     /** 
@@= skipped -8, +8 lines =@@
       * @param date A numeric value equal to the day of the month. 
       */
     setUTCDate(date: number): number;
->setUTCDate : Symbol(Date.setUTCDate, Decl(1.0lib-noErrors.ts, 726, 34))
+>setUTCDate : Symbol(Date.setUTCDate, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 726, 34))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 731, 15))

     /** 
@@= skipped -9, +9 lines =@@
       * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
       */
     setMonth(month: number, date?: number): number;
->setMonth : Symbol(Date.setMonth, Decl(1.0lib-noErrors.ts, 731, 37))
+>setMonth : Symbol(Date.setMonth, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 731, 37))
 >month : Symbol(month, Decl(1.0lib-noErrors.ts, 737, 13))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 737, 27))

@@= skipped -10, +10 lines =@@
       * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
       */
     setUTCMonth(month: number, date?: number): number;
->setUTCMonth : Symbol(Date.setUTCMonth, Decl(1.0lib-noErrors.ts, 737, 51))
+>setUTCMonth : Symbol(Date.setUTCMonth, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 737, 51))
 >month : Symbol(month, Decl(1.0lib-noErrors.ts, 743, 16))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 743, 30))

@@= skipped -11, +11 lines =@@
       * @param date A numeric value equal for the day of the month.
       */
     setFullYear(year: number, month?: number, date?: number): number;
->setFullYear : Symbol(Date.setFullYear, Decl(1.0lib-noErrors.ts, 743, 54))
+>setFullYear : Symbol(Date.setFullYear, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 743, 54))
 >year : Symbol(year, Decl(1.0lib-noErrors.ts, 750, 16))
 >month : Symbol(month, Decl(1.0lib-noErrors.ts, 750, 29))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 750, 45))
@@= skipped -12, +12 lines =@@
       * @param date A numeric value equal to the day of the month.
       */
     setUTCFullYear(year: number, month?: number, date?: number): number;
->setUTCFullYear : Symbol(Date.setUTCFullYear, Decl(1.0lib-noErrors.ts, 750, 69))
+>setUTCFullYear : Symbol(Date.setUTCFullYear, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 750, 69))
 >year : Symbol(year, Decl(1.0lib-noErrors.ts, 757, 19))
 >month : Symbol(month, Decl(1.0lib-noErrors.ts, 757, 32))
 >date : Symbol(date, Decl(1.0lib-noErrors.ts, 757, 48))

     /** Returns a date converted to a string using Universal Coordinated Time (UTC). */
     toUTCString(): string;
->toUTCString : Symbol(Date.toUTCString, Decl(1.0lib-noErrors.ts, 757, 72))
+>toUTCString : Symbol(Date.toUTCString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 757, 72))

     /** Returns a date as a string value in ISO format. */
     toISOString(): string;
->toISOString : Symbol(Date.toISOString, Decl(1.0lib-noErrors.ts, 759, 26))
+>toISOString : Symbol(Date.toISOString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 759, 26))

     /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */
     toJSON(key?: any): string;
->toJSON : Symbol(Date.toJSON, Decl(1.0lib-noErrors.ts, 761, 26))
+>toJSON : Symbol(Date.toJSON, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 761, 26))
 >key : Symbol(key, Decl(1.0lib-noErrors.ts, 763, 11))
 }

 declare var Date: {
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     new (): Date;
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     new (value: number): Date;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 768, 9))
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     new (value: string): Date;
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 769, 9))
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;
 >year : Symbol(year, Decl(1.0lib-noErrors.ts, 770, 9))
@@= skipped -41, +41 lines =@@
 >minutes : Symbol(minutes, Decl(1.0lib-noErrors.ts, 770, 68))
 >seconds : Symbol(seconds, Decl(1.0lib-noErrors.ts, 770, 86))
 >ms : Symbol(ms, Decl(1.0lib-noErrors.ts, 770, 104))
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     (): string;
     prototype: Date;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 771, 15))
->Date : Symbol(Date, Decl(1.0lib-noErrors.ts, 610, 23), Decl(1.0lib-noErrors.ts, 766, 11))
+>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(1.0lib-noErrors.ts, 610, 23) ... and 1 more)

     /**
       * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
@@= skipped -40, +40 lines =@@
 }

 interface RegExpExecArray {
->RegExpExecArray : Symbol(RegExpExecArray, Decl(1.0lib-noErrors.ts, 790, 1))
+>RegExpExecArray : Symbol(RegExpExecArray, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 790, 1))

     [index: number]: string;
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 793, 5))
@@= skipped -9, +9 lines =@@
 >length : Symbol(RegExpExecArray.length, Decl(1.0lib-noErrors.ts, 793, 28))

     index: number;
->index : Symbol(RegExpExecArray.index, Decl(1.0lib-noErrors.ts, 794, 19))
+>index : Symbol(RegExpExecArray.index, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 794, 19))

     input: string;
->input : Symbol(RegExpExecArray.input, Decl(1.0lib-noErrors.ts, 796, 18))
+>input : Symbol(RegExpExecArray.input, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 796, 18))

     toString(): string;
 >toString : Symbol(RegExpExecArray.toString, Decl(1.0lib-noErrors.ts, 797, 18))
@@= skipped -128, +128 lines =@@


 interface RegExp {
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     /** 
       * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
       * @param string The String object or string literal on which to perform the search.
       */
     exec(string: string): RegExpExecArray;
->exec : Symbol(RegExp.exec, Decl(1.0lib-noErrors.ts, 825, 18))
+>exec : Symbol(RegExp.exec, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 825, 18))
 >string : Symbol(string, Decl(1.0lib-noErrors.ts, 830, 9))
->RegExpExecArray : Symbol(RegExpExecArray, Decl(1.0lib-noErrors.ts, 790, 1))
+>RegExpExecArray : Symbol(RegExpExecArray, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 790, 1))

     /** 
       * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
       * @param string String on which to perform the search.
       */
     test(string: string): boolean;
->test : Symbol(RegExp.test, Decl(1.0lib-noErrors.ts, 830, 42))
+>test : Symbol(RegExp.test, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 830, 42))
 >string : Symbol(string, Decl(1.0lib-noErrors.ts, 836, 9))

     /** Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal. */
     source: string;
->source : Symbol(RegExp.source, Decl(1.0lib-noErrors.ts, 836, 34))
+>source : Symbol(RegExp.source, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 836, 34))

     /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */
     global: boolean;
->global : Symbol(RegExp.global, Decl(1.0lib-noErrors.ts, 839, 19))
+>global : Symbol(RegExp.global, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 839, 19))

     /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */
     ignoreCase: boolean;
->ignoreCase : Symbol(RegExp.ignoreCase, Decl(1.0lib-noErrors.ts, 842, 20))
+>ignoreCase : Symbol(RegExp.ignoreCase, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 842, 20))

     /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */
     multiline: boolean;
->multiline : Symbol(RegExp.multiline, Decl(1.0lib-noErrors.ts, 845, 24))
+>multiline : Symbol(RegExp.multiline, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 845, 24))

     lastIndex: number;
->lastIndex : Symbol(RegExp.lastIndex, Decl(1.0lib-noErrors.ts, 848, 23))
+>lastIndex : Symbol(RegExp.lastIndex, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 848, 23))

     // Non-standard extensions
     compile(): RegExp;
->compile : Symbol(RegExp.compile, Decl(1.0lib-noErrors.ts, 850, 22))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>compile : Symbol(RegExp.compile, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 850, 22))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
 }
 declare var RegExp: {
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     new (pattern: string, flags?: string): RegExp;
 >pattern : Symbol(pattern, Decl(1.0lib-noErrors.ts, 856, 9))
 >flags : Symbol(flags, Decl(1.0lib-noErrors.ts, 856, 25))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     (pattern: string, flags?: string): RegExp;
 >pattern : Symbol(pattern, Decl(1.0lib-noErrors.ts, 857, 5))
 >flags : Symbol(flags, Decl(1.0lib-noErrors.ts, 857, 21))
->RegExp : Symbol(RegExp, Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))
+>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 822, 1), Decl(1.0lib-noErrors.ts, 855, 11))

     // Non-standard extensions
     $1: string;
@@= skipped -89, +89 lines =@@
 }

 interface Error {
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))

     name: string;
->name : Symbol(Error.name, Decl(1.0lib-noErrors.ts, 872, 17))
+>name : Symbol(Error.name, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 872, 17))

     message: string;
->message : Symbol(Error.message, Decl(1.0lib-noErrors.ts, 873, 17))
+>message : Symbol(Error.message, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 873, 17))
 }
 declare var Error: {
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))

     new (message?: string): Error;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 877, 9))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))

     (message?: string): Error;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 878, 5))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))

     prototype: Error;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 878, 30))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }

 interface EvalError extends Error {
->EvalError : Symbol(EvalError, Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>EvalError : Symbol(EvalError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var EvalError: {
->EvalError : Symbol(EvalError, Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
+>EvalError : Symbol(EvalError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))

     new (message?: string): EvalError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 885, 9))
->EvalError : Symbol(EvalError, Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
+>EvalError : Symbol(EvalError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))

     (message?: string): EvalError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 886, 5))
->EvalError : Symbol(EvalError, Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
+>EvalError : Symbol(EvalError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))

     prototype: EvalError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 886, 34))
->EvalError : Symbol(EvalError, Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
+>EvalError : Symbol(EvalError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 880, 1), Decl(1.0lib-noErrors.ts, 884, 11))
 }

 interface RangeError extends Error {
->RangeError : Symbol(RangeError, Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>RangeError : Symbol(RangeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var RangeError: {
->RangeError : Symbol(RangeError, Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
+>RangeError : Symbol(RangeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))

     new (message?: string): RangeError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 893, 9))
->RangeError : Symbol(RangeError, Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
+>RangeError : Symbol(RangeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))

     (message?: string): RangeError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 894, 5))
->RangeError : Symbol(RangeError, Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
+>RangeError : Symbol(RangeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))

     prototype: RangeError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 894, 35))
->RangeError : Symbol(RangeError, Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
+>RangeError : Symbol(RangeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 888, 1), Decl(1.0lib-noErrors.ts, 892, 11))
 }

 interface ReferenceError extends Error {
->ReferenceError : Symbol(ReferenceError, Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>ReferenceError : Symbol(ReferenceError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var ReferenceError: {
->ReferenceError : Symbol(ReferenceError, Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
+>ReferenceError : Symbol(ReferenceError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))

     new (message?: string): ReferenceError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 901, 9))
->ReferenceError : Symbol(ReferenceError, Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
+>ReferenceError : Symbol(ReferenceError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))

     (message?: string): ReferenceError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 902, 5))
->ReferenceError : Symbol(ReferenceError, Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
+>ReferenceError : Symbol(ReferenceError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))

     prototype: ReferenceError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 902, 39))
->ReferenceError : Symbol(ReferenceError, Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
+>ReferenceError : Symbol(ReferenceError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 896, 1), Decl(1.0lib-noErrors.ts, 900, 11))
 }

 interface SyntaxError extends Error {
->SyntaxError : Symbol(SyntaxError, Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>SyntaxError : Symbol(SyntaxError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var SyntaxError: {
->SyntaxError : Symbol(SyntaxError, Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
+>SyntaxError : Symbol(SyntaxError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))

     new (message?: string): SyntaxError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 909, 9))
->SyntaxError : Symbol(SyntaxError, Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
+>SyntaxError : Symbol(SyntaxError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))

     (message?: string): SyntaxError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 910, 5))
->SyntaxError : Symbol(SyntaxError, Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
+>SyntaxError : Symbol(SyntaxError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))

     prototype: SyntaxError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 910, 36))
->SyntaxError : Symbol(SyntaxError, Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
+>SyntaxError : Symbol(SyntaxError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 904, 1), Decl(1.0lib-noErrors.ts, 908, 11))
 }

 interface TypeError extends Error {
->TypeError : Symbol(TypeError, Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var TypeError: {
->TypeError : Symbol(TypeError, Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
+>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))

     new (message?: string): TypeError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 917, 9))
->TypeError : Symbol(TypeError, Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
+>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))

     (message?: string): TypeError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 918, 5))
->TypeError : Symbol(TypeError, Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
+>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))

     prototype: TypeError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 918, 34))
->TypeError : Symbol(TypeError, Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
+>TypeError : Symbol(TypeError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 912, 1), Decl(1.0lib-noErrors.ts, 916, 11))
 }

 interface URIError extends Error {
->URIError : Symbol(URIError, Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
->Error : Symbol(Error, Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
+>URIError : Symbol(URIError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
+>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 870, 1), Decl(1.0lib-noErrors.ts, 876, 11))
 }
 declare var URIError: {
->URIError : Symbol(URIError, Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
+>URIError : Symbol(URIError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))

     new (message?: string): URIError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 925, 9))
->URIError : Symbol(URIError, Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
+>URIError : Symbol(URIError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))

     (message?: string): URIError;
 >message : Symbol(message, Decl(1.0lib-noErrors.ts, 926, 5))
->URIError : Symbol(URIError, Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
+>URIError : Symbol(URIError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))

     prototype: URIError;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 926, 33))
->URIError : Symbol(URIError, Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
+>URIError : Symbol(URIError, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 920, 1), Decl(1.0lib-noErrors.ts, 924, 11))
 }

 interface JSON {
->JSON : Symbol(JSON, Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))
+>JSON : Symbol(JSON, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))

     /**
       * Converts a JavaScript Object Notation (JSON) string into an object.
@@= skipped -154, +154 lines =@@
       * If a member contains nested objects, the nested objects are transformed before the parent object is. 
       */
     parse(text: string, reviver?: (key: any, value: any) => any): any;
->parse : Symbol(JSON.parse, Decl(1.0lib-noErrors.ts, 930, 16))
+>parse : Symbol(JSON.parse, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 930, 16))
 >text : Symbol(text, Decl(1.0lib-noErrors.ts, 937, 10))
 >reviver : Symbol(reviver, Decl(1.0lib-noErrors.ts, 937, 23))
 >key : Symbol(key, Decl(1.0lib-noErrors.ts, 937, 35))
@@= skipped -11, +11 lines =@@
       * @param value A JavaScript value, usually an object or array, to be converted.
       */
     stringify(value: any): string;
->stringify : Symbol(JSON.stringify, Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78), Decl(1.0lib-noErrors.ts, 954, 51), Decl(1.0lib-noErrors.ts, 961, 90))
+>stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78) ... and 2 more)
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 942, 14))

     /**
@@= skipped -9, +9 lines =@@
       * @param replacer A function that transforms the results.
       */
     stringify(value: any, replacer: (key: string, value: any) => any): string;
->stringify : Symbol(JSON.stringify, Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78), Decl(1.0lib-noErrors.ts, 954, 51), Decl(1.0lib-noErrors.ts, 961, 90))
+>stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78) ... and 2 more)
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 948, 14))
 >replacer : Symbol(replacer, Decl(1.0lib-noErrors.ts, 948, 25))
 >key : Symbol(key, Decl(1.0lib-noErrors.ts, 948, 37))
@@= skipped -12, +12 lines =@@
       * @param replacer Array that transforms the results.
       */
     stringify(value: any, replacer: any[]): string;
->stringify : Symbol(JSON.stringify, Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78), Decl(1.0lib-noErrors.ts, 954, 51), Decl(1.0lib-noErrors.ts, 961, 90))
+>stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78) ... and 2 more)
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 954, 14))
 >replacer : Symbol(replacer, Decl(1.0lib-noErrors.ts, 954, 25))

@@= skipped -11, +11 lines =@@
       * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
       */
     stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;
->stringify : Symbol(JSON.stringify, Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78), Decl(1.0lib-noErrors.ts, 954, 51), Decl(1.0lib-noErrors.ts, 961, 90))
+>stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78) ... and 2 more)
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 961, 14))
 >replacer : Symbol(replacer, Decl(1.0lib-noErrors.ts, 961, 25))
 >key : Symbol(key, Decl(1.0lib-noErrors.ts, 961, 37))
@@= skipped -14, +14 lines =@@
       * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
       */
     stringify(value: any, replacer: any[], space: any): string;
->stringify : Symbol(JSON.stringify, Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78), Decl(1.0lib-noErrors.ts, 954, 51), Decl(1.0lib-noErrors.ts, 961, 90))
+>stringify : Symbol(JSON.stringify, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 937, 70), Decl(1.0lib-noErrors.ts, 942, 34), Decl(1.0lib-noErrors.ts, 948, 78) ... and 2 more)
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 968, 14))
 >replacer : Symbol(replacer, Decl(1.0lib-noErrors.ts, 968, 25))
 >space : Symbol(space, Decl(1.0lib-noErrors.ts, 968, 42))
@@= skipped -9, +9 lines =@@
   * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
   */
 declare var JSON: JSON;
->JSON : Symbol(JSON, Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))
->JSON : Symbol(JSON, Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))
+>JSON : Symbol(JSON, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))
+>JSON : Symbol(JSON, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 928, 1), Decl(1.0lib-noErrors.ts, 973, 11))


 /////////////////////////////
@@= skipped -9, +9 lines =@@
 /////////////////////////////

 interface Array<T> {
->Array : Symbol(Array, Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Returns a string representation of an array.
       */
     toString(): string;
->toString : Symbol(Array.toString, Decl(1.0lib-noErrors.ts, 980, 20))
+>toString : Symbol(Array.toString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 20))

     toLocaleString(): string;
->toLocaleString : Symbol(Array.toLocaleString, Decl(1.0lib-noErrors.ts, 984, 23))
+>toLocaleString : Symbol(Array.toLocaleString, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 984, 23))

     /**
       * Combines two or more arrays.
       * @param items Additional items to add to the end of array1.
       */
     concat<U extends T[]>(...items: U[]): T[];
->concat : Symbol(Array.concat, Decl(1.0lib-noErrors.ts, 985, 29), Decl(1.0lib-noErrors.ts, 990, 46))
+>concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 985, 29), Decl(1.0lib-noErrors.ts, 990, 46))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 990, 11))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >items : Symbol(items, Decl(1.0lib-noErrors.ts, 990, 26))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 990, 11))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Combines two or more arrays.
       * @param items Additional items to add to the end of array1.
       */
     concat(...items: T[]): T[];
->concat : Symbol(Array.concat, Decl(1.0lib-noErrors.ts, 985, 29), Decl(1.0lib-noErrors.ts, 990, 46))
+>concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 985, 29), Decl(1.0lib-noErrors.ts, 990, 46))
 >items : Symbol(items, Decl(1.0lib-noErrors.ts, 995, 11))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Adds all the elements of an array separated by the specified separator string.
       * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
       */
     join(separator?: string): string;
->join : Symbol(Array.join, Decl(1.0lib-noErrors.ts, 995, 31))
+>join : Symbol(Array.join, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 995, 31))
 >separator : Symbol(separator, Decl(1.0lib-noErrors.ts, 1000, 9))

     /**
       * Removes the last element from an array and returns it.
       */
     pop(): T;
->pop : Symbol(Array.pop, Decl(1.0lib-noErrors.ts, 1000, 37))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>pop : Symbol(Array.pop, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1000, 37))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Appends new elements to an array, and returns the new length of the array.
       * @param items New elements of the Array.
       */
     push(...items: T[]): number;
->push : Symbol(Array.push, Decl(1.0lib-noErrors.ts, 1004, 13))
+>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1004, 13))
 >items : Symbol(items, Decl(1.0lib-noErrors.ts, 1009, 9))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Reverses the elements in an Array. 
       */
     reverse(): T[];
->reverse : Symbol(Array.reverse, Decl(1.0lib-noErrors.ts, 1009, 32))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>reverse : Symbol(Array.reverse, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1009, 32))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Removes the first element from an array and returns it.
       */
     shift(): T;
->shift : Symbol(Array.shift, Decl(1.0lib-noErrors.ts, 1013, 19))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>shift : Symbol(Array.shift, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1013, 19))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /** 
       * Returns a section of an array.
@@= skipped -78, +78 lines =@@
       * @param end The end of the specified portion of the array.
       */
     slice(start?: number, end?: number): T[];
->slice : Symbol(Array.slice, Decl(1.0lib-noErrors.ts, 1017, 15))
+>slice : Symbol(Array.slice, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1017, 15))
 >start : Symbol(start, Decl(1.0lib-noErrors.ts, 1023, 10))
 >end : Symbol(end, Decl(1.0lib-noErrors.ts, 1023, 25))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Sorts an array.
       * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.
       */
     sort(compareFn?: (a: T, b: T) => number): T[];
->sort : Symbol(Array.sort, Decl(1.0lib-noErrors.ts, 1023, 45))
+>sort : Symbol(Array.sort, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1023, 45))
 >compareFn : Symbol(compareFn, Decl(1.0lib-noErrors.ts, 1029, 9))
 >a : Symbol(a, Decl(1.0lib-noErrors.ts, 1029, 22))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >b : Symbol(b, Decl(1.0lib-noErrors.ts, 1029, 27))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
       * @param start The zero-based location in the array from which to start removing elements.
       */
     splice(start: number): T[];
->splice : Symbol(Array.splice, Decl(1.0lib-noErrors.ts, 1029, 50), Decl(1.0lib-noErrors.ts, 1035, 31))
+>splice : Symbol(Array.splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1029, 50), Decl(1.0lib-noErrors.ts, 1035, 31))
 >start : Symbol(start, Decl(1.0lib-noErrors.ts, 1035, 11))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
@@= skipped -34, +34 lines =@@
       * @param items Elements to insert into the array in place of the deleted elements.
       */
     splice(start: number, deleteCount: number, ...items: T[]): T[];
->splice : Symbol(Array.splice, Decl(1.0lib-noErrors.ts, 1029, 50), Decl(1.0lib-noErrors.ts, 1035, 31))
+>splice : Symbol(Array.splice, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1029, 50), Decl(1.0lib-noErrors.ts, 1035, 31))
 >start : Symbol(start, Decl(1.0lib-noErrors.ts, 1043, 11))
 >deleteCount : Symbol(deleteCount, Decl(1.0lib-noErrors.ts, 1043, 25))
 >items : Symbol(items, Decl(1.0lib-noErrors.ts, 1043, 46))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Inserts new elements at the start of an array.
       * @param items  Elements to insert at the start of the Array.
       */
     unshift(...items: T[]): number;
->unshift : Symbol(Array.unshift, Decl(1.0lib-noErrors.ts, 1043, 67))
+>unshift : Symbol(Array.unshift, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1043, 67))
 >items : Symbol(items, Decl(1.0lib-noErrors.ts, 1049, 12))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Returns the index of the first occurrence of a value in an array.
@@= skipped -22, +22 lines =@@
       * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
       */
     indexOf(searchElement: T, fromIndex?: number): number;
->indexOf : Symbol(Array.indexOf, Decl(1.0lib-noErrors.ts, 1049, 35))
+>indexOf : Symbol(Array.indexOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1049, 35))
 >searchElement : Symbol(searchElement, Decl(1.0lib-noErrors.ts, 1056, 12))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >fromIndex : Symbol(fromIndex, Decl(1.0lib-noErrors.ts, 1056, 29))

     /**
@@= skipped -11, +11 lines =@@
       * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
       */
     lastIndexOf(searchElement: T, fromIndex?: number): number;
->lastIndexOf : Symbol(Array.lastIndexOf, Decl(1.0lib-noErrors.ts, 1056, 58))
+>lastIndexOf : Symbol(Array.lastIndexOf, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1056, 58))
 >searchElement : Symbol(searchElement, Decl(1.0lib-noErrors.ts, 1063, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >fromIndex : Symbol(fromIndex, Decl(1.0lib-noErrors.ts, 1063, 33))

     /**
@@= skipped -11, +11 lines =@@
       * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
       */
     every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
->every : Symbol(Array.every, Decl(1.0lib-noErrors.ts, 1063, 62))
+>every : Symbol(Array.every, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1063, 62))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1070, 10))
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 1070, 23))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 1070, 32))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1070, 47))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 1070, 71))

     /**
@@= skipped -15, +15 lines =@@
       * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
       */
     some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
->some : Symbol(Array.some, Decl(1.0lib-noErrors.ts, 1070, 96))
+>some : Symbol(Array.some, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1070, 96))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1077, 9))
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 1077, 22))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 1077, 31))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1077, 46))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 1077, 70))

     /**
@@= skipped -15, +15 lines =@@
       * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
       */
     forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
->forEach : Symbol(Array.forEach, Decl(1.0lib-noErrors.ts, 1077, 95))
+>forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1077, 95))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1084, 12))
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 1084, 25))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 1084, 34))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1084, 49))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 1084, 70))

     /**
@@= skipped -15, +15 lines =@@
       * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
       */
     map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
->map : Symbol(Array.map, Decl(1.0lib-noErrors.ts, 1084, 92))
+>map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1084, 92))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1091, 8))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1091, 11))
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 1091, 24))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 1091, 33))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1091, 48))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1091, 8))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 1091, 66))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1091, 8))
@@= skipped -18, +18 lines =@@
       * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
       */
     filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];
->filter : Symbol(Array.filter, Decl(1.0lib-noErrors.ts, 1091, 87))
+>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1091, 87))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1098, 11))
 >value : Symbol(value, Decl(1.0lib-noErrors.ts, 1098, 24))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >index : Symbol(index, Decl(1.0lib-noErrors.ts, 1098, 33))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1098, 48))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >thisArg : Symbol(thisArg, Decl(1.0lib-noErrors.ts, 1098, 72))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
@@= skipped -16, +16 lines =@@
       * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
       */
     reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;
->reduce : Symbol(Array.reduce, Decl(1.0lib-noErrors.ts, 1098, 93), Decl(1.0lib-noErrors.ts, 1105, 120))
+>reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1098, 93), Decl(1.0lib-noErrors.ts, 1105, 120))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1105, 11))
 >previousValue : Symbol(previousValue, Decl(1.0lib-noErrors.ts, 1105, 24))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentValue : Symbol(currentValue, Decl(1.0lib-noErrors.ts, 1105, 41))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentIndex : Symbol(currentIndex, Decl(1.0lib-noErrors.ts, 1105, 58))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1105, 80))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >initialValue : Symbol(initialValue, Decl(1.0lib-noErrors.ts, 1105, 98))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /**
       * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
@@= skipped -20, +20 lines =@@
       * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
       */
     reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
->reduce : Symbol(Array.reduce, Decl(1.0lib-noErrors.ts, 1098, 93), Decl(1.0lib-noErrors.ts, 1105, 120))
+>reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1098, 93), Decl(1.0lib-noErrors.ts, 1105, 120))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1111, 11))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1111, 14))
 >previousValue : Symbol(previousValue, Decl(1.0lib-noErrors.ts, 1111, 27))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1111, 11))
 >currentValue : Symbol(currentValue, Decl(1.0lib-noErrors.ts, 1111, 44))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentIndex : Symbol(currentIndex, Decl(1.0lib-noErrors.ts, 1111, 61))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1111, 83))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1111, 11))
 >initialValue : Symbol(initialValue, Decl(1.0lib-noErrors.ts, 1111, 101))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1111, 11))
@@= skipped -21, +21 lines =@@
       * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
       */
     reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;
->reduceRight : Symbol(Array.reduceRight, Decl(1.0lib-noErrors.ts, 1111, 122), Decl(1.0lib-noErrors.ts, 1118, 125))
+>reduceRight : Symbol(Array.reduceRight, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1111, 122), Decl(1.0lib-noErrors.ts, 1118, 125))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1118, 16))
 >previousValue : Symbol(previousValue, Decl(1.0lib-noErrors.ts, 1118, 29))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentValue : Symbol(currentValue, Decl(1.0lib-noErrors.ts, 1118, 46))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentIndex : Symbol(currentIndex, Decl(1.0lib-noErrors.ts, 1118, 63))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1118, 85))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >initialValue : Symbol(initialValue, Decl(1.0lib-noErrors.ts, 1118, 103))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))

     /** 
       * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
@@= skipped -20, +20 lines =@@
       * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
       */
     reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
->reduceRight : Symbol(Array.reduceRight, Decl(1.0lib-noErrors.ts, 1111, 122), Decl(1.0lib-noErrors.ts, 1118, 125))
+>reduceRight : Symbol(Array.reduceRight, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1111, 122), Decl(1.0lib-noErrors.ts, 1118, 125))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1124, 16))
 >callbackfn : Symbol(callbackfn, Decl(1.0lib-noErrors.ts, 1124, 19))
 >previousValue : Symbol(previousValue, Decl(1.0lib-noErrors.ts, 1124, 32))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1124, 16))
 >currentValue : Symbol(currentValue, Decl(1.0lib-noErrors.ts, 1124, 49))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >currentIndex : Symbol(currentIndex, Decl(1.0lib-noErrors.ts, 1124, 66))
 >array : Symbol(array, Decl(1.0lib-noErrors.ts, 1124, 88))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1124, 16))
 >initialValue : Symbol(initialValue, Decl(1.0lib-noErrors.ts, 1124, 106))
 >U : Symbol(U, Decl(1.0lib-noErrors.ts, 1124, 16))
@@= skipped -19, +19 lines =@@
       * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
       */
     length: number;
->length : Symbol(Array.length, Decl(1.0lib-noErrors.ts, 1124, 127))
+>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 1124, 127))

     [n: number]: T;
 >n : Symbol(n, Decl(1.0lib-noErrors.ts, 1131, 5))
->T : Symbol(T, Decl(1.0lib-noErrors.ts, 980, 16))
+>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 980, 16))
 }
 declare var Array: {
->Array : Symbol(Array, Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))

     new (arrayLength?: number): any[];
 >arrayLength : Symbol(arrayLength, Decl(1.0lib-noErrors.ts, 1134, 9))
@@= skipped -43, +43 lines =@@

     prototype: Array<any>;
 >prototype : Symbol(prototype, Decl(1.0lib-noErrors.ts, 1140, 31))
->Array : Symbol(Array, Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))
+>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(1.0lib-noErrors.ts, 973, 23), Decl(1.0lib-noErrors.ts, 1133, 11))
 }

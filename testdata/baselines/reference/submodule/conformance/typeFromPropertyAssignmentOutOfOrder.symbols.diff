--- old.typeFromPropertyAssignmentOutOfOrder.symbols
+++ new.typeFromPropertyAssignmentOutOfOrder.symbols
@@= skipped -1, +1 lines =@@

 === index.js ===
 First.Item = class I {}
->First.Item : Symbol(First.Item, Decl(index.js, 0, 0))
->First : Symbol(First, Decl(index.js, 0, 0), Decl(roots.js, 0, 3))
->Item : Symbol(First.Item, Decl(index.js, 0, 0))
+>First : Symbol(First, Decl(roots.js, 0, 3))
 >I : Symbol(I, Decl(index.js, 0, 12))

 Common.Object = class extends First.Item {}
->Common.Object : Symbol(Common.Object, Decl(index.js, 0, 23))
->Common : Symbol(Common, Decl(index.js, 0, 23), Decl(roots.js, 1, 3))
->Object : Symbol(Common.Object, Decl(index.js, 0, 23))
->First.Item : Symbol(First.Item, Decl(index.js, 0, 0))
->First : Symbol(First, Decl(index.js, 0, 0), Decl(roots.js, 0, 3))
->Item : Symbol(First.Item, Decl(index.js, 0, 0))
+>Common : Symbol(Common, Decl(roots.js, 1, 3))
+>First : Symbol(First, Decl(roots.js, 0, 3))

 Workspace.Object = class extends Common.Object {}
->Workspace.Object : Symbol(Workspace.Object, Decl(index.js, 1, 43))
->Workspace : Symbol(Workspace, Decl(index.js, 1, 43), Decl(roots.js, 2, 3))
->Object : Symbol(Workspace.Object, Decl(index.js, 1, 43))
->Common.Object : Symbol(Common.Object, Decl(index.js, 0, 23))
->Common : Symbol(Common, Decl(index.js, 0, 23), Decl(roots.js, 1, 3))
->Object : Symbol(Common.Object, Decl(index.js, 0, 23))
+>Workspace : Symbol(Workspace, Decl(roots.js, 2, 3))
+>Common : Symbol(Common, Decl(roots.js, 1, 3))

 /** @type {Workspace.Object} */
 var am;
@@= skipped -27, +17 lines =@@

 === roots.js ===
 var First = {};
->First : Symbol(First, Decl(index.js, 0, 0), Decl(roots.js, 0, 3))
+>First : Symbol(First, Decl(roots.js, 0, 3))

 var Common = {};
->Common : Symbol(Common, Decl(index.js, 0, 23), Decl(roots.js, 1, 3))
+>Common : Symbol(Common, Decl(roots.js, 1, 3))

 var Workspace = {};
->Workspace : Symbol(Workspace, Decl(index.js, 1, 43), Decl(roots.js, 2, 3))
+>Workspace : Symbol(Workspace, Decl(roots.js, 2, 3))

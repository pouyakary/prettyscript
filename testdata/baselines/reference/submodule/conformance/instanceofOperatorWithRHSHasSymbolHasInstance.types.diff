--- old.instanceofOperatorWithRHSHasSymbolHasInstance.types
+++ new.instanceofOperatorWithRHSHasSymbolHasInstance.types
@@= skipped -41, +41 lines =@@
 >value : any

 declare var rhs3: { [Symbol.hasInstance](value: Point | Line): value is Point; };
->rhs3 : { [Symbol.hasInstance](value: Point | Line): value is Point; }
->[Symbol.hasInstance] : (value: Point | Line) => value is Point
+>rhs3 : { [Symbol.hasInstance](value: Line | Point): value is Point; }
+>[Symbol.hasInstance] : (value: Line | Point) => value is Point
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
 >value : Line | Point

 declare var rhs4: { [Symbol.hasInstance](value: Point | Line): value is Line; };
->rhs4 : { [Symbol.hasInstance](value: Point | Line): value is Line; }
->[Symbol.hasInstance] : (value: Point | Line) => value is Line
+>rhs4 : { [Symbol.hasInstance](value: Line | Point): value is Line; }
+>[Symbol.hasInstance] : (value: Line | Point) => value is Line
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
 >value : Line | Point

 declare var rhs5: { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; };
->rhs5 : { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
->[Symbol.hasInstance] : (value: Point | Point3D | Line) => value is Point3D
+>rhs5 : { [Symbol.hasInstance](value: Line | Point | Point3D): value is Point3D; }
+>[Symbol.hasInstance] : (value: Line | Point | Point3D) => value is Point3D
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
 >value : Line | Point | Point3D

 declare var rhs6: { [Symbol.hasInstance](value: Point3D | Line): value is Point3D; };
->rhs6 : { [Symbol.hasInstance](value: Point3D | Line): value is Point3D; }
->[Symbol.hasInstance] : (value: Point3D | Line) => value is Point3D
+>rhs6 : { [Symbol.hasInstance](value: Line | Point3D): value is Point3D; }
+>[Symbol.hasInstance] : (value: Line | Point3D) => value is Point3D
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
@@= skipped -57, +57 lines =@@

 declare class Rhs10 { static [Symbol.hasInstance](value: Point | Line): value is Point; }
 >Rhs10 : Rhs10
->[Symbol.hasInstance] : (value: Point | Line) => value is Point
+>[Symbol.hasInstance] : (value: Line | Point) => value is Point
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
@@= skipped -8, +8 lines =@@

 declare class Rhs11 { static [Symbol.hasInstance](value: Point | Line): value is Line; }
 >Rhs11 : Rhs11
->[Symbol.hasInstance] : (value: Point | Line) => value is Line
+>[Symbol.hasInstance] : (value: Line | Point) => value is Line
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
@@= skipped -8, +8 lines =@@

 declare class Rhs12 { static [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
 >Rhs12 : Rhs12
->[Symbol.hasInstance] : (value: Point | Point3D | Line) => value is Point3D
+>[Symbol.hasInstance] : (value: Line | Point | Point3D) => value is Point3D
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
@@= skipped -8, +8 lines =@@

 declare class Rhs13 { static [Symbol.hasInstance](value: Point3D | Line): value is Point3D; }
 >Rhs13 : Rhs13
->[Symbol.hasInstance] : (value: Point3D | Line) => value is Point3D
+>[Symbol.hasInstance] : (value: Line | Point3D) => value is Point3D
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
@@= skipped -46, +46 lines =@@
 >lhs0 instanceof rhs3 && lhs0 : Point
 >lhs0 instanceof rhs3 : boolean
 >lhs0 : any
->rhs3 : { [Symbol.hasInstance](value: Point | Line): value is Point; }
+>rhs3 : { [Symbol.hasInstance](value: Line | Point): value is Point; }
 >lhs0 : Point

 lhs0 instanceof rhs4 && lhs0;
 >lhs0 instanceof rhs4 && lhs0 : Line
 >lhs0 instanceof rhs4 : boolean
 >lhs0 : any
->rhs4 : { [Symbol.hasInstance](value: Point | Line): value is Line; }
+>rhs4 : { [Symbol.hasInstance](value: Line | Point): value is Line; }
 >lhs0 : Line

 lhs0 instanceof rhs5 && lhs0;
 >lhs0 instanceof rhs5 && lhs0 : Point3D
 >lhs0 instanceof rhs5 : boolean
 >lhs0 : any
->rhs5 : { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
+>rhs5 : { [Symbol.hasInstance](value: Line | Point | Point3D): value is Point3D; }
 >lhs0 : Point3D

 lhs0 instanceof rhs6 && lhs0;
 >lhs0 instanceof rhs6 && lhs0 : Point3D
 >lhs0 instanceof rhs6 : boolean
 >lhs0 : any
->rhs6 : { [Symbol.hasInstance](value: Point3D | Line): value is Point3D; }
+>rhs6 : { [Symbol.hasInstance](value: Line | Point3D): value is Point3D; }
 >lhs0 : Point3D

 lhs0 instanceof Rhs7 && lhs0;
@@= skipped -140, +140 lines =@@
 >lhs2 instanceof rhs3 && lhs2 : Point
 >lhs2 instanceof rhs3 : boolean
 >lhs2 : Line | Point | Point3D
->rhs3 : { [Symbol.hasInstance](value: Point | Line): value is Point; }
+>rhs3 : { [Symbol.hasInstance](value: Line | Point): value is Point; }
 >lhs2 : Point

 lhs2 instanceof rhs4 && lhs2;
 >lhs2 instanceof rhs4 && lhs2 : Line
 >lhs2 instanceof rhs4 : boolean
 >lhs2 : Line | Point | Point3D
->rhs4 : { [Symbol.hasInstance](value: Point | Line): value is Line; }
+>rhs4 : { [Symbol.hasInstance](value: Line | Point): value is Line; }
 >lhs2 : Line

 lhs2 instanceof rhs5 && lhs2;
 >lhs2 instanceof rhs5 && lhs2 : Point3D
 >lhs2 instanceof rhs5 : boolean
 >lhs2 : Line | Point | Point3D
->rhs5 : { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
+>rhs5 : { [Symbol.hasInstance](value: Line | Point | Point3D): value is Point3D; }
 >lhs2 : Point3D

 lhs2 instanceof Rhs7 && lhs2;
@@= skipped -84, +84 lines =@@
 >lhs3 instanceof rhs3 && lhs3 : (Line | Point3D) & Point
 >lhs3 instanceof rhs3 : boolean
 >lhs3 : Line | Point3D
->rhs3 : { [Symbol.hasInstance](value: Point | Line): value is Point; }
+>rhs3 : { [Symbol.hasInstance](value: Line | Point): value is Point; }
 >lhs3 : (Line | Point3D) & Point

 lhs3 instanceof rhs4 && lhs3;
 >lhs3 instanceof rhs4 && lhs3 : Line
 >lhs3 instanceof rhs4 : boolean
 >lhs3 : Line | Point3D
->rhs4 : { [Symbol.hasInstance](value: Point | Line): value is Line; }
+>rhs4 : { [Symbol.hasInstance](value: Line | Point): value is Line; }
 >lhs3 : Line

 lhs3 instanceof rhs5 && lhs3;
 >lhs3 instanceof rhs5 && lhs3 : Point3D
 >lhs3 instanceof rhs5 : boolean
 >lhs3 : Line | Point3D
->rhs5 : { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
+>rhs5 : { [Symbol.hasInstance](value: Line | Point | Point3D): value is Point3D; }
 >lhs3 : Point3D

 lhs3 instanceof rhs6 && lhs3;
 >lhs3 instanceof rhs6 && lhs3 : Point3D
 >lhs3 instanceof rhs6 : boolean
 >lhs3 : Line | Point3D
->rhs6 : { [Symbol.hasInstance](value: Point3D | Line): value is Point3D; }
+>rhs6 : { [Symbol.hasInstance](value: Line | Point3D): value is Point3D; }
 >lhs3 : Point3D

 lhs3 instanceof Rhs7 && lhs3;
@@= skipped -98, +98 lines =@@
 >lhs4 instanceof rhs3 && lhs4 : Point | Point3D2
 >lhs4 instanceof rhs3 : boolean
 >lhs4 : Line | Point | Point3D2
->rhs3 : { [Symbol.hasInstance](value: Point | Line): value is Point; }
+>rhs3 : { [Symbol.hasInstance](value: Line | Point): value is Point; }
 >lhs4 : Point | Point3D2

 lhs4 instanceof rhs4 && lhs4;
 >lhs4 instanceof rhs4 && lhs4 : Line
 >lhs4 instanceof rhs4 : boolean
 >lhs4 : Line | Point | Point3D2
->rhs4 : { [Symbol.hasInstance](value: Point | Line): value is Line; }
+>rhs4 : { [Symbol.hasInstance](value: Line | Point): value is Line; }
 >lhs4 : Line

 lhs4 instanceof rhs5 && lhs4;
 >lhs4 instanceof rhs5 && lhs4 : Point3D
 >lhs4 instanceof rhs5 : boolean
 >lhs4 : Line | Point | Point3D2
->rhs5 : { [Symbol.hasInstance](value: Point | Point3D | Line): value is Point3D; }
+>rhs5 : { [Symbol.hasInstance](value: Line | Point | Point3D): value is Point3D; }
 >lhs4 : Point3D

 lhs4 instanceof Rhs7 && lhs4;
@@= skipped -68, +68 lines =@@
     // approximation of `getInstanceType` behavior, with one caveat: the checker versions unions the return types of
     // all construct signatures, but we have no way of extracting individual construct signatures from a type.
     static [Symbol.hasInstance]<T>(this: T, value: unknown): value is (
->[Symbol.hasInstance] : <T>(this: T, value: unknown) => value is (T extends globalThis.Function ? T extends { readonly prototype: infer U; } ? boolean extends (U extends never ? true : false) ? T extends (abstract new (...args: any) => infer V) ? V : {} : U : never : never)
+>[Symbol.hasInstance] : <T>(this: T, value: unknown) => value is T extends Function ? T extends { readonly prototype: infer U; } ? boolean extends (U extends never ? true : false) ? T extends abstract new (...args: any) => infer V ? V : {} : U : never : never
 >Symbol.hasInstance : unique symbol
 >Symbol : SymbolConstructor
 >hasInstance : unique symbol
--- old.isomorphicMappedTypeInference.types
+++ new.isomorphicMappedTypeInference.types
@@= skipped -367, +367 lines =@@
 }

 declare function validate<T>(obj: { [P in keyof T]?: T[P] }): T;
->validate : <T>(obj: { [P in keyof T]?: T[P]; }) => T
+>validate : <T>(obj: { [P in keyof T]?: T[P] | undefined; }) => T
 >obj : { [P in keyof T]?: T[P] | undefined; }

 declare function clone<T>(obj: { readonly [P in keyof T]: T[P] }): T;
@@= skipped -8, +8 lines =@@
 >obj : { readonly [P in keyof T]: T[P]; }

 declare function validateAndClone<T>(obj: { readonly [P in keyof T]?: T[P] }): T;
->validateAndClone : <T>(obj: { readonly [P in keyof T]?: T[P]; }) => T
+>validateAndClone : <T>(obj: { readonly [P in keyof T]?: T[P] | undefined; }) => T
 >obj : { readonly [P in keyof T]?: T[P] | undefined; }

 type Foo = {
@@= skipped -20, +20 lines =@@
     let x = validate(foo);  // { a: number, readonly b: string }
 >x : { a: number; readonly b: string; }
 >validate(foo) : { a: number; readonly b: string; }
->validate : <T>(obj: { [P in keyof T]?: T[P]; }) => T
+>validate : <T>(obj: { [P in keyof T]?: T[P] | undefined; }) => T
 >foo : Foo

     let y = clone(foo);  // { a?: number, b: string }
@@= skipped -12, +12 lines =@@
     let z = validateAndClone(foo);  // { a: number, b: string }
 >z : { a: number; b: string; }
 >validateAndClone(foo) : { a: number; b: string; }
->validateAndClone : <T>(obj: { readonly [P in keyof T]?: T[P]; }) => T
+>validateAndClone : <T>(obj: { readonly [P in keyof T]?: T[P] | undefined; }) => T
 >foo : Foo
 }

--- old.jsdocTemplateTag4.symbols
+++ new.jsdocTemplateTag4.symbols
@@= skipped -11, +11 lines =@@

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
->this._map : Symbol(Multimap._map, Decl(a.js, 6, 21))
->this : Symbol(Multimap, Decl(a.js, 0, 0))
->_map : Symbol(Multimap._map, Decl(a.js, 6, 21))
-
 };

 /**
@@= skipped -11, +7 lines =@@
  * @returns {V} the value ok
  */
 Multimap.prototype.get = function (key) {
->Multimap.prototype : Symbol(Multimap.get, Decl(a.js, 9, 2))
+>Multimap.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
 >Multimap : Symbol(Multimap, Decl(a.js, 0, 0))
 >prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
->get : Symbol(Multimap.get, Decl(a.js, 9, 2))
 >key : Symbol(key, Decl(a.js, 15, 35))

     return this._map[key + ''];
->this._map : Symbol(Multimap._map, Decl(a.js, 6, 21))
->this : Symbol(Multimap, Decl(a.js, 0, 0))
->_map : Symbol(Multimap._map, Decl(a.js, 6, 21))
 >key : Symbol(key, Decl(a.js, 15, 35))
 }

@@= skipped -24, +20 lines =@@

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
->this._map : Symbol(Multimap2._map, Decl(a.js, 25, 28))
->this : Symbol(Multimap2, Decl(a.js, 25, 15))
->_map : Symbol(Multimap2._map, Decl(a.js, 25, 28))
-
 };

 /**
@@= skipped -11, +7 lines =@@
  * @returns {V} the value ok
  */
 Multimap2.prototype.get = function (key) {
->Multimap2.prototype : Symbol(Multimap2.get, Decl(a.js, 28, 2))
+>Multimap2.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
 >Multimap2 : Symbol(Multimap2, Decl(a.js, 25, 3))
 >prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
->get : Symbol(Multimap2.get, Decl(a.js, 28, 2))
 >key : Symbol(key, Decl(a.js, 34, 36))

     return this._map[key + ''];
->this._map : Symbol(Multimap2._map, Decl(a.js, 25, 28))
->this : Symbol(Multimap2, Decl(a.js, 25, 15))
->_map : Symbol(Multimap2._map, Decl(a.js, 25, 28))
 >key : Symbol(key, Decl(a.js, 34, 36))
 }

 var Ns = {};
->Ns : Symbol(Ns, Decl(a.js, 38, 3), Decl(a.js, 38, 12))
+>Ns : Symbol(Ns, Decl(a.js, 38, 3))

 /**
  * Should work for expando-namespaced initialisers too
@@= skipped -23, +19 lines =@@
  * @template V
  */
 Ns.Multimap3 = function() {
->Ns.Multimap3 : Symbol(Ns.Multimap3, Decl(a.js, 38, 12))
->Ns : Symbol(Ns, Decl(a.js, 38, 3), Decl(a.js, 38, 12))
->Multimap3 : Symbol(Ns.Multimap3, Decl(a.js, 38, 12))
+>Ns.Multimap3 : Symbol(Multimap3, Decl(a.js, 38, 12))
+>Ns : Symbol(Ns, Decl(a.js, 38, 3))
+>Multimap3 : Symbol(Multimap3, Decl(a.js, 38, 12))

     /** @type {Object<string, V>} TODO: Remove the prototype from the fresh object */
     this._map = {};
->this._map : Symbol(Multimap3._map, Decl(a.js, 45, 27))
->this : Symbol(Multimap3, Decl(a.js, 45, 14))
->_map : Symbol(Multimap3._map, Decl(a.js, 45, 27))
+>this : Symbol(Ns, Decl(a.js, 38, 8))

 };

@@= skipped -17, +15 lines =@@
  * @returns {V} the value ok
  */
 Ns.Multimap3.prototype.get = function (key) {
->Ns.Multimap3.prototype : Symbol(Ns.Multimap3.get, Decl(a.js, 48, 2))
->Ns.Multimap3 : Symbol(Ns.Multimap3, Decl(a.js, 38, 12))
->Ns : Symbol(Ns, Decl(a.js, 38, 3), Decl(a.js, 38, 12))
->Multimap3 : Symbol(Ns.Multimap3, Decl(a.js, 38, 12))
+>Ns.Multimap3.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
+>Ns.Multimap3 : Symbol(Multimap3, Decl(a.js, 38, 12))
+>Ns : Symbol(Ns, Decl(a.js, 38, 3))
+>Multimap3 : Symbol(Multimap3, Decl(a.js, 38, 12))
 >prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
->get : Symbol(Ns.Multimap3.get, Decl(a.js, 48, 2))
 >key : Symbol(key, Decl(a.js, 54, 39))

     return this._map[key + ''];
->this._map : Symbol(Multimap3._map, Decl(a.js, 45, 27))
->this : Symbol(Multimap3, Decl(a.js, 45, 14))
->_map : Symbol(Multimap3._map, Decl(a.js, 45, 27))
 >key : Symbol(key, Decl(a.js, 54, 39))
 }

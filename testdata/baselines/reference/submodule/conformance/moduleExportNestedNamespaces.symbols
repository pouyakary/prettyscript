//// [tests/cases/conformance/salsa/moduleExportNestedNamespaces.ts] ////

=== mod.js ===
module.exports.n = {};
>module.exports.n : Symbol(n, Decl(mod.js, 0, 0))
>module.exports : Symbol("mod", Decl(mod.js, 0, 0))
>module : Symbol(module.exports)
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>n : Symbol(n, Decl(mod.js, 0, 0))

module.exports.n.K = function C() {
>module.exports.n : Symbol(n, Decl(mod.js, 0, 0))
>module.exports : Symbol("mod", Decl(mod.js, 0, 0))
>module : Symbol(module.exports)
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>n : Symbol(n, Decl(mod.js, 0, 0))
>C : Symbol(C, Decl(mod.js, 1, 20))

    this.x = 10;
}
module.exports.Classic = class {
>module.exports.Classic : Symbol(Classic, Decl(mod.js, 3, 1))
>module.exports : Symbol("mod", Decl(mod.js, 0, 0))
>module : Symbol(module.exports)
>exports : Symbol("mod", Decl(mod.js, 0, 0))
>Classic : Symbol(Classic, Decl(mod.js, 3, 1))

    constructor() {
        this.p = 1
>this.p : Symbol(Classic.p, Decl(mod.js, 5, 19))
>this : Symbol(Classic, Decl(mod.js, 4, 24))
>p : Symbol(Classic.p, Decl(mod.js, 5, 19))
    }
}

=== use.js ===
import * as s from './mod'
>s : Symbol(s, Decl(use.js, 0, 6))

var k = new s.n.K()
>k : Symbol(k, Decl(use.js, 2, 3))
>s.n : Symbol(s.n, Decl(mod.js, 0, 0))
>s : Symbol(s, Decl(use.js, 0, 6))
>n : Symbol(s.n, Decl(mod.js, 0, 0))

k.x
>k : Symbol(k, Decl(use.js, 2, 3))

var classic = new s.Classic()
>classic : Symbol(classic, Decl(use.js, 4, 3))
>s.Classic : Symbol(s.Classic, Decl(mod.js, 3, 1))
>s : Symbol(s, Decl(use.js, 0, 6))
>Classic : Symbol(s.Classic, Decl(mod.js, 3, 1))


/** @param {s.n.K} c
    @param {s.Classic} classic */
function f(c, classic) {
>f : Symbol(f, Decl(use.js, 4, 29))
>c : Symbol(c, Decl(use.js, 9, 11))
>classic : Symbol(classic, Decl(use.js, 9, 13))

    c.x
>c : Symbol(c, Decl(use.js, 9, 11))

    classic.p
>classic : Symbol(classic, Decl(use.js, 9, 13))
}


--- old.esDecorators-decoratorExpression.2(experimentaldecorators=true).js
+++ new.esDecorators-decoratorExpression.2(experimentaldecorators=true).js
@@= skipped -59, +59 lines =@@

 //// [esDecorators-decoratorExpression.2.js]
 {
-    let C = class C {
-    };
-    C = __decorate([
-        x
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        x.y
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        x.y
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        g()
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (g)
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (h())
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x().y)
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x().y())
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x ``)
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x.y ``)
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x?.y)
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x["y"])
-    ], C);
-}
-{
-    let C = class C {
-    };
-    C = __decorate([
-        (x?.["y"])
-    ], C);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        x
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        x.y
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        x.y
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        g()
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (g)
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (h())
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x().y)
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x().y())
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x ``)
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x.y ``)
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x?.y)
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x["y"])
-    ], C.prototype, "m", null);
-}
-{
-    class C {
-        m() { }
-    }
-    __decorate([
-        (x?.["y"])
-    ], C.prototype, "m", null);
+    @x
+    class C {
+    }
+}
+{
+    @x.y
+    class C {
+    }
+}
+{
+    @x.y
+    class C {
+    }
+}
+{
+    @g()
+    class C {
+    }
+}
+{
+    @(g)
+    class C {
+    }
+}
+{
+    @(h())
+    class C {
+    }
+}
+{
+    @(x().y)
+    class C {
+    }
+}
+{
+    @(x().y())
+    class C {
+    }
+}
+{
+    @(x ``)
+    class C {
+    }
+}
+{
+    @(x.y ``)
+    class C {
+    }
+}
+{
+    @(x?.y)
+    class C {
+    }
+}
+{
+    @(x["y"])
+    class C {
+    }
+}
+{
+    @(x?.["y"])
+    class C {
+    }
+}
+{
+    class C {
+        @x
+        m() { }
+    }
+}
+{
+    class C {
+        @x.y
+        m() { }
+    }
+}
+{
+    class C {
+        @x.y
+        m() { }
+    }
+}
+{
+    class C {
+        @g()
+        m() { }
+    }
+}
+{
+    class C {
+        @(g)
+        m() { }
+    }
+}
+{
+    class C {
+        @(h())
+        m() { }
+    }
+}
+{
+    class C {
+        @(x().y)
+        m() { }
+    }
+}
+{
+    class C {
+        @(x().y())
+        m() { }
+    }
+}
+{
+    class C {
+        @(x ``)
+        m() { }
+    }
+}
+{
+    class C {
+        @(x.y ``)
+        m() { }
+    }
+}
+{
+    class C {
+        @(x?.y)
+        m() { }
+    }
+}
+{
+    class C {
+        @(x["y"])
+        m() { }
+    }
+}
+{
+    class C {
+        @(x?.["y"])
+        m() { }
+    }
 }
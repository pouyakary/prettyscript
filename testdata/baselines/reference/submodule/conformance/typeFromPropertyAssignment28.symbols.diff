--- old.typeFromPropertyAssignment28.symbols
+++ new.typeFromPropertyAssignment28.symbols
@@= skipped -2, +2 lines =@@
 === a.js ===
 // mixed prototype-assignment+class declaration
 class C { constructor() { this.p = 1; } }
->C : Symbol(C, Decl(a.js, 0, 0), Decl(a.js, 1, 41))
+>C : Symbol(C, Decl(a.js, 0, 0))
 >this.p : Symbol(C.p, Decl(a.js, 1, 25))
->this : Symbol(C, Decl(a.js, 0, 0), Decl(a.js, 1, 41))
+>this : Symbol(C, Decl(a.js, 0, 0))
 >p : Symbol(C.p, Decl(a.js, 1, 25))

 // Property assignment does nothing.
@@= skipped -11, +11 lines =@@
 // (Object.defineProperty isn't recognised as a JS special assignment right now.)
 C.prototype = { q: 2 };
 >C.prototype : Symbol(C.prototype, Decl(a.js, 1, 41))
->C : Symbol(C, Decl(a.js, 0, 0), Decl(a.js, 1, 41))
+>C : Symbol(C, Decl(a.js, 0, 0))
 >prototype : Symbol(C.prototype, Decl(a.js, 1, 41))
 >q : Symbol(q, Decl(a.js, 6, 15))

 const c = new C()
 >c : Symbol(c, Decl(a.js, 8, 5))
->C : Symbol(C, Decl(a.js, 0, 0), Decl(a.js, 1, 41))
+>C : Symbol(C, Decl(a.js, 0, 0))

 c.p
 >c.p : Symbol(C.p, Decl(a.js, 1, 25))
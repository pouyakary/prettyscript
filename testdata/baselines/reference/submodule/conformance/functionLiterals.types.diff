--- old.functionLiterals.types
+++ new.functionLiterals.types
@@= skipped -3, +3 lines =@@
 // PropName<TypeParamList>(ParamList):ReturnType is equivalent to PropName: { <TypeParamList>(ParamList): ReturnType }

 var b: {
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }

     func1(x: number): number;         // Method signature
 >func1 : (x: number) => number
@@= skipped -19, +19 lines =@@
 b.func1 = b.func2;
 >b.func1 = b.func2 : (x: number) => number
 >b.func1 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func1 : (x: number) => number
 >b.func2 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func2 : (x: number) => number

 b.func1 = b.func3;
 >b.func1 = b.func3 : (x: number) => number
 >b.func1 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func1 : (x: number) => number
 >b.func3 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func3 : (x: number) => number

 b.func2 = b.func1;
 >b.func2 = b.func1 : (x: number) => number
 >b.func2 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func2 : (x: number) => number
 >b.func1 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func1 : (x: number) => number

 b.func2 = b.func3;
 >b.func2 = b.func3 : (x: number) => number
 >b.func2 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func2 : (x: number) => number
 >b.func3 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func3 : (x: number) => number

 b.func3 = b.func1;
 >b.func3 = b.func1 : (x: number) => number
 >b.func3 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func3 : (x: number) => number
 >b.func1 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func1 : (x: number) => number

 b.func3 = b.func2;
 >b.func3 = b.func2 : (x: number) => number
 >b.func3 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func3 : (x: number) => number
 >b.func2 : (x: number) => number
->b : { func1(x: number): number; func2: (x: number) => number; func3: { (x: number): number; }; }
+>b : { func1(x: number): number; func2: (x: number) => number; func3: (x: number) => number; }
 >func2 : (x: number) => number

 var c: {
@@= skipped -95, +95 lines =@@

 // generic versions
 var b2: {
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }

     func1<T>(x: T): number;         // Method signature
 >func1 : <T>(x: T) => number
@@= skipped -19, +19 lines =@@
 b2.func1 = b2.func2;
 >b2.func1 = b2.func2 : <T>(x: T) => number
 >b2.func1 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func1 : <T>(x: T) => number
 >b2.func2 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func2 : <T>(x: T) => number

 b2.func1 = b2.func3;
 >b2.func1 = b2.func3 : <T>(x: T) => number
 >b2.func1 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func1 : <T>(x: T) => number
 >b2.func3 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func3 : <T>(x: T) => number

 b2.func2 = b2.func1;
 >b2.func2 = b2.func1 : <T>(x: T) => number
 >b2.func2 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func2 : <T>(x: T) => number
 >b2.func1 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func1 : <T>(x: T) => number

 b2.func2 = b2.func3;
 >b2.func2 = b2.func3 : <T>(x: T) => number
 >b2.func2 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func2 : <T>(x: T) => number
 >b2.func3 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func3 : <T>(x: T) => number

 b2.func3 = b2.func1;
 >b2.func3 = b2.func1 : <T>(x: T) => number
 >b2.func3 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func3 : <T>(x: T) => number
 >b2.func1 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func1 : <T>(x: T) => number

 b2.func3 = b2.func2;
 >b2.func3 = b2.func2 : <T>(x: T) => number
 >b2.func3 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func3 : <T>(x: T) => number
 >b2.func2 : <T>(x: T) => number
->b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: { <T>(x: T): number; }; }
+>b2 : { func1<T>(x: T): number; func2: <T>(x: T) => number; func3: <T>(x: T) => number; }
 >func2 : <T>(x: T) => number

 var c2: {
 >c2 : { func4<T>(x: T): number; func4<T>(s: T): string; func5: { <T>(x: T): number; <T>(s: T): string; }; }

     func4<T>(x: T): number;
->func4 : { <T>(x: T): number; <T_1>(s: T_1): string; }
+>func4 : { <T>(x: T): number; <T>(s: T): string; }
 >x : T

     func4<T>(s: T): string;
->func4 : { <T_1>(x: T_1): number; <T>(s: T): string; }
+>func4 : { <T>(x: T): number; <T>(s: T): string; }
 >s : T

     func5: {
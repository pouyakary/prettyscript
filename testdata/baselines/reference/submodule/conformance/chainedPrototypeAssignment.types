//// [tests/cases/conformance/salsa/chainedPrototypeAssignment.ts] ////

=== use.js ===
/// <reference path='./types.d.ts'/>
var mod = require('./mod');
>mod : typeof mod
>require('./mod') : typeof mod
>require : (name: string) => any
>'./mod' : "./mod"

var a = new mod.A()
>a : any
>new mod.A() : any
>mod.A : { (): void; prototype: { m(n: number): number; }; }
>mod : typeof mod
>A : { (): void; prototype: { m(n: number): number; }; }

var b = new mod.B()
>b : any
>new mod.B() : any
>mod.B : { (): void; prototype: { m(n: number): number; }; }
>mod : typeof mod
>B : { (): void; prototype: { m(n: number): number; }; }

a.m('nope')
>a.m('nope') : any
>a.m : any
>a : any
>m : any
>'nope' : "nope"

b.m('not really')
>b.m('not really') : any
>b.m : any
>b : any
>m : any
>'not really' : "not really"

=== types.d.ts ===
declare function require(name: string): any;
>require : (name: string) => any
>name : string

declare var exports: any;
>exports : any

=== mod.js ===
/// <reference path='./types.d.ts'/>
var A = function A() {
>A : { (): void; prototype: { m(n: number): number; }; }
>function A() {    this.a = 1} : { (): void; prototype: { m(n: number): number; }; }
>A : { (): void; prototype: { m(n: number): number; }; }

    this.a = 1
>this.a = 1 : 1
>this.a : any
>this : any
>a : any
>1 : 1
}
var B = function B() {
>B : { (): void; prototype: { m(n: number): number; }; }
>function B() {    this.b = 2} : { (): void; prototype: { m(n: number): number; }; }
>B : { (): void; prototype: { m(n: number): number; }; }

    this.b = 2
>this.b = 2 : 2
>this.b : any
>this : any
>b : any
>2 : 2
}
exports.A = A
>exports.A = A : { (): void; prototype: { m(n: number): number; }; }
>exports.A : { (): void; prototype: { m(n: number): number; }; }
>exports : typeof import("mod")
>A : { (): void; prototype: { m(n: number): number; }; }
>A : { (): void; prototype: { m(n: number): number; }; }

exports.B = B
>exports.B = B : { (): void; prototype: { m(n: number): number; }; }
>exports.B : { (): void; prototype: { m(n: number): number; }; }
>exports : typeof import("mod")
>B : { (): void; prototype: { m(n: number): number; }; }
>B : { (): void; prototype: { m(n: number): number; }; }

A.prototype = B.prototype = {
>A.prototype = B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
>A.prototype : { m(n: number): number; }
>A : { (): void; prototype: { m(n: number): number; }; }
>prototype : { m(n: number): number; }
>B.prototype = {    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }
>B.prototype : { m(n: number): number; }
>B : { (): void; prototype: { m(n: number): number; }; }
>prototype : { m(n: number): number; }
>{    /** @param {number} n */    m(n) {        return n + 1    }} : { m(n: number): number; }

    /** @param {number} n */
    m(n) {
>m : (n: number) => number
>n : number

        return n + 1
>n + 1 : number
>n : number
>1 : 1
    }
}


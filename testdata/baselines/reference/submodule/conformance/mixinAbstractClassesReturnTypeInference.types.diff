--- old.mixinAbstractClassesReturnTypeInference.types
+++ new.mixinAbstractClassesReturnTypeInference.types
@@= skipped -13, +13 lines =@@
 }

 function Mixin2<TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) {
->Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2<any>.MixinClass; }) & TBase
+>Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2.MixinClass; }) & TBase
 >args : any[]
 >baseClass : TBase

@@= skipped -17, +17 lines =@@
 >staticMixinMethod : () => void
     }
     return MixinClass;
->MixinClass : ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2<any>.MixinClass; }) & TBase
+>MixinClass : ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2.MixinClass; }) & TBase
 }

 class DerivedFromAbstract2 extends Mixin2(AbstractBase) {
 >DerivedFromAbstract2 : DerivedFromAbstract2
->Mixin2(AbstractBase) : Mixin2<typeof AbstractBase>.MixinClass & AbstractBase
->Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2<any>.MixinClass; }) & TBase
+>Mixin2(AbstractBase) : Mixin2.MixinClass & AbstractBase
+>Mixin2 : <TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) => ((abstract new (...args: any[]) => MixinClass) & { staticMixinMethod(): void; prototype: Mixin2.MixinClass; }) & TBase
 >AbstractBase : typeof AbstractBase

     abstractBaseMethod() {}
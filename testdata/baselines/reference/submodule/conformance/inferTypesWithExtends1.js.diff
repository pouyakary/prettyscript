--- old.inferTypesWithExtends1.js
+++ new.inferTypesWithExtends1.js
@@= skipped -137, +137 lines =@@
 }

 //// [inferTypesWithExtends1.js]
-"use strict";
 function f1() {
     return x1;
 }
@@= skipped -129, +128 lines =@@
 type X11<T> = T extends ((infer U) extends number ? 1 : 0) ? 1 : 0;
 type X12<T> = T extends (infer U extends number) ? 1 : 0;
 type X13<T> = T extends infer U extends number ? 1 : 0;
-type X14<T> = T extends keyof infer U extends number ? 1 : 0;
+type X14<T> = T extends keyof (infer U extends number) ? 1 : 0;
 type X15<T> = T extends {
     [P in infer U extends keyof T ? 1 : 0]: 1;
 } ? 1 : 0;
@@= skipped -25, +25 lines =@@
 type X21_T3 = X21<1 | 2, 1>;
 type X21_T4 = X21<1 | 2, 2 | 3>;
 type X21_T5 = X21<1 | 2, 3>;
-type IfEquals<X, Y, A, B> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;
+type IfEquals<X, Y, A, B> = (<T>() => T extends X ? 1 : 2) extends <T>() => (T extends Y ? 1 : 2) ? A : B;
 declare const x1: <T>() => (T extends infer U extends number ? 1 : 0);
-declare function f1(): <T>() => (T extends infer U extends number ? 1 : 0);
+declare function f1(): <T>() => T extends infer U extends number ? 1 : 0;
 type ExpectNumber<T extends number> = T;
 declare const x2: <T>() => (T extends ExpectNumber<infer U> ? 1 : 0);
-declare function f2(): <T>() => (T extends ExpectNumber<infer U> ? 1 : 0);
+declare function f2(): <T>() => T extends infer U extends number ? 1 : 0;
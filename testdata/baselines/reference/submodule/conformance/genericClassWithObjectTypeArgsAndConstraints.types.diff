--- old.genericClassWithObjectTypeArgsAndConstraints.types
+++ new.genericClassWithObjectTypeArgsAndConstraints.types
@@= skipped -35, +35 lines =@@
 >x : string

         foo<T extends { x: string }>(t: X<T>, t2: X<T>) {
->foo : <T extends { x: string; }>(t: X<T>, t2: X<T>) => T
+>foo : <T_1 extends { x: string; }>(t: X<T_1>, t2: X<T_1>) => T_1
 >x : string
 >t : X<T>
 >t2 : X<T>
@@= skipped -50, +50 lines =@@
 >G2 : G2<T>

         foo2<T extends C>(t: X<T>, t2: X<T>) {
->foo2 : <T extends C>(t: X<T>, t2: X<T>) => T
+>foo2 : <T_1 extends C>(t: X<T_1>, t2: X<T_1>) => T_1
 >t : X<T>
 >t2 : X<T>

@@= skipped -40, +40 lines =@@
 >x : string

         foo<T extends { x: string }>(t: X<T>, t2: X<T>): T;
->foo : <T extends { x: string; }>(t: X<T>, t2: X<T>) => T
+>foo : <T_1 extends { x: string; }>(t: X<T_1>, t2: X<T_1>) => T_1
 >x : string
 >t : X<T>
 >t2 : X<T>
@@= skipped -41, +41 lines =@@

     interface G2<T extends C> {
         foo2<T extends C>(t: X<T>, t2: X<T>): T;
->foo2 : <T extends C>(t: X<T>, t2: X<T>) => T
+>foo2 : <T_1 extends C>(t: X<T_1>, t2: X<T_1>) => T_1
 >t : X<T>
 >t2 : X<T>
     }
--- old.parserRealSource6.js
+++ new.parserRealSource6.js
@@= skipped -229, +229 lines =@@
 var TypeScript;
 (function (TypeScript) {
     class TypeCollectionContext {
+        scopeChain;
+        checker;
+        script = null;
         constructor(scopeChain, checker) {
             this.scopeChain = scopeChain;
             this.checker = checker;
-            this.script = null;
         }
     }
     TypeScript.TypeCollectionContext = TypeCollectionContext;
     class MemberScopeContext {
+        flow;
+        pos;
+        matchFlag;
+        type = null;
+        ast = null;
+        scope;
+        options = new AstWalkOptions();
         constructor(flow, pos, matchFlag) {
             this.flow = flow;
             this.pos = pos;
             this.matchFlag = matchFlag;
-            this.type = null;
-            this.ast = null;
-            this.options = new AstWalkOptions();
         }
     }
     TypeScript.MemberScopeContext = MemberScopeContext;
     class EnclosingScopeContext {
+        logger;
+        script;
+        text;
+        pos;
+        isMemberCompletion;
+        scopeGetter = null;
+        objectLiteralScopeGetter = null;
+        scopeStartAST = null;
+        skipNextFuncDeclForClass = false;
+        deepestModuleDecl = null;
+        enclosingClassDecl = null;
+        enclosingObjectLit = null;
+        publicsOnly = true;
+        useFullAst = false;
+        scriptFragment;
         constructor(logger, script, text, pos, isMemberCompletion) {
             this.logger = logger;
             this.script = script;
             this.text = text;
             this.pos = pos;
             this.isMemberCompletion = isMemberCompletion;
-            this.scopeGetter = null;
-            this.objectLiteralScopeGetter = null;
-            this.scopeStartAST = null;
-            this.skipNextFuncDeclForClass = false;
-            this.deepestModuleDecl = null;
-            this.enclosingClassDecl = null;
-            this.enclosingObjectLit = null;
-            this.publicsOnly = true;
-            this.useFullAst = false;
         }
         getScope() {
             return this.scopeGetter();
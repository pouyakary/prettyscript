--- old.propertyAccess.types
+++ new.propertyAccess.types
@@= skipped -60, +60 lines =@@
 >noIndex : () => void

 var obj = {
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
->{    10: 'ten',    x: 'hello',    y: 32,    z: { n: 'world', m: 15, o: () => false },    'literal property': 100} : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
+>{    10: 'ten',    x: 'hello',    y: 32,    z: { n: 'world', m: 15, o: () => false },    'literal property': 100} : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }

     10: 'ten',
 >10 : string
@@= skipped -46, +46 lines =@@
 obj.y = 4;
 >obj.y = 4 : 4
 >obj.y : number
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >y : number
 >4 : 4

@@= skipped -16, +16 lines =@@
 >y : any
 >obj.x = anyVar.z : any
 >obj.x : string
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >x : string
 >anyVar.z : any
 >anyVar : any
@@= skipped -10, +10 lines =@@
 var aa = obj.x;
 >aa : string
 >obj.x : string
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >x : string

 // Dotted property access of property that exists on value's apparent type
 var bb = obj.hasOwnProperty;
 >bb : (v: PropertyKey) => boolean
 >obj.hasOwnProperty : (v: PropertyKey) => boolean
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >hasOwnProperty : (v: PropertyKey) => boolean

 // Dotted property access of property that doesn't exist on value's apparent type
 var cc = obj.qqq; // error
 >cc : any
 >obj.qqq : any
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >qqq : any

 // Bracket notation property access using string literal value on type with property of that literal name
 var dd = obj['literal property'];
 >dd : number
 >obj['literal property'] : number
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >'literal property' : "literal property"

 var dd: number;
@@= skipped -31, +31 lines =@@
 var ee = obj['wa wa wa wa wa'];
 >ee : any
 >obj['wa wa wa wa wa'] : any
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >'wa wa wa wa wa' : "wa wa wa wa wa"

 var ee: any;
@@= skipped -10, +10 lines =@@
 var ff = obj['10'];
 >ff : string
 >obj['10'] : string
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >'10' : "10"

 var ff: string;
@@= skipped -10, +10 lines =@@
 var gg = obj['1'];
 >gg : any
 >obj['1'] : any
->obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }
+>obj : { 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; "literal property": number; }
 >'1' : "1"

 var gg: any;
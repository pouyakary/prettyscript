--- old.dependentDestructuredVariables.types
+++ new.dependentDestructuredVariables.types
@@= skipped -23, +23 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -33, +33 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -30, +30 lines =@@

             payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string

             break;
         case 'B':
@@= skipped -34, +34 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -33, +33 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -43, +43 lines =@@

             payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
         }
         if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -37, +37 lines =@@

             payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
         }
         if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -39, +39 lines =@@

             payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
         }
         if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -34, +34 lines =@@

                 payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string

                 break;
             case 'B':
@@= skipped -96, +96 lines =@@

         data.toFixed();
 >data.toFixed() : string
->data.toFixed : (fractionDigits?: number) => string
+>data.toFixed : (fractionDigits?: number | undefined) => string
 >data : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -35, +35 lines =@@
 >t : T

 declare function printValueList<T>(t: Array<T>): void;
->printValueList : <T>(t: Array<T>) => void
+>printValueList : <T>(t: T[]) => void
 >t : T[]

 function unrefined1<T>(ab: AB<T>): void {
@@= skipped -25, +25 lines =@@
     else {
         printValueList<T>(value);
 >printValueList<T>(value) : void
->printValueList : <T_1>(t: Array<T_1>) => void
+>printValueList : <T_1>(t: T_1[]) => void
 >value : T[]
     }
 }
@@= skipped -94, +94 lines =@@

         data.toFixed();
 >data.toFixed() : string
->data.toFixed : (fractionDigits?: number) => string
+>data.toFixed : (fractionDigits?: number | undefined) => string
 >data : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -31, +31 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === 'B') {
 >kind === 'B' : boolean
@@= skipped -18, +18 lines =@@
 };

 const f52: (...args: ['A', number] | ['B']) => void = (kind, payload?) => {
->f52 : (...args: ["A", number] | ["B"]) => void
->args : ["A", number] | ["B"]
+>f52 : (...args: ["B"] | ["A", number]) => void
+>args : ["B"] | ["A", number]
 >(kind, payload?) => {    if (kind === 'A') {        payload.toFixed();    }    else {        payload;  // undefined    }} : (kind: "A" | "B", payload?: number | undefined) => void
 >kind : "A" | "B"
 >payload : number | undefined
@@= skipped -13, +13 lines =@@

         payload.toFixed();
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     else {
         payload;  // undefined
@@= skipped -127, +127 lines =@@
 >FooMethod : FooMethod

   method(...args:
->method : (...args: [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]) => void
->args : [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]
+>method : (...args: [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]) => void
+>args : [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]

     [type: "str", cb: (e: string) => void] |
 >e : string
@@= skipped -44, +44 lines =@@
 >FooAsyncMethod : FooAsyncMethod

   method(...args:
->method : (...args: [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]) => Promise<any>
->args : [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]
+>method : (...args: [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]) => Promise<any>
+>args : [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]

     [type: "str", cb: (e: string) => void] |
 >e : string
@@= skipped -44, +44 lines =@@
 >FooGenMethod : FooGenMethod

   method(...args:
->method : (...args: [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]) => Generator<any, any, any>
->args : [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]
+>method : (...args: [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]) => Generator<any, any, any>
+>args : [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]

     [type: "str", cb: (e: string) => void] |
 >e : string
@@= skipped -44, +44 lines =@@
 >FooAsyncGenMethod : FooAsyncGenMethod

   method(...args:
->method : (...args: [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]) => AsyncGenerator<any, any, any>
->args : [type: "str", cb: (e: string) => void] | [type: "num", cb: (e: number) => void]
+>method : (...args: [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]) => AsyncGenerator<any, any, any>
+>args : [type: "num", cb: (e: number) => void] | [type: "str", cb: (e: string) => void]

     [type: "str", cb: (e: string) => void] |
 >e : string
@@= skipped -59, +59 lines =@@

         payload.toFixed();  // error
 >payload.toFixed() : string
->payload.toFixed : (fractionDigits?: number) => string
+>payload.toFixed : (fractionDigits?: number | undefined) => string
 >payload : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
     }
     if (kind === "b") {
 >kind === "b" : boolean
@@= skipped -84, +84 lines =@@
 // Repro from #49772

 function fa1(x: [true, number] | [false, string]) {
->fa1 : (x: [true, number] | [false, string]) => void
+>fa1 : (x: [false, string] | [true, number]) => void
 >x : [false, string] | [true, number]
 >true : true
 >false : false
@@= skipped -66, +66 lines =@@
 }

 const fa3: (...args: [true, number] | [false, string]) => void = (guard, value) => {
->fa3 : (...args: [true, number] | [false, string]) => void
+>fa3 : (...args: [false, string] | [true, number]) => void
 >args : [false, string] | [true, number]
 >true : true
 >false : false
@@= skipped -104, +104 lines =@@
 // Destructuring tuple types with different arities

 function fz1([x, y]: [1, 2] | [3, 4] | [5]) {
->fz1 : ([x, y]: [1, 2] | [3, 4] | [5]) => void
+>fz1 : ([x, y]: [5] | [1, 2] | [3, 4]) => void
 >x : 1 | 3 | 5
 >y : 2 | 4 | undefined

@@= skipped -57, +57 lines =@@
 // Repro from #55661

 function tooNarrow([x, y]: [1, 1] | [1, 2] | [1]) {
->tooNarrow : ([x, y]: [1, 1] | [1, 2] | [1]) => void
+>tooNarrow : ([x, y]: [1] | [1, 1] | [1, 2]) => void
 >x : 1
 >y : 1 | 2 | undefined

--- old.types.asyncGenerators.es2018.2.types
+++ new.types.asyncGenerators.es2018.2.types
@@= skipped -95, +95 lines =@@

 };
 const assignability7: () => AsyncIterator<number> = async function * () {
->assignability7 : () => AsyncIterator<number>
+>assignability7 : () => AsyncIterator<number, any, any>
 >async function * () {    yield "a";} : () => AsyncGenerator<string, void, any>

     yield "a";
@@= skipped -9, +9 lines =@@

 };
 const assignability8: () => AsyncIterator<number> = async function * () {
->assignability8 : () => AsyncIterator<number>
+>assignability8 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* ["a", "b"];} : () => AsyncGenerator<string, void, unknown>

     yield* ["a", "b"];
@@= skipped -11, +11 lines =@@

 };
 const assignability9: () => AsyncIterator<number> = async function * () {
->assignability9 : () => AsyncIterator<number>
+>assignability9 : () => AsyncIterator<number, any, any>
 >async function * () {    yield* (async function * () { yield "a"; })();} : () => AsyncGenerator<string, void, any>

     yield* (async function * () { yield "a"; })();
@@= skipped -67, +67 lines =@@
 >"a" : "a"
 }
 async function * explicitReturnType7(): AsyncIterator<number> {
->explicitReturnType7 : () => AsyncIterator<number>
+>explicitReturnType7 : () => AsyncIterator<number, any, any>

     yield "a";
 >yield "a" : any
 >"a" : "a"
 }
 async function * explicitReturnType8(): AsyncIterator<number> {
->explicitReturnType8 : () => AsyncIterator<number>
+>explicitReturnType8 : () => AsyncIterator<number, any, any>

     yield* ["a", "b"];
 >yield* ["a", "b"] : any
@@= skipped -16, +16 lines =@@
 >"b" : "b"
 }
 async function * explicitReturnType9(): AsyncIterator<number> {
->explicitReturnType9 : () => AsyncIterator<number>
+>explicitReturnType9 : () => AsyncIterator<number, any, any>

     yield* (async function * () { yield "a"; })();
 >yield* (async function * () { yield "a"; })() : void
@@= skipped -25, +25 lines =@@
 >1 : 1
 }
 async function * explicitReturnType12(): Iterator<number> {
->explicitReturnType12 : () => Iterator<number>
+>explicitReturnType12 : () => Iterator<number, any, any>

     yield 1;
 >yield 1 : any
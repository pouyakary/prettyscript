--- old.intlDateTimeFormatRangeES2021.types
+++ new.intlDateTimeFormatRangeES2021.types
@@= skipped -2, +2 lines =@@
 === intlDateTimeFormatRangeES2021.ts ===
 new Intl.DateTimeFormat().formatRange(new Date(0), new Date());
 >new Intl.DateTimeFormat().formatRange(new Date(0), new Date()) : string
->new Intl.DateTimeFormat().formatRange : (startDate: Date | number | bigint, endDate: Date | number | bigint) => string
+>new Intl.DateTimeFormat().formatRange : (startDate: number | bigint | Date, endDate: number | bigint | Date) => string
 >new Intl.DateTimeFormat() : Intl.DateTimeFormat
 >Intl.DateTimeFormat : Intl.DateTimeFormatConstructor
 >Intl : typeof Intl
 >DateTimeFormat : Intl.DateTimeFormatConstructor
->formatRange : (startDate: Date | number | bigint, endDate: Date | number | bigint) => string
+>formatRange : (startDate: number | bigint | Date, endDate: number | bigint | Date) => string
 >new Date(0) : Date
 >Date : DateConstructor
 >0 : 0
@@= skipped -15, +15 lines =@@
 const [ part ] = new Intl.DateTimeFormat().formatRangeToParts(1000, 1000000000);
 >part : Intl.DateTimeRangeFormatPart
 >new Intl.DateTimeFormat().formatRangeToParts(1000, 1000000000) : Intl.DateTimeRangeFormatPart[]
->new Intl.DateTimeFormat().formatRangeToParts : (startDate: Date | number | bigint, endDate: Date | number | bigint) => Intl.DateTimeRangeFormatPart[]
+>new Intl.DateTimeFormat().formatRangeToParts : (startDate: number | bigint | Date, endDate: number | bigint | Date) => Intl.DateTimeRangeFormatPart[]
 >new Intl.DateTimeFormat() : Intl.DateTimeFormat
 >Intl.DateTimeFormat : Intl.DateTimeFormatConstructor
 >Intl : typeof Intl
 >DateTimeFormat : Intl.DateTimeFormatConstructor
->formatRangeToParts : (startDate: Date | number | bigint, endDate: Date | number | bigint) => Intl.DateTimeRangeFormatPart[]
+>formatRangeToParts : (startDate: number | bigint | Date, endDate: number | bigint | Date) => Intl.DateTimeRangeFormatPart[]
 >1000 : 1000
 >1000000000 : 1000000000

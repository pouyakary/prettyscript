--- old.jsDeclarationsExportForms.js
+++ new.jsDeclarationsExportForms.js
@@= skipped -110, +110 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Foo = void 0;
-var cls_1 = require("./cls");
+const cls_1 = require("./cls");
 Object.defineProperty(exports, "Foo", { enumerable: true, get: function () { return cls_1.Foo; } });
 //// [bat.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var ns = require("./cls");
+const ns = require("./cls");
 exports.default = ns;
 //// [ban.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.ns = void 0;
-var ns = require("./cls");
+const ns = require("./cls");
 exports.ns = ns;
 //// [bol.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.classContainer = void 0;
-var ns = require("./cls");
+const ns = require("./cls");
 exports.classContainer = ns;
 //// [cjs.js]
 const ns = require("./cls");
 module.exports = { ns };
 //// [cjs2.js]
 const ns = require("./cls");
+export = ns;
 module.exports = ns;
 //// [cjs3.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 const ns = require("./cls");
+export var ns = ns;
 module.exports.ns = ns;
 //// [cjs4.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 const ns = require("./cls");
+export var names = ns;
 module.exports.names = ns;
 //// [includeAll.js]
 "use strict";
@@= skipped -47, +54 lines =@@


 //// [cls.d.ts]
-export class Foo {
+export declare class Foo {
 }
 //// [func.d.ts]
-export function func(): void;
+export declare function func(): void;
 //// [bar.d.ts]
 export * from "./cls";
 //// [bar2.d.ts]
 export * from "./func";
 export * from "./cls";
 //// [baz.d.ts]
-export { Foo };
 import { Foo } from "./cls";
+export { Foo };
 //// [bat.d.ts]
+import * as ns from "./cls";
 export default ns;
-import * as ns from "./cls";
 //// [ban.d.ts]
-export { ns };
 import * as ns from "./cls";
+export { ns };
 //// [bol.d.ts]
+import * as ns from "./cls";
 export { ns as classContainer };
-import * as ns from "./cls";
 //// [cjs.d.ts]
-export { ns };
-import ns = require("./cls");
+declare const ns: typeof ns;
+declare const _default: {
+    ns: typeof ns;
+};
+export = _default;
 //// [cjs2.d.ts]
 export = ns;
-import ns = require("./cls");
 //// [cjs3.d.ts]
-export { ns };
-import ns = require("./cls");
+export var ns = ns;
+export {};
 //// [cjs4.d.ts]
-export { ns as names };
-import ns = require("./cls");
+export var names = ns;
+export {};
 //// [includeAll.d.ts]
-export {};
+import "./cjs4";
+import "./cjs3";
+import "./cjs2";
+import "./cjs";
+import "./bol";
+import "./ban";
+import "./bat";
+import "./baz";
+import "./bar";
+import "./bar2";
+
+
+//// [DtsFileErrors]
+
+
+out/cjs.d.ts(1,15): error TS2502: 'ns' is referenced directly or indirectly in its own type annotation.
+out/cjs2.d.ts(1,10): error TS2304: Cannot find name 'ns'.
+out/cjs3.d.ts(1,17): error TS1039: Initializers are not allowed in ambient contexts.
+out/cjs4.d.ts(1,20): error TS1039: Initializers are not allowed in ambient contexts.
+out/cjs4.d.ts(1,20): error TS2304: Cannot find name 'ns'.
+
+
+==== out/cls.d.ts (0 errors) ====
+    export declare class Foo {
+    }
+    
+==== out/func.d.ts (0 errors) ====
+    export declare function func(): void;
+    
+==== out/bar.d.ts (0 errors) ====
+    export * from "./cls";
+    
+==== out/bar2.d.ts (0 errors) ====
+    export * from "./func";
+    export * from "./cls";
+    
+==== out/baz.d.ts (0 errors) ====
+    import { Foo } from "./cls";
+    export { Foo };
+    
+==== out/bat.d.ts (0 errors) ====
+    import * as ns from "./cls";
+    export default ns;
+    
+==== out/ban.d.ts (0 errors) ====
+    import * as ns from "./cls";
+    export { ns };
+    
+==== out/bol.d.ts (0 errors) ====
+    import * as ns from "./cls";
+    export { ns as classContainer };
+    
+==== out/cjs.d.ts (1 errors) ====
+    declare const ns: typeof ns;
+                  ~~
+!!! error TS2502: 'ns' is referenced directly or indirectly in its own type annotation.
+    declare const _default: {
+        ns: typeof ns;
+    };
+    export = _default;
+    
+==== out/cjs2.d.ts (1 errors) ====
+    export = ns;
+             ~~
+!!! error TS2304: Cannot find name 'ns'.
+    
+==== out/cjs3.d.ts (1 errors) ====
+    export var ns = ns;
+                    ~~
+!!! error TS1039: Initializers are not allowed in ambient contexts.
+    export {};
+    
+==== out/cjs4.d.ts (2 errors) ====
+    export var names = ns;
+                       ~~
+!!! error TS1039: Initializers are not allowed in ambient contexts.
+                       ~~
+!!! error TS2304: Cannot find name 'ns'.
+    export {};
+    
+==== out/includeAll.d.ts (0 errors) ====
+    import "./cjs4";
+    import "./cjs3";
+    import "./cjs2";
+    import "./cjs";
+    import "./bol";
+    import "./ban";
+    import "./bat";
+    import "./baz";
+    import "./bar";
+    import "./bar2";
+    
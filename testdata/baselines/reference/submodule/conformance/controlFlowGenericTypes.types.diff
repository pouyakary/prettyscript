--- old.controlFlowGenericTypes.types
+++ new.controlFlowGenericTypes.types
@@= skipped -331, +331 lines =@@
 };

 function get<K extends keyof A>(key: K, obj: A): number {
->get : <K extends keyof A>(key: K, obj: A) => number
+>get : <K extends "a">(key: K, obj: A) => number
 >key : K
 >obj : A

@@= skipped -28, +28 lines =@@
 >EventEmitter : EventEmitter<ET>

     off<K extends keyof ET>(...args: [K, number] | [unknown, string]):void {}
->off : <K extends keyof ET>(...args: [K, number] | [unknown, string]) => void
+>off : <K extends keyof ET>(...args: [unknown, string] | [K, number]) => void
 >args : [unknown, string] | [K, number]
 }
 function once<ET, T extends EventEmitter<ET>>(emittingObject: T, eventName: keyof ET): void {
@@= skipped -226, +226 lines =@@
 >title : string | undefined

 function getColumnProperty<T>(column: Column<T>, key: keyof Column<T>) {
->getColumnProperty : <T>(column: Column<T>, key: keyof Column<T>) => Column<T>["title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })]
+>getColumnProperty : <T>(column: Column<T>, key: "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })) => Column<T>["title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })]
 >column : Column<T>
->key : "title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })
+>key : "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })

   return column[key];
->column[key] : Column<T>["title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })]
+>column[key] : Column<T>["title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })]
 >column : Column<T>
->key : "title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })
+>key : "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })
 }

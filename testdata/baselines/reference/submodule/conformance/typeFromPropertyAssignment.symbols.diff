--- old.typeFromPropertyAssignment.symbols
+++ new.typeFromPropertyAssignment.symbols
@@= skipped -1, +1 lines =@@

 === a.js ===
 var Outer = class O {
->Outer : Symbol(Outer, Decl(a.js, 0, 3), Decl(a.js, 2, 1))
+>Outer : Symbol(Outer, Decl(a.js, 0, 3))
 >O : Symbol(O, Decl(a.js, 0, 11))

     m(x, y) { }
@@= skipped -9, +9 lines =@@
 >y : Symbol(y, Decl(a.js, 1, 8))
 }
 Outer.Inner = class I {
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 2, 1))
->Outer : Symbol(Outer, Decl(a.js, 0, 3), Decl(a.js, 2, 1))
->Inner : Symbol(Outer.Inner, Decl(a.js, 2, 1))
+>Outer.Inner : Symbol(O.Inner, Decl(a.js, 2, 1))
+>Outer : Symbol(Outer, Decl(a.js, 0, 3))
+>Inner : Symbol(O.Inner, Decl(a.js, 2, 1))
 >I : Symbol(I, Decl(a.js, 3, 13))

     n(a, b) { }
@@= skipped -16, +16 lines =@@
 >si : Symbol(si, Decl(a.js, 8, 3))

 si.m
->si.m : Symbol(O.m, Decl(a.js, 0, 21))
 >si : Symbol(si, Decl(a.js, 8, 3))
->m : Symbol(O.m, Decl(a.js, 0, 21))

 /** @type {Outer.Inner} */
 var oi
 >oi : Symbol(oi, Decl(a.js, 11, 3))

 oi.n
->oi.n : Symbol(I.n, Decl(a.js, 3, 23))
 >oi : Symbol(oi, Decl(a.js, 11, 3))
->n : Symbol(I.n, Decl(a.js, 3, 23))


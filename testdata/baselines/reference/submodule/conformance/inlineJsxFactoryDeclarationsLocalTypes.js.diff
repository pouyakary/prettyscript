--- old.inlineJsxFactoryDeclarationsLocalTypes.js
+++ new.inlineJsxFactoryDeclarationsLocalTypes.js
@@= skipped -91, +91 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.tree = exports.MyClass = exports.MySFC = void 0;
 /** @jsx predom */
-var renderer2_1 = require("./renderer2");
-const MySFC = (props) => (0, renderer2_1.predom)("p", null,
-    props.x,
-    " + ",
-    props.y,
-    " = ",
-    props.x + props.y,
-    ...this.props.children);
+const renderer2_1 = require("./renderer2");
+const MySFC = (props) => (0, renderer2_1.predom)("p", null, props.x, " + ", props.y, " = ", props.x + props.y, ...this.props.children);
 exports.MySFC = MySFC;
 class MyClass {
+    props;
+    __predomBrand;
     constructor(props) {
         this.props = props;
     }
     render() {
-        return (0, renderer2_1.predom)("p", null,
-            this.props.x,
-            " + ",
-            this.props.y,
-            " = ",
-            this.props.x + this.props.y,
-            ...this.props.children);
+        return (0, renderer2_1.predom)("p", null, this.props.x, " + ", this.props.y, " = ", this.props.x + this.props.y, ...this.props.children);
     }
 }
 exports.MyClass = MyClass;
-exports.tree = (0, renderer2_1.predom)(exports.MySFC, { x: 1, y: 2 },
-    (0, renderer2_1.predom)(MyClass, { x: 3, y: 4 }),
-    (0, renderer2_1.predom)(MyClass, { x: 5, y: 6 }));
+exports.tree = (0, renderer2_1.predom)(exports.MySFC, { x: 1, y: 2 }, (0, renderer2_1.predom)(MyClass, { x: 3, y: 4 }), (0, renderer2_1.predom)(MyClass, { x: 5, y: 6 }));
 exports.default = (0, renderer2_1.predom)("h", null);
 //// [index.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 /** @jsx dom */
-var renderer_1 = require("./renderer");
-var component_1 = require("./component");
+const renderer_1 = require("./renderer");
+const component_1 = require("./component");
 let elem = component_1.default;
 elem = (0, renderer_1.dom)("h", null); // Expect assignability error here
-const DOMSFC = (props) => (0, renderer_1.dom)("p", null,
-    props.x,
-    " + ",
-    props.y,
-    " = ",
-    props.x + props.y,
-    props.children);
+const DOMSFC = (props) => (0, renderer_1.dom)("p", null, props.x, " + ", props.y, " = ", props.x + props.y, props.children);
 class DOMClass {
+    props;
+    __domBrand;
     constructor(props) {
         this.props = props;
     }
     render() {
-        return (0, renderer_1.dom)("p", null,
-            this.props.x,
-            " + ",
-            this.props.y,
-            " = ",
-            this.props.x + this.props.y,
-            ...this.props.children);
+        return (0, renderer_1.dom)("p", null, this.props.x, " + ", this.props.y, " = ", this.props.x + this.props.y, ...this.props.children);
     }
 }
 // Should work, everything is a DOM element
-const _tree = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 },
-    (0, renderer_1.dom)(DOMClass, { x: 3, y: 4 }),
-    (0, renderer_1.dom)(DOMClass, { x: 5, y: 6 }));
+const _tree = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 }, (0, renderer_1.dom)(DOMClass, { x: 3, y: 4 }), (0, renderer_1.dom)(DOMClass, { x: 5, y: 6 }));
 // Should fail, no dom elements
-const _brokenTree = (0, renderer_1.dom)(component_1.MySFC, { x: 1, y: 2 },
-    (0, renderer_1.dom)(component_1.MyClass, { x: 3, y: 4 }),
-    (0, renderer_1.dom)(component_1.MyClass, { x: 5, y: 6 }));
+const _brokenTree = (0, renderer_1.dom)(component_1.MySFC, { x: 1, y: 2 }, (0, renderer_1.dom)(component_1.MyClass, { x: 3, y: 4 }), (0, renderer_1.dom)(component_1.MyClass, { x: 5, y: 6 }));
 // Should fail, nondom isn't allowed as children of dom
-const _brokenTree2 = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 },
-    component_1.tree,
-    component_1.tree);
+const _brokenTree2 = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 }, component_1.tree, component_1.tree);
--- old.typeFromPropertyAssignment15.symbols
+++ new.typeFromPropertyAssignment15.symbols
@@= skipped -1, +1 lines =@@

 === a.js ===
 var Outer = {};
->Outer : Symbol(Outer, Decl(a.js, 0, 3), Decl(a.js, 0, 15))
+>Outer : Symbol(Outer, Decl(a.js, 0, 3))

 Outer.Inner = class {
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 15))
->Outer : Symbol(Outer, Decl(a.js, 0, 3), Decl(a.js, 0, 15))
->Inner : Symbol(Outer.Inner, Decl(a.js, 0, 15))
+>Outer.Inner : Symbol(Inner, Decl(a.js, 0, 15))
+>Outer : Symbol(Outer, Decl(a.js, 0, 3))
+>Inner : Symbol(Inner, Decl(a.js, 0, 15))

     constructor() {
         this.x = 1
@@= skipped -22, +22 lines =@@
 >inner : Symbol(inner, Decl(a.js, 10, 3))

 inner.x
->inner.x : Symbol(Inner.x, Decl(a.js, 3, 19))
 >inner : Symbol(inner, Decl(a.js, 10, 3))
->x : Symbol(Inner.x, Decl(a.js, 3, 19))

 inner.m()
->inner.m : Symbol(Inner.m, Decl(a.js, 5, 5))
 >inner : Symbol(inner, Decl(a.js, 10, 3))
->m : Symbol(Inner.m, Decl(a.js, 5, 5))

 var inno = new Outer.Inner()
 >inno : Symbol(inno, Decl(a.js, 13, 3))
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 15))
->Outer : Symbol(Outer, Decl(a.js, 0, 3), Decl(a.js, 0, 15))
->Inner : Symbol(Outer.Inner, Decl(a.js, 0, 15))
+>Outer.Inner : Symbol(Inner, Decl(a.js, 0, 15))
+>Outer : Symbol(Outer, Decl(a.js, 0, 3))
+>Inner : Symbol(Inner, Decl(a.js, 0, 15))

 inno.x
 >inno.x : Symbol(Inner.x, Decl(a.js, 3, 19))
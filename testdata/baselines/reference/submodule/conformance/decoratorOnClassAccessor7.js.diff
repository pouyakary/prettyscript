--- old.decoratorOnClassAccessor7.js
+++ new.decoratorOnClassAccessor7.js
@@= skipped -34, +34 lines =@@
 }

 //// [decoratorOnClassAccessor7.js]
-var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
-    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
-    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
-    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
-    return c > 3 && r && Object.defineProperty(target, key, r), r;
-};
-let A = (() => {
-    class A {
-        get x() { return 0; }
-        set x(value) { }
-    }
-    __decorate([
-        dec1
-    ], A.prototype, "x", null);
-    return A;
-})();
-let B = (() => {
-    class B {
-        get x() { return 0; }
-        set x(value) { }
-    }
-    __decorate([
-        dec2
-    ], B.prototype, "x", null);
-    return B;
-})();
-let C = (() => {
-    class C {
-        set x(value) { }
-        get x() { return 0; }
-    }
-    __decorate([
-        dec1
-    ], C.prototype, "x", null);
-    return C;
-})();
-let D = (() => {
-    class D {
-        set x(value) { }
-        get x() { return 0; }
-    }
-    __decorate([
-        dec2
-    ], D.prototype, "x", null);
-    return D;
-})();
-let E = (() => {
-    class E {
-        get x() { return 0; }
-        set x(value) { }
-    }
-    __decorate([
-        dec1
-    ], E.prototype, "x", null);
-    return E;
-})();
-let F = (() => {
-    class F {
-        set x(value) { }
-        get x() { return 0; }
-    }
-    __decorate([
-        dec1
-    ], F.prototype, "x", null);
-    return F;
-})();
+class A {
+    @dec1
+    get x() { return 0; }
+    set x(value) { }
+}
+class B {
+    get x() { return 0; }
+    @dec2
+    set x(value) { }
+}
+class C {
+    @dec1
+    set x(value) { }
+    get x() { return 0; }
+}
+class D {
+    set x(value) { }
+    @dec2
+    get x() { return 0; }
+}
+class E {
+    @dec1
+    get x() { return 0; }
+    @dec2
+    set x(value) { }
+}
+class F {
+    @dec1
+    set x(value) { }
+    @dec2
+    get x() { return 0; }
+}
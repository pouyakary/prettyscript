//// [tests/cases/conformance/salsa/constructorFunctionMethodTypeParameters.ts] ////

=== constructorFunctionMethodTypeParameters.js ===
/**
 * @template {string} T
 * @param {T} t
 */
function Cls(t) {
>Cls : Symbol(Cls, Decl(constructorFunctionMethodTypeParameters.js, 0, 0))
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 4, 13))

    this.t = t;
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 4, 13))
}

/**
 * @template {string} V
 * @param {T} t
 * @param {V} v
 * @return {V}
 */
Cls.prototype.topLevelComment = function (t, v) {
>Cls.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>Cls : Symbol(Cls, Decl(constructorFunctionMethodTypeParameters.js, 0, 0))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 14, 42))
>v : Symbol(v, Decl(constructorFunctionMethodTypeParameters.js, 14, 44))

    return v
>v : Symbol(v, Decl(constructorFunctionMethodTypeParameters.js, 14, 44))

};

Cls.prototype.nestedComment =
>Cls.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>Cls : Symbol(Cls, Decl(constructorFunctionMethodTypeParameters.js, 0, 0))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))

    /**
     * @template {string} U
     * @param {T} t
     * @param {U} u
     * @return {T}
     */
    function (t, u) {
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 25, 14))
>u : Symbol(u, Decl(constructorFunctionMethodTypeParameters.js, 25, 16))

        return t
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 25, 14))

    };

var c = new Cls('a');
>c : Symbol(c, Decl(constructorFunctionMethodTypeParameters.js, 29, 3))
>Cls : Symbol(Cls, Decl(constructorFunctionMethodTypeParameters.js, 0, 0))

const s = c.topLevelComment('a', 'b');
>s : Symbol(s, Decl(constructorFunctionMethodTypeParameters.js, 30, 5))
>c : Symbol(c, Decl(constructorFunctionMethodTypeParameters.js, 29, 3))

const t = c.nestedComment('a', 'b');
>t : Symbol(t, Decl(constructorFunctionMethodTypeParameters.js, 31, 5))
>c : Symbol(c, Decl(constructorFunctionMethodTypeParameters.js, 29, 3))



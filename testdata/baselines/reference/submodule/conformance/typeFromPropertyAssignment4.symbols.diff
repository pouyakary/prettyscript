--- old.typeFromPropertyAssignment4.symbols
+++ new.typeFromPropertyAssignment4.symbols
@@= skipped -1, +1 lines =@@

 === def.js ===
 var Outer = {};
->Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
+>Outer : Symbol(Outer, Decl(def.js, 0, 3))

 === a.js ===
 Outer.Inner = class {
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
->Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
->Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
+>Outer : Symbol(Outer, Decl(def.js, 0, 3))

     constructor() {
         /** @type {number} */
@@= skipped -22, +20 lines =@@
 >local : Symbol(local, Decl(a.js, 8, 3))

 local.y
->local.y : Symbol(Inner.y, Decl(a.js, 1, 19))
 >local : Symbol(local, Decl(a.js, 8, 3))
->y : Symbol(Inner.y, Decl(a.js, 1, 19))

 var inner = new Outer.Inner()
 >inner : Symbol(inner, Decl(a.js, 10, 3))
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
->Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
->Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
+>Outer : Symbol(Outer, Decl(def.js, 0, 3))

 inner.y
->inner.y : Symbol(Inner.y, Decl(a.js, 1, 19))
 >inner : Symbol(inner, Decl(a.js, 10, 3))
->y : Symbol(Inner.y, Decl(a.js, 1, 19))

 === b.js ===
 /** @type {Outer.Inner} */
@@= skipped -21, +15 lines =@@
 >x : Symbol(x, Decl(b.js, 1, 3))

 x.y
->x.y : Symbol(Inner.y, Decl(a.js, 1, 19))
 >x : Symbol(x, Decl(b.js, 1, 3))
->y : Symbol(Inner.y, Decl(a.js, 1, 19))

 var z = new Outer.Inner()
 >z : Symbol(z, Decl(b.js, 3, 3))
->Outer.Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
->Outer : Symbol(Outer, Decl(def.js, 0, 3), Decl(a.js, 0, 0))
->Inner : Symbol(Outer.Inner, Decl(a.js, 0, 0))
+>Outer : Symbol(Outer, Decl(def.js, 0, 3))

 z.y
->z.y : Symbol(Inner.y, Decl(a.js, 1, 19))
 >z : Symbol(z, Decl(b.js, 3, 3))
->y : Symbol(Inner.y, Decl(a.js, 1, 19))

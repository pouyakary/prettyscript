--- old.nodeModulesSynchronousCallErrors(module=node20).errors.txt
+++ new.nodeModulesSynchronousCallErrors(module=node20).errors.txt
@@= skipped -0, +0 lines =@@
-<no content>
+error TS5109: Option 'moduleResolution' must be set to 'Node16' (or left unspecified) when option 'module' is set to 'Node20'.
+error TS2468: Cannot find global value 'Promise'.
+index.ts(6,23): error TS2705: An async function or method in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+index.ts(7,24): error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+index.ts(8,24): error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+subfolder/index.ts(6,23): error TS2705: An async function or method in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+subfolder/index.ts(7,24): error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+subfolder/index.ts(8,24): error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+
+
+!!! error TS5109: Option 'moduleResolution' must be set to 'Node16' (or left unspecified) when option 'module' is set to 'Node20'.
+!!! error TS2468: Cannot find global value 'Promise'.
+==== subfolder/index.ts (3 errors) ====
+    // cjs format file
+    import {h} from "../index.js";
+    import mod = require("../index.js");
+    import {f as _f} from "./index.js";
+    import mod2 = require("./index.js");
+    export async function f() {
+                          ~
+!!! error TS2705: An async function or method in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        const mod3 = await import ("../index.js");
+                           ~~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        const mod4 = await import ("./index.js");
+                           ~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        h();
+    }
+==== index.ts (3 errors) ====
+    // esm format file
+    import {h as _h} from "./index.js";
+    import mod = require("./index.js");
+    import {f} from "./subfolder/index.js";
+    import mod2 = require("./subfolder/index.js");
+    export async function h() {
+                          ~
+!!! error TS2705: An async function or method in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        const mod3 = await import ("./index.js");
+                           ~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        const mod4 = await import ("./subfolder/index.js");
+                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2712: A dynamic import call in ES5 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option.
+        f();
+    }
+==== package.json (0 errors) ====
+    {
+        "name": "package",
+        "private": true,
+        "type": "module"
+    }
+==== subfolder/package.json (0 errors) ====
+    {
+        "type": "commonjs"
+    }
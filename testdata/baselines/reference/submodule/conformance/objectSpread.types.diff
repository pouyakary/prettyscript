--- old.objectSpread.types
+++ new.objectSpread.types
@@= skipped -395, +395 lines =@@

 // optional
 function container(
->container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string; }, optionalNumber: { sn?: number; }) => void
+>container : (definiteBoolean: { sn: boolean; }, definiteString: { sn: string; }, optionalString: { sn?: string | undefined; }, optionalNumber: { sn?: number | undefined; }) => void

     definiteBoolean: { sn: boolean },
 >definiteBoolean : { sn: boolean; }
@@= skipped -11, +11 lines =@@
 >sn : string

     optionalString: { sn?: string },
->optionalString : { sn?: string; }
+>optionalString : { sn?: string | undefined; }
 >sn : string | undefined

     optionalNumber: { sn?: number }) {
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }
 >sn : number | undefined

     let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
@@= skipped -13, +13 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalNumber : { sn?: number; }
+>optionalNumber : { sn?: number | undefined; }

     let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
 >optionalUnionDuplicates : { sn: string | number; }
@@= skipped -8, +8 lines =@@
 >{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { sn: string | number; }
 >definiteBoolean : { sn: boolean; }
 >definiteString : { sn: string; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }

     let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
->allOptional : { sn?: string | number; }
+>allOptional : { sn?: string | number | undefined; }
 >sn : string | number | undefined
 >{ ...optionalString, ...optionalNumber } : { sn?: string | number | undefined; }
->optionalString : { sn?: string; }
->optionalNumber : { sn?: number; }
+>optionalString : { sn?: string | undefined; }
+>optionalNumber : { sn?: number | undefined; }

     // computed property
     let computedFirst: { a: number, b: string, "before everything": number } =
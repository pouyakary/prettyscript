--- old.importMeta(module=es2020,target=es5).js
+++ new.importMeta(module=es2020,target=es5).js
@@= skipped -38, +38 lines =@@
 const { a, b, c } = import.meta.wellKnownProperty;

 //// [example.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 // Adapted from https://github.com/tc39/proposal-import-meta/tree/c3902a9ffe2e69a7ac42c19d7ea74cbdcea9b7fb#example
-(() => __awaiter(void 0, void 0, void 0, function* () {
-    const response = yield fetch(new URL("../hamsters.jpg", import.meta.url).toString());
-    const blob = yield response.blob();
+(async () => {
+    const response = await fetch(new URL("../hamsters.jpg", import.meta.url).toString());
+    const blob = await response.blob();
     const size = import.meta.scriptElement.dataset.size || 300;
     const image = new Image();
     image.src = URL.createObjectURL(blob);
     image.width = image.height = size;
     document.body.appendChild(image);
-}))();
+})();
 export {};
 //// [moduleLookingFile01.js]
 export let x = import.meta;
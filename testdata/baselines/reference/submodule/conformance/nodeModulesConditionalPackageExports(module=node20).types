//// [tests/cases/conformance/node/nodeModulesConditionalPackageExports.ts] ////

=== index.ts ===
// esm format file
import * as cjs from "package/cjs";
>cjs : any

import * as mjs from "package/mjs";
>mjs : any

import * as type from "package";
>type : any

cjs;
>cjs : any

mjs;
>mjs : any

type;
>type : any

import * as cjsi from "inner/a";
>cjsi : typeof cjsi

import * as mjsi from "inner/b";
>mjsi : any

import * as typei from "inner";
>typei : any

import * as ts from "inner/types";
>ts : typeof cjsi

cjsi.mjsSource;
>cjsi.mjsSource : any
>cjsi : typeof cjsi
>mjsSource : any

mjsi.mjsSource;
>mjsi.mjsSource : any
>mjsi : any
>mjsSource : any

typei.mjsSource;
>typei.mjsSource : any
>typei : any
>mjsSource : any

ts.mjsSource;
>ts.mjsSource : any
>ts : typeof cjsi
>mjsSource : any

=== index.mts ===
// esm format file
import * as cjs from "package/cjs";
>cjs : any

import * as mjs from "package/mjs";
>mjs : any

import * as type from "package";
>type : any

cjs;
>cjs : any

mjs;
>mjs : any

type;
>type : any

import * as cjsi from "inner/a";
>cjsi : any

import * as mjsi from "inner/b";
>mjsi : typeof mjsi

import * as typei from "inner";
>typei : typeof mjsi

import * as ts from "inner/types";
>ts : typeof mjsi

cjsi.mjsSource;
>cjsi.mjsSource : any
>cjsi : any
>mjsSource : any

mjsi.mjsSource;
>mjsi.mjsSource : true
>mjsi : typeof mjsi
>mjsSource : true

typei.mjsSource;
>typei.mjsSource : true
>typei : typeof mjsi
>mjsSource : true

ts.mjsSource;
>ts.mjsSource : true
>ts : typeof mjsi
>mjsSource : true

=== index.cts ===
// cjs format file
import * as cjs from "package/cjs";
>cjs : any

import * as mjs from "package/mjs";
>mjs : any

import * as type from "package";
>type : any

cjs;
>cjs : any

mjs;
>mjs : any

type;
>type : any

import * as cjsi from "inner/a";
>cjsi : typeof cjsi

import * as mjsi from "inner/b";
>mjsi : any

import * as typei from "inner";
>typei : any

import * as ts from "inner/types";
>ts : typeof cjsi

cjsi.cjsSource;
>cjsi.cjsSource : true
>cjsi : typeof cjsi
>cjsSource : true

mjsi.cjsSource;
>mjsi.cjsSource : any
>mjsi : any
>cjsSource : any

typei.implicitCjsSource;
>typei.implicitCjsSource : any
>typei : any
>implicitCjsSource : any

ts.cjsSource;
>ts.cjsSource : true
>ts : typeof cjsi
>cjsSource : true

=== node_modules/inner/index.d.ts ===
// cjs format file
import * as cjs from "inner/a";
>cjs : typeof cjs

import * as mjs from "inner/b";
>mjs : any

import * as type from "inner";
>type : any

import * as ts from "inner/types";
>ts : typeof cjs

export { cjs };
>cjs : typeof cjs

export { mjs };
>mjs : any

export { type };
>type : any

export { ts };
>ts : typeof cjs

export const implicitCjsSource = true;
>implicitCjsSource : true
>true : true

=== node_modules/inner/index.d.mts ===
// esm format file
import * as cjs from "inner/a";
>cjs : any

import * as mjs from "inner/b";
>mjs : typeof mjs

import * as type from "inner";
>type : typeof mjs

import * as ts from "inner/types";
>ts : typeof mjs

export { cjs };
>cjs : any

export { mjs };
>mjs : typeof mjs

export { type };
>type : typeof mjs

export { ts };
>ts : typeof mjs

export const mjsSource = true;
>mjsSource : true
>true : true

=== node_modules/inner/index.d.cts ===
// cjs format file
import * as cjs from "inner/a";
>cjs : typeof cjs

import * as mjs from "inner/b";
>mjs : any

import * as type from "inner";
>type : any

import * as ts from "inner/types";
>ts : typeof cjs

export { cjs };
>cjs : typeof cjs

export { mjs };
>mjs : any

export { type };
>type : any

export { ts };
>ts : typeof cjs

export const cjsSource = true;
>cjsSource : true
>true : true


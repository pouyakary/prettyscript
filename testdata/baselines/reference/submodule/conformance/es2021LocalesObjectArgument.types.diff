--- old.es2021LocalesObjectArgument.types
+++ new.es2021LocalesObjectArgument.types
@@= skipped -3, +3 lines =@@
 const enUS = new Intl.Locale("en-US");
 >enUS : Intl.Locale
 >new Intl.Locale("en-US") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Intl.Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >"en-US" : "en-US"

 const deDE = new Intl.Locale("de-DE");
 >deDE : Intl.Locale
 >new Intl.Locale("de-DE") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Intl.Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >"de-DE" : "de-DE"

 const jaJP = new Intl.Locale("ja-JP");
 >jaJP : Intl.Locale
 >new Intl.Locale("ja-JP") : Intl.Locale
->Intl.Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Intl.Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >Intl : typeof Intl
->Locale : new (tag: Intl.UnicodeBCP47LocaleIdentifier | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
+>Locale : new (tag: string | Intl.Locale, options?: Intl.LocaleOptions) => Intl.Locale
 >"ja-JP" : "ja-JP"

 new Intl.ListFormat(enUS);
 >new Intl.ListFormat(enUS) : Intl.ListFormat
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >enUS : Intl.Locale

 new Intl.ListFormat([deDE, jaJP]);
 >new Intl.ListFormat([deDE, jaJP]) : Intl.ListFormat
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >[deDE, jaJP] : Intl.Locale[]
 >deDE : Intl.Locale
 >jaJP : Intl.Locale

 Intl.ListFormat.supportedLocalesOf(enUS);
 >Intl.ListFormat.supportedLocalesOf(enUS) : string[]
->Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => string[]
+>Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
+>ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
+>supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => string[]
 >enUS : Intl.Locale

 Intl.ListFormat.supportedLocalesOf([deDE, jaJP]);
 >Intl.ListFormat.supportedLocalesOf([deDE, jaJP]) : string[]
->Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
->Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
+>Intl.ListFormat.supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => string[]
+>Intl.ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
 >Intl : typeof Intl
->ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): Intl.UnicodeBCP47LocaleIdentifier[]; }
->supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => Intl.UnicodeBCP47LocaleIdentifier[]
+>ListFormat : { new (locales?: Intl.LocalesArgument, options?: Intl.ListFormatOptions): Intl.ListFormat; prototype: Intl.ListFormat; supportedLocalesOf(locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">): string[]; }
+>supportedLocalesOf : (locales: Intl.LocalesArgument, options?: Pick<Intl.ListFormatOptions, "localeMatcher">) => string[]
 >[deDE, jaJP] : Intl.Locale[]
 >deDE : Intl.Locale
 >jaJP : Intl.Locale
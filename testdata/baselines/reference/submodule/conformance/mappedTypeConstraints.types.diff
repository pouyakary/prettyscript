--- old.mappedTypeConstraints.types
+++ new.mappedTypeConstraints.types
@@= skipped -25, +25 lines =@@
 }

 function f2<T extends { a: string, b: string }, U extends { b: string, c: string }>(obj: Pick<T | U, keyof (T | U)>) {
->f2 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T | U, keyof (T | U)>) => void
+>f2 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T | U, keyof T & keyof U>) => void
 >a : string
 >b : string
 >b : string
@@= skipped -14, +14 lines =@@
 }

 function f3<T extends { a: string, b: string }, U extends { b: string, c: string }>(obj: Pick<T & U, keyof (T & U)>) {
->f3 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T & U, keyof (T & U)>) => void
+>f3 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T & U, keyof T | keyof U>) => void
 >a : string
 >b : string
 >b : string
@@= skipped -24, +24 lines =@@
 }

 function f4<T extends { a: string, b: string }>(obj: Record<Exclude<keyof T, 'b'> | 'c', string>) {
->f4 : <T extends { a: string; b: string; }>(obj: Record<Exclude<keyof T, "b"> | "c", string>) => void
+>f4 : <T extends { a: string; b: string; }>(obj: Record<"c" | Exclude<keyof T, "b">, string>) => void
 >a : string
 >b : string
 >obj : Record<"c" | Exclude<keyof T, "b">, string>
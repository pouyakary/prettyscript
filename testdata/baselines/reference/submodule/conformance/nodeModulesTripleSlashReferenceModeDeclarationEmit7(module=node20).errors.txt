error TS5109: Option 'moduleResolution' must be set to 'Node16' (or left unspecified) when option 'module' is set to 'Node20'.
/index.ts(4,28): error TS2339: Property 'default' does not exist on type 'RequireInterface'.
/sub1/uses.ts(2,16): error TS2552: Cannot find name 'getInterI'. Did you mean 'getInterR'?


!!! error TS5109: Option 'moduleResolution' must be set to 'Node16' (or left unspecified) when option 'module' is set to 'Node20'.
==== /index.ts (1 errors) ====
    // only an esm file can `import` both kinds of files
    import obj1 from "./sub1/uses.js"
    import obj2 from "./sub2/uses.js"
    export default [obj1, obj2.default] as const;
                               ~~~~~~~
!!! error TS2339: Property 'default' does not exist on type 'RequireInterface'.
==== /node_modules/pkg/package.json (0 errors) ====
    {
        "name": "pkg",
        "version": "0.0.1",
        "exports": {
            "import": "./import.js",
            "require": "./require.js"
        }
    }
==== /node_modules/pkg/import.d.ts (0 errors) ====
    export {};
    declare global {
        interface ImportInterface { _i: any; }
        function getInterI(): ImportInterface;
    }
==== /node_modules/pkg/require.d.ts (0 errors) ====
    export {};
    declare global {
        interface RequireInterface { _r: any; }
        function getInterR(): RequireInterface;
    }
==== /sub1/uses.ts (1 errors) ====
    /// <reference types="pkg" preserve="true" />
    export default getInterI();
                   ~~~~~~~~~
!!! error TS2552: Cannot find name 'getInterI'. Did you mean 'getInterR'?
!!! related TS2728 /node_modules/pkg/require.d.ts:4:14: 'getInterR' is declared here.
==== /sub1/package.json (0 errors) ====
    {
        "private": true,
        "type": "module"
    }
==== /sub2/uses.ts (0 errors) ====
    /// <reference types="pkg" preserve="true" />
    export default getInterR();
==== /sub2/package.json (0 errors) ====
    {
        "private": true,
        "type": "commonjs"
    }
==== /package.json (0 errors) ====
    {
        "private": true,
        "type": "module"
    }
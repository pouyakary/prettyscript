--- old.mixinClassesAnonymous.types
+++ new.mixinClassesAnonymous.types
@@= skipped -30, +30 lines =@@
 }

 const Printable = <T extends Constructor<Base>>(superClass: T) => class extends superClass {
->Printable : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & T
-><T extends Constructor<Base>>(superClass: T) => class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & T
+>Printable : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable.(Anonymous class); } & T
+><T extends Constructor<Base>>(superClass: T) => class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable.(Anonymous class); } & T
 >superClass : T
->class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : { new (...args: any[]): (Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & T
+>class extends superClass {    static message = "hello";    print() {        const output = this.x + "," + this.y;    }} : { new (...args: any[]): (Anonymous class); message: string; prototype: Printable.(Anonymous class); } & T
 >superClass : Base

     static message = "hello";
@@= skipped -28, +28 lines =@@
 }

 function Tagged<T extends Constructor<{}>>(superClass: T) {
->Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged<any>.C; } & T
+>Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged.C; } & T
 >superClass : T

     class C extends superClass {
@@= skipped -28, +28 lines =@@
         }
     }
     return C;
->C : { new (...args: any[]): C; prototype: Tagged<any>.C; } & T
+>C : { new (...args: any[]): C; prototype: Tagged.C; } & T
 }

 const Thing1 = Tagged(Derived);
->Thing1 : { new (...args: any[]): Tagged<typeof Derived>.C; prototype: Tagged<any>.C; } & typeof Derived
->Tagged(Derived) : { new (...args: any[]): Tagged<typeof Derived>.C; prototype: Tagged<any>.C; } & typeof Derived
->Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged<any>.C; } & T
+>Thing1 : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & typeof Derived
+>Tagged(Derived) : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & typeof Derived
+>Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged.C; } & T
 >Derived : typeof Derived

 const Thing2 = Tagged(Printable(Derived));
->Thing2 : { new (...args: any[]): Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C; prototype: Tagged<any>.C; } & { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
->Tagged(Printable(Derived)) : { new (...args: any[]): Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C; prototype: Tagged<any>.C; } & { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
->Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged<any>.C; } & T
->Printable(Derived) : { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
->Printable : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & T
+>Thing2 : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
+>Tagged(Printable(Derived)) : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
+>Tagged : <T extends Constructor<{}>>(superClass: T) => { new (...args: any[]): C; prototype: Tagged.C; } & T
+>Printable(Derived) : { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
+>Printable : <T extends Constructor<Base>>(superClass: T) => { new (...args: any[]): (Anonymous class); message: string; prototype: Printable.(Anonymous class); } & T
 >Derived : typeof Derived

 Thing2.message;
 >Thing2.message : string
->Thing2 : { new (...args: any[]): Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C; prototype: Tagged<any>.C; } & { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
+>Thing2 : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
 >message : string

 function f1() {
 >f1 : () => void

     const thing = new Thing1(1, 2, 3);
->thing : Tagged<typeof Derived>.C & Derived
->new Thing1(1, 2, 3) : Tagged<typeof Derived>.C & Derived
->Thing1 : { new (...args: any[]): Tagged<typeof Derived>.C; prototype: Tagged<any>.C; } & typeof Derived
+>thing : Tagged.C & Derived
+>new Thing1(1, 2, 3) : Tagged.C & Derived
+>Thing1 : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & typeof Derived
 >1 : 1
 >2 : 2
 >3 : 3

     thing.x;
 >thing.x : number
->thing : Tagged<typeof Derived>.C & Derived
+>thing : Tagged.C & Derived
 >x : number

     thing._tag;
 >thing._tag : string
->thing : Tagged<typeof Derived>.C & Derived
+>thing : Tagged.C & Derived
 >_tag : string
 }

@@= skipped -48, +48 lines =@@
 >f2 : () => void

     const thing = new Thing2(1, 2, 3);
->thing : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
->new Thing2(1, 2, 3) : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
->Thing2 : { new (...args: any[]): Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C; prototype: Tagged<any>.C; } & { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
+>thing : Tagged.C & Printable.(Anonymous class) & Derived
+>new Thing2(1, 2, 3) : Tagged.C & Printable.(Anonymous class) & Derived
+>Thing2 : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
 >1 : 1
 >2 : 2
 >3 : 3

     thing.x;
 >thing.x : number
->thing : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
+>thing : Tagged.C & Printable.(Anonymous class) & Derived
 >x : number

     thing._tag;
 >thing._tag : string
->thing : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
+>thing : Tagged.C & Printable.(Anonymous class) & Derived
 >_tag : string

     thing.print();
 >thing.print() : void
 >thing.print : () => void
->thing : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
+>thing : Tagged.C & Printable.(Anonymous class) & Derived
 >print : () => void
 }

 class Thing3 extends Thing2 {
 >Thing3 : Thing3
->Thing2 : Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C & Printable<typeof Derived>.(Anonymous class) & Derived
+>Thing2 : Tagged.C & Printable.(Anonymous class) & Derived

     constructor(tag: string) {
 >tag : string

         super(10, 20, 30);
 >super(10, 20, 30) : void
->super : { new (...args: any[]): Tagged<{ new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived>.C; prototype: Tagged<any>.C; } & { new (...args: any[]): Printable<typeof Derived>.(Anonymous class); message: string; prototype: Printable<any>.(Anonymous class); } & typeof Derived
+>super : { new (...args: any[]): Tagged.C; prototype: Tagged.C; } & { new (...args: any[]): Printable.(Anonymous class); message: string; prototype: Printable.(Anonymous class); } & typeof Derived
 >10 : 10
 >20 : 20
 >30 : 30
@@= skipped -59, +59 lines =@@
 // Repro from #13805

 const Timestamped = <CT extends Constructor<object>>(Base: CT) => {
->Timestamped : <CT extends Constructor<object>>(Base: CT) => { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); } & CT
-><CT extends Constructor<object>>(Base: CT) => {    return class extends Base {        timestamp = new Date();    };} : <CT extends Constructor<object>>(Base: CT) => { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); } & CT
+>Timestamped : <CT extends Constructor<object>>(Base: CT) => { new (...args: any[]): (Anonymous class); prototype: Timestamped.(Anonymous class); } & CT
+><CT extends Constructor<object>>(Base: CT) => {    return class extends Base {        timestamp = new Date();    };} : <CT extends Constructor<object>>(Base: CT) => { new (...args: any[]): (Anonymous class); prototype: Timestamped.(Anonymous class); } & CT
 >Base : CT

     return class extends Base {
->class extends Base {        timestamp = new Date();    } : { new (...args: any[]): (Anonymous class); prototype: Timestamped<any>.(Anonymous class); } & CT
+>class extends Base {        timestamp = new Date();    } : { new (...args: any[]): (Anonymous class); prototype: Timestamped.(Anonymous class); } & CT
 >Base : object

         timestamp = new Date();
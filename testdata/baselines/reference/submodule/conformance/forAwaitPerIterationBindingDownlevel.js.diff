--- old.forAwaitPerIterationBindingDownlevel.js
+++ new.forAwaitPerIterationBindingDownlevel.js
@@= skipped -26, +26 lines =@@
 })();

 //// [forAwaitPerIterationBindingDownlevel.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
-var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var g = generator.apply(thisArg, _arguments || []), i, q = [];
-    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
-    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
-    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
-    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
-    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
-    function fulfill(value) { resume("next", value); }
-    function reject(value) { resume("throw", value); }
-    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
-};
-var __asyncValues = (this && this.__asyncValues) || function (o) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var m = o[Symbol.asyncIterator], i;
-    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
-    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
-    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
-};
 const sleep = (tm) => new Promise(resolve => setTimeout(resolve, tm));
-function gen() {
-    return __asyncGenerator(this, arguments, function* gen_1() {
-        yield yield __await(1);
-        yield __await(sleep(1000));
-        yield yield __await(2);
-    });
+async function* gen() {
+    yield 1;
+    await sleep(1000);
+    yield 2;
 }
 const log = console.log;
-(() => __awaiter(this, void 0, void 0, function* () {
-    var _a, e_1, _b, _c;
-    try {
-        for (var _d = true, _e = __asyncValues(gen()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
-            _c = _f.value;
-            _d = false;
-            const outer = _c;
-            log(`I'm loop ${outer}`);
-            (() => __awaiter(this, void 0, void 0, function* () {
-                const inner = outer;
-                yield sleep(2000);
-                if (inner === outer) {
-                    log(`I'm loop ${inner} and I know I'm loop ${outer}`);
-                }
-                else {
-                    log(`I'm loop ${inner}, but I think I'm loop ${outer}`);
-                }
-            }))();
-        }
-    }
-    catch (e_1_1) { e_1 = { error: e_1_1 }; }
-    finally {
-        try {
-            if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
-        }
-        finally { if (e_1) throw e_1.error; }
-    }
-}))();
+(async () => {
+    for await (const outer of gen()) {
+        log(`I'm loop ${outer}`);
+        (async () => {
+            const inner = outer;
+            await sleep(2000);
+            if (inner === outer) {
+                log(`I'm loop ${inner} and I know I'm loop ${outer}`);
+            }
+            else {
+                log(`I'm loop ${inner}, but I think I'm loop ${outer}`);
+            }
+        })();
+    }
+})();
--- old.parserRealSource10.js
+++ new.parserRealSource10.js
@@= skipped -629, +629 lines =@@
         Reservation[Reservation["TypeScriptAndJSFutureStrict"] = 12] = "TypeScriptAndJSFutureStrict";
     })(Reservation = TypeScript.Reservation || (TypeScript.Reservation = {}));
     class TokenInfo {
+        tokenId;
+        reservation;
+        binopPrecedence;
+        binopNodeType;
+        unopPrecedence;
+        unopNodeType;
+        text;
+        ers;
         constructor(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
             this.tokenId = tokenId;
             this.reservation = reservation;
@@= skipped -150, +158 lines =@@
         TokenClass[TokenClass["Literal"] = 6] = "Literal";
     })(TokenClass = TypeScript.TokenClass || (TypeScript.TokenClass = {}));
     class SavedToken {
+        tok;
+        minChar;
+        limChar;
         constructor(tok, minChar, limChar) {
             this.tok = tok;
             this.minChar = minChar;
@@= skipped -8, +11 lines =@@
     }
     TypeScript.SavedToken = SavedToken;
     class Token {
+        tokenId;
         constructor(tokenId) {
             this.tokenId = tokenId;
         }
@@= skipped -30, +31 lines =@@
     }
     TypeScript.Token = Token;
     class NumberLiteralToken extends Token {
+        value;
+        hasEmptyFraction;
         constructor(value, hasEmptyFraction) {
             super(TokenID.NumberLiteral);
             this.value = value;
@@= skipped -14, +16 lines =@@
     }
     TypeScript.NumberLiteralToken = NumberLiteralToken;
     class StringLiteralToken extends Token {
+        value;
         constructor(value) {
             super(TokenID.StringLiteral);
             this.value = value;
@@= skipped -13, +14 lines =@@
     }
     TypeScript.StringLiteralToken = StringLiteralToken;
     class IdentifierToken extends Token {
+        value;
+        hasEscapeSequence;
         constructor(value, hasEscapeSequence) {
             super(TokenID.Identifier);
             this.value = value;
@@= skipped -14, +16 lines =@@
     }
     TypeScript.IdentifierToken = IdentifierToken;
     class WhitespaceToken extends Token {
+        value;
         constructor(tokenId, value) {
             super(tokenId);
             this.value = value;
@@= skipped -13, +14 lines =@@
     }
     TypeScript.WhitespaceToken = WhitespaceToken;
     class CommentToken extends Token {
+        value;
+        isBlock;
+        startPos;
+        line;
+        endsLine;
         constructor(tokenID, value, isBlock, startPos, line, endsLine) {
             super(tokenID);
             this.value = value;
@@= skipped -17, +22 lines =@@
     }
     TypeScript.CommentToken = CommentToken;
     class RegularExpressionLiteralToken extends Token {
+        regex;
         constructor(regex) {
             super(TokenID.RegularExpressionLiteral);
             this.regex = regex;
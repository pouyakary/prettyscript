--- old.checkJsdocSatisfiesTag15.js
+++ new.checkJsdocSatisfiesTag15.js
@@= skipped -50, +50 lines =@@
 exports.fn6 = exports.fn5 = exports.fn4 = exports.fn3 = exports.fn2 = exports.v2 = exports.v1 = exports.fn1 = void 0;
 exports.fn7 = fn7;
 /** @satisfies {(uuid: string) => void} */
-const fn1 = uuid => { };
-exports.fn1 = fn1;
+exports.fn1 = uuid => { };
 /** @typedef {Parameters<typeof fn1>} Foo */
 /** @type Foo */
 exports.v1 = ['abc'];
 /** @type Foo */
 exports.v2 = [123]; // error
 /** @satisfies {(a: string, ...args: never) => void} */
-const fn2 = (a, b) => { };
-exports.fn2 = fn2;
+exports.fn2 = (a, b) => { };
 /**
  * @satisfies {(a: string, ...args: never) => void}
  * @param {string} a
  */
-const fn3 = (a, b) => { };
-exports.fn3 = fn3;
+exports.fn3 = (a, b) => { };
 /**
  * @satisfies {(a: string, ...args: never) => void}
  * @param {string} a
  * @param {number} b
  */
-const fn4 = (a, b) => { };
-exports.fn4 = fn4;
+exports.fn4 = (a, b) => { };
 /**
  * @satisfies {(a: string, ...args: number[]) => void}
  * @param {string} a
  * @param {string} b
  */
-const fn5 = (a, b) => { };
-exports.fn5 = fn5;
+exports.fn5 = (a, b) => { };
 /**
  * @satisfies {(a: string, ...args: number[]) => void}
  * @param {string} a
  * @param {string | number} b
  */
-const fn6 = (a, b) => { };
-exports.fn6 = fn6;
+exports.fn6 = (a, b) => { };
 /** @satisfies {(uuid: string) => void} */
 function fn7(uuid) { }


 //// [a.d.ts]
 /** @satisfies {(uuid: string) => void} */
-export function fn7(uuid: any): void;
-export function fn1(uuid: string): void;
-/** @typedef {Parameters<typeof fn1>} Foo */
-/** @type Foo */
-export const v1: Foo;
-/** @type Foo */
-export const v2: Foo;
-export function fn2(a: string, b: never): void;
-export function fn3(a: string, b: never): void;
-export function fn4(a: string, b: number): void;
-export function fn5(a: string, b: string): void;
-export function fn6(a: string, b: string | number): void;
+export declare const fn1: (uuid: string) => void;
 export type Foo = Parameters<typeof fn1>;
+/** @typedef {Parameters<typeof fn1>} Foo */
+/** @type Foo */
+export declare const v1: Foo;
+/** @type Foo */
+export declare const v2: Foo;
+/** @satisfies {(a: string, ...args: never) => void} */
+export declare const fn2: (a: string, b: never) => void;
+/**
+ * @satisfies {(a: string, ...args: never) => void}
+ * @param {string} a
+ */
+export declare const fn3: (a: string, b: never) => void;
+/**
+ * @satisfies {(a: string, ...args: never) => void}
+ * @param {string} a
+ * @param {number} b
+ */
+export declare const fn4: (a: string, b: never) => void;
+/**
+ * @satisfies {(a: string, ...args: number[]) => void}
+ * @param {string} a
+ * @param {string} b
+ */
+export declare const fn5: (a: string, b: number) => void;
+/**
+ * @satisfies {(a: string, ...args: number[]) => void}
+ * @param {string} a
+ * @param {string | number} b
+ */
+export declare const fn6: (a: string, b: number) => void;
+/** @satisfies {(uuid: string) => void} */
+export declare function fn7(uuid: any): void;
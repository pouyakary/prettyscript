--- old.chainedPrototypeAssignment.symbols
+++ new.chainedPrototypeAssignment.symbols
@@= skipped -19, +19 lines =@@
 >B : Symbol(mod.B, Decl(mod.js, 7, 13))

 a.m('nope')
->a.m : Symbol(m, Decl(mod.js, 9, 29))
 >a : Symbol(a, Decl(use.js, 2, 3))
->m : Symbol(m, Decl(mod.js, 9, 29))

 b.m('not really')
->b.m : Symbol(m, Decl(mod.js, 9, 29))
 >b : Symbol(b, Decl(use.js, 3, 3))
->m : Symbol(m, Decl(mod.js, 9, 29))

 === types.d.ts ===
 declare function require(name: string): any;
@@= skipped -20, +16 lines =@@
 === mod.js ===
 /// <reference path='./types.d.ts'/>
 var A = function A() {
->A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))
+>A : Symbol(A, Decl(mod.js, 1, 3))
 >A : Symbol(A, Decl(mod.js, 1, 7))

     this.a = 1
->this.a : Symbol(A.a, Decl(mod.js, 1, 22))
->this : Symbol(A, Decl(mod.js, 1, 7))
->a : Symbol(A.a, Decl(mod.js, 1, 22))
 }
 var B = function B() {
->B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))
+>B : Symbol(B, Decl(mod.js, 4, 3))
 >B : Symbol(B, Decl(mod.js, 4, 7))

     this.b = 2
->this.b : Symbol(B.b, Decl(mod.js, 4, 22))
->this : Symbol(B, Decl(mod.js, 4, 7))
->b : Symbol(B.b, Decl(mod.js, 4, 22))
 }
 exports.A = A
 >exports.A : Symbol(A, Decl(mod.js, 6, 1))
->exports : Symbol(A, Decl(mod.js, 6, 1))
+>exports : Symbol("mod", Decl(mod.js, 0, 0))
 >A : Symbol(A, Decl(mod.js, 6, 1))
->A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))
+>A : Symbol(A, Decl(mod.js, 1, 3))

 exports.B = B
 >exports.B : Symbol(B, Decl(mod.js, 7, 13))
->exports : Symbol(B, Decl(mod.js, 7, 13))
+>exports : Symbol("mod", Decl(mod.js, 0, 0))
 >B : Symbol(B, Decl(mod.js, 7, 13))
->B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))
+>B : Symbol(B, Decl(mod.js, 4, 3))

 A.prototype = B.prototype = {
 >A.prototype : Symbol(A.prototype, Decl(mod.js, 8, 13))
->A : Symbol(A, Decl(mod.js, 1, 3), Decl(mod.js, 8, 13))
+>A : Symbol(A, Decl(mod.js, 1, 3))
 >prototype : Symbol(A.prototype, Decl(mod.js, 8, 13))
 >B.prototype : Symbol(B.prototype, Decl(mod.js, 9, 13))
->B : Symbol(B, Decl(mod.js, 4, 3), Decl(mod.js, 9, 13))
+>B : Symbol(B, Decl(mod.js, 4, 3))
 >prototype : Symbol(B.prototype, Decl(mod.js, 9, 13))

     /** @param {number} n */
--- old.jsDeclarationsFunctionClassesCjsExportAssignment.js
+++ new.jsDeclarationsFunctionClassesCjsExportAssignment.js
@@= skipped -77, +77 lines =@@
 function Timer(timeout) {
     this.timeout = timeout;
 }
+export = Timer;
 module.exports = Timer;
 //// [context.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 /**
  * Imports
  *
@@= skipped -45, +48 lines =@@
         return input;
     }
 };
+export = Context;
 module.exports = Context;
 //// [hook.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 /**
  * @typedef {(arg: import("./context")) => void} HookHandler
  */
@@= skipped -11, +14 lines =@@
 function Hook(handle) {
     this.handle = handle;
 }
+export = Hook;
 module.exports = Hook;


 //// [timer.d.ts]
 export = Timer;
-/**
- * @param {number} timeout
- */
-declare function Timer(timeout: number): void;
-declare class Timer {
-    /**
-     * @param {number} timeout
-     */
-    constructor(timeout: number);
-    timeout: number;
-}
 //// [context.d.ts]
+export type Timer = import("./timer");
+export type Hook = import("./hook");
+export type HookHandler = import("./hook").HookHandler;
+export type Input = {
+    timer: Timer;
+    hook: Hook;
+};
+export type State = {
+    timer: Timer;
+    hook: Hook;
+};
 export = Context;
-/**
- * Imports
- *
- * @typedef {import("./timer")} Timer
- * @typedef {import("./hook")} Hook
- * @typedef {import("./hook").HookHandler} HookHandler
- */
-/**
- * Input type definition
- *
- * @typedef {Object} Input
- * @prop {Timer} timer
- * @prop {Hook} hook
- */
-/**
- * State type definition
- *
- * @typedef {Object} State
- * @prop {Timer} timer
- * @prop {Hook} hook
- */
-/**
- * New `Context`
- *
- * @class
- * @param {Input} input
- */
-declare function Context(input: Input): Context;
-declare class Context {
-    /**
-     * Imports
-     *
-     * @typedef {import("./timer")} Timer
-     * @typedef {import("./hook")} Hook
-     * @typedef {import("./hook").HookHandler} HookHandler
-     */
-    /**
-     * Input type definition
-     *
-     * @typedef {Object} Input
-     * @prop {Timer} timer
-     * @prop {Hook} hook
-     */
-    /**
-     * State type definition
-     *
-     * @typedef {Object} State
-     * @prop {Timer} timer
-     * @prop {Hook} hook
-     */
-    /**
-     * New `Context`
-     *
-     * @class
-     * @param {Input} input
-     */
-    constructor(input: Input);
-    state: any;
-    /**
-     * @param {Input} input
-     * @param {HookHandler=} handle
-     * @returns {State}
-     */
-    construct(input: Input, handle?: HookHandler | undefined): State;
-}
-declare namespace Context {
-    export { Timer, Hook, HookHandler, Input, State };
-}
-/**
- * Imports
- */
-type Timer = import("./timer");
-/**
- * Imports
- */
-type Hook = import("./hook");
-/**
- * Imports
- */
-type HookHandler = import("./hook").HookHandler;
-/**
- * Input type definition
- */
-type Input = {
-    timer: Timer;
-    hook: Hook;
-};
-/**
- * State type definition
- */
-type State = {
-    timer: Timer;
-    hook: Hook;
-};
 //// [hook.d.ts]
+export type HookHandler = (arg: import("./context")) => void;
 export = Hook;
-/**
- * @typedef {(arg: import("./context")) => void} HookHandler
- */
-/**
- * @param {HookHandler} handle
- */
-declare function Hook(handle: HookHandler): void;
-declare class Hook {
-    /**
-     * @typedef {(arg: import("./context")) => void} HookHandler
-     */
-    /**
-     * @param {HookHandler} handle
-     */
-    constructor(handle: HookHandler);
-    handle: HookHandler;
-}
-declare namespace Hook {
-    export { HookHandler };
-}
-type HookHandler = (arg: import("./context")) => void;
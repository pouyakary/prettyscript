--- old.jsDeclarationsClasses.js
+++ new.jsDeclarationsClasses.js
@@= skipped -202, +202 lines =@@
 class A {
 }
 exports.A = A;
-let B = (() => {
-    class B {
-    }
-    B.cat = "cat";
-    return B;
-})();
+class B {
+    static cat = "cat";
+}
 exports.B = B;
-let C = (() => {
-    class C {
-    }
-    C.Cls = class {
+class C {
+    static Cls = class {
     };
-    return C;
-})();
+}
 exports.C = C;
 class D {
     /**
@@= skipped -26, +20 lines =@@
 /**
  * @template T,U
  */
-let E = (() => {
-    class E {
-        /**
-         * @return {U}
-         */
-        get f1() { return /** @type {*} */ (null); }
-        /**
-         * @param {U} _p
-         */
-        set f1(_p) { }
-        /**
-         * @return {U}
-         */
-        get f2() { return /** @type {*} */ (null); }
-        /**
-         * @param {U} _p
-         */
-        set f3(_p) { }
-        /**
-         * @param {T} a
-         * @param {U} b
-         */
-        constructor(a, b) {
-            this.initializedField = 12;
-        }
-        /**
-         * @return {string}
-         */
-        static get s1() { return ""; }
-        /**
-         * @param {string} _p
-         */
-        static set s1(_p) { }
-        /**
-         * @return {string}
-         */
-        static get s2() { return ""; }
-        /**
-         * @param {string} _p
-         */
-        static set s3(_p) { }
-    }
-    E.staticInitializedField = 12;
-    return E;
-})();
+class E {
+    /**
+     * @type {T & U}
+     */
+    field;
+    // @readonly is currently unsupported, it seems - included here just in case that changes
+    /**
+     * @type {T & U}
+     * @readonly
+     */
+    readonlyField;
+    initializedField = 12;
+    /**
+     * @return {U}
+     */
+    get f1() { return /** @type {*} */ null; }
+    /**
+     * @param {U} _p
+     */
+    set f1(_p) { }
+    /**
+     * @return {U}
+     */
+    get f2() { return /** @type {*} */ null; }
+    /**
+     * @param {U} _p
+     */
+    set f3(_p) { }
+    /**
+     * @param {T} a
+     * @param {U} b
+     */
+    constructor(a, b) { }
+    /**
+     * @type {string}
+     */
+    static staticField;
+    // @readonly is currently unsupported, it seems - included here just in case that changes
+    /**
+     * @type {string}
+     * @readonly
+     */
+    static staticReadonlyField;
+    static staticInitializedField = 12;
+    /**
+     * @return {string}
+     */
+    static get s1() { return ""; }
+    /**
+     * @param {string} _p
+     */
+    static set s1(_p) { }
+    /**
+     * @return {string}
+     */
+    static get s2() { return ""; }
+    /**
+     * @param {string} _p
+     */
+    static set s3(_p) { }
+}
 exports.E = E;
 /**
  * @template T,U
  */
 class F {
     /**
+     * @type {T & U}
+     */
+    field;
+    /**
      * @param {T} a
      * @param {U} b
      */
@@= skipped -123, +143 lines =@@
     }
 }
 exports.O = O;
-var x = /** @type {*} */ (null);
+var x = /** @type {*} */ null;
 class VariableBase extends x {
 }
 exports.VariableBase = VariableBase;
@@= skipped -15, +15 lines =@@


 //// [index.d.ts]
-export class A {
+export declare class A {
 }
-export class B {
+export declare class B {
     static cat: string;
 }
-export class C {
+export declare class C {
     static Cls: {
         new (): {};
     };
 }
-export class D {
+export declare class D {
     /**
      * @param {number} a
      * @param {number} b
@@= skipped -20, +20 lines =@@
 /**
  * @template T,U
  */
-export class E<T, U> {
+export declare class E<T, U> {
+    /**
+     * @type {T & U}
+     */
+    field: T & U;
+    /**
+     * @type {T & U}
+     * @readonly
+     */
+    readonly readonlyField: T & U;
+    initializedField: number;
+    /**
+     * @return {U}
+     */
+    get f1(): U;
+    /**
+     * @param {U} _p
+     */
+    set f1(_p: U);
+    /**
+     * @return {U}
+     */
+    get f2(): U;
+    /**
+     * @param {U} _p
+     */
+    set f3(_p: U);
+    /**
+     * @param {T} a
+     * @param {U} b
+     */
+    constructor(a: T, b: U);
     /**
      * @type {string}
      */
@@= skipped -12, +43 lines =@@
     static readonly staticReadonlyField: string;
     static staticInitializedField: number;
     /**
-     * @param {string} _p
-     */
-    static set s1(_p: string);
-    /**
      * @return {string}
      */
     static get s1(): string;
     /**
+     * @param {string} _p
+     */
+    static set s1(_p: string);
+    /**
      * @return {string}
      */
     static get s2(): string;
@@= skipped -15, +15 lines =@@
      * @param {string} _p
      */
     static set s3(_p: string);
-    /**
-     * @param {T} a
-     * @param {U} b
-     */
-    constructor(a: T, b: U);
-    /**
-     * @type {T & U}
-     */
-    field: T & U;
-    /**
-     * @type {T & U}
-     * @readonly
-     */
-    readonly readonlyField: T & U;
-    initializedField: number;
-    /**
-     * @param {U} _p
-     */
-    set f1(_p: U);
-    /**
-     * @return {U}
-     */
-    get f1(): U;
-    /**
-     * @return {U}
-     */
-    get f2(): U;
-    /**
-     * @param {U} _p
-     */
-    set f3(_p: U);
 }
 /**
  * @template T,U
  */
-export class F<T, U> {
+export declare class F<T, U> {
+    /**
+     * @type {T & U}
+     */
+    field: T & U;
+    /**
+     * @param {T} a
+     * @param {U} b
+     */
+    constructor(a: T, b: U);
     /**
      * @template A,B
      * @param {A} a
      * @param {B} b
      */
     static create<A, B>(a: A, b: B): F<A, B>;
-    /**
-     * @param {T} a
-     * @param {U} b
-     */
-    constructor(a: T, b: U);
-    /**
-     * @type {T & U}
-     */
-    field: T & U;
-}
-export class I {
-}
-export class J {
-}
-export class K {
-    p1: number;
-    p2: string;
+}
+declare class G {
+}
+export { G };
+declare class HH {
+}
+export { HH as H };
+export declare class I {
+}
+export { I as II };
+export { J as JJ };
+export declare class J {
+}
+export declare class K {
+    constructor();
     method(): number;
 }
-export class L extends K {
+export declare class L extends K {
 }
-export class M {
-    prop: number;
+export declare class M extends null {
+    constructor();
 }
 /**
  * @template T
  */
-export class N<T> extends L {
+export declare class N<T> extends L {
     /**
      * @param {T} param
      */
     constructor(param: T);
-    another: T;
 }
 /**
  * @template U
  * @extends {N<U>}
  */
-export class O<U> extends N<U> {
-    another2: U;
-}
-declare const VariableBase_base: any;
-export class VariableBase extends VariableBase_base {
-    [x: string]: any;
-}
-export class HasStatics {
+export declare class O<U> extends N<U> {
+    /**
+     * @param {U} param
+     */
+    constructor(param: U);
+}
+declare var x: any;
+export declare class VariableBase extends x {
+}
+export declare class HasStatics {
     static staticMethod(): void;
 }
-export class ExtendsStatics extends HasStatics {
+export declare class ExtendsStatics extends HasStatics {
     static also(): void;
 }
-export class G {
-}
-declare class HH {
-}
-export { HH as H, I as II, J as JJ };
--- old.jsDeclarationsImportAliasExposedWithinNamespaceCjs.js
+++ new.jsDeclarationsImportAliasExposedWithinNamespaceCjs.js
@@= skipped -53, +53 lines =@@


 //// [file.d.ts]
+export type myTypes = string | RegExp | Array<string | RegExp>;
+export type myTypes = {
+    prop1: myTypes.typeA;
+    prop2: string;
+};
+export type myTypes = myTypes.typeB | Function;
+/** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */
 /**
- * @namespace myTypes
- * @global
- * @type {Object<string,*>}
+ * @typedef myTypes.typeB
+ * @property {myTypes.typeA}    prop1 - Prop 1.
+ * @property {string}           prop2 - Prop 2.
  */
-export const myTypes: {
-    [x: string]: any;
-};
-export namespace myTypes {
-    type typeA = string | RegExp | Array<string | RegExp>;
-    type typeB = {
-        /**
-         * - Prop 1.
-         */
-        prop1: myTypes.typeA;
-        /**
-         * - Prop 2.
-         */
-        prop2: string;
-    };
-    type typeC = myTypes.typeB | Function;
-}
+/** @typedef {myTypes.typeB|Function} myTypes.typeC */
+export var myTypes = myTypes;
 //// [file2.d.ts]
+export type testFnTypes = boolean | myTypes.typeC;
 /** @typedef {boolean|myTypes.typeC} testFnTypes.input */
 /**
  * @function testFn
@@= skipped -30, +23 lines =@@
  * @param {testFnTypes.input} input - Input.
  * @returns {number|null} Result.
  */
-export function testFn(input: testFnTypes.input): number | null;
-/**
- * @namespace testFnTypes
- * @global
- * @type {Object<string,*>}
- */
-export const testFnTypes: {
-    [x: string]: any;
+declare function testFn(input: testFnTypes.input): number | null;
+declare const _default: {
+    testFn: typeof testFn;
+    testFnTypes: any;
 };
-export namespace testFnTypes {
-    type input = boolean | myTypes.typeC;
-}
-import { myTypes } from "./file.js";
+export = _default;
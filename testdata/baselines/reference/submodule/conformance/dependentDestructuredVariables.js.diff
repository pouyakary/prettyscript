--- old.dependentDestructuredVariables.js
+++ new.dependentDestructuredVariables.js
@@= skipped -467, +467 lines =@@


 //// [dependentDestructuredVariables.js]
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
-var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var g = generator.apply(thisArg, _arguments || []), i, q = [];
-    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
-    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
-    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
-    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
-    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
-    function fulfill(value) { resume("next", value); }
-    function reject(value) { resume("throw", value); }
-    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
-};
 function f10({ kind, payload }) {
     if (kind === 'A') {
         payload.toFixed();
@@= skipped -217, +194 lines =@@
     }
 };
 let fooAsyncM = {
-    method(type, cb) {
-        return __awaiter(this, void 0, void 0, function* () {
-            if (type == 'num') {
-                cb(123);
-            }
-            else {
-                cb("abc");
-            }
-        });
+    async method(type, cb) {
+        if (type == 'num') {
+            cb(123);
+        }
+        else {
+            cb("abc");
+        }
     }
 };
 let fooGenM = {
@@= skipped -22, +20 lines =@@
     }
 };
 let fooAsyncGenM = {
-    method(type, cb) {
-        return __asyncGenerator(this, arguments, function* method_1() {
-            if (type == 'num') {
-                cb(123);
-            }
-            else {
-                cb("abc");
-            }
-        });
+    async *method(type, cb) {
+        if (type == 'num') {
+            cb(123);
+        }
+        else {
+            cb("abc");
+        }
     }
 };
 const f60 = (kind, payload) => {
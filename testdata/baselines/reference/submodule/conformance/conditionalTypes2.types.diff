--- old.conditionalTypes2.types
+++ new.conditionalTypes2.types
@@= skipped -248, +248 lines =@@
 >x : T

     partition2<U extends T>(predicate:(v:T)=>boolean): [Vector<U>,Vector<any>] {
->partition2 : { <U_1 extends T>(predicate: (v: T) => v is U_1): [Vector<U_1>, Vector<Exclude<T, U_1>>]; (predicate: (x: T) => boolean): [Vector<T>, Vector<T>]; }
+>partition2 : { <U extends T>(predicate: (v: T) => v is U): [Vector<U>, Vector<Exclude<T, U>>]; (predicate: (x: T) => boolean): [Vector<T>, Vector<T>]; }
 >predicate : (v: T) => boolean
 >v : T

@@= skipped -202, +202 lines =@@
 // Repro from #33568

 declare function save(_response: IRootResponse<string>): void;
->save : (_response: IRootResponse<string>) => void
+>save : (_response: IResponse<string>) => void
 >_response : IResponse<string>

 exportCommand(save);
 >exportCommand(save) : void
 >exportCommand : <TResponse>(functionToCall: IExportCallback<TResponse>) => void
->save : (_response: IRootResponse<string>) => void
+>save : (_response: IResponse<string>) => void

 declare function exportCommand<TResponse>(functionToCall: IExportCallback<TResponse>): void;
 >exportCommand : <TResponse>(functionToCall: IExportCallback<TResponse>) => void
@@= skipped -39, +39 lines =@@
 >IResponse : IResponse<T>

 	sendValue(name: keyof GetAllPropertiesOfType<T, string>): void;
->sendValue : (name: keyof GetAllPropertiesOfType<T, string>) => void
+>sendValue : (name: GetPropertyNamesOfType<Required<T>, string>) => void
 >name : GetPropertyNamesOfType<Required<T>, string>

 };
@@= skipped -21, +21 lines =@@
 // Repro from #33568

 declare function ff(x: Foo3<string>): void;
->ff : (x: Foo3<string>) => void
+>ff : (x: { x: string; }) => void
 >x : { x: string; }

 declare function gg<T>(f: (x: Foo3<T>) => void): void;
@@= skipped -16, +16 lines =@@
 gg(ff);
 >gg(ff) : void
 >gg : <T>(f: (x: Foo3<T>) => void) => void
->ff : (x: Foo3<string>) => void
+>ff : (x: { x: string; }) => void

 // Repro from #41613

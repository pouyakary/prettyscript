index.cts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
index.mts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder/index.cts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder/index.mts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder2/another/index.cts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder2/another/index.mts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder2/index.cts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
subfolder2/index.mts(2,12): error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.


==== subfolder/index.ts (0 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
    export {x};
==== subfolder/index.cts (1 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== subfolder/index.mts (1 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== subfolder2/index.ts (0 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
    export {x};
==== subfolder2/index.cts (1 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== subfolder2/index.mts (1 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== subfolder2/another/index.ts (0 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
    export {x};
==== subfolder2/another/index.mts (1 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== subfolder2/another/index.cts (1 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== index.mts (1 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== index.cts (1 errors) ====
    // cjs format file
    const x = <T>() => <T><any>(void 0);
               ~
!!! error TS7060: This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint.
    export {x};
==== index.ts (0 errors) ====
    // esm format file
    const x = <T>() => <T><any>(void 0);
    export {x};
==== package.json (0 errors) ====
    {
        "name": "package",
        "private": true,
        "type": "module"
    }
==== subfolder/package.json (0 errors) ====
    {
        "type": "commonjs"
    }
==== subfolder2/package.json (0 errors) ====
    {
    }
==== subfolder2/another/package.json (0 errors) ====
    {
        "type": "module"
    }
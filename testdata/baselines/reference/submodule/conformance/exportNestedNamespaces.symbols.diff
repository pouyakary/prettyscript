--- old.exportNestedNamespaces.symbols
+++ new.exportNestedNamespaces.symbols
@@= skipped -1, +1 lines =@@

 === mod.js ===
 exports.n = {};
->exports.n : Symbol(n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
->exports : Symbol(n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
->n : Symbol(n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
+>exports.n : Symbol(n, Decl(mod.js, 0, 0))
+>exports : Symbol("mod", Decl(mod.js, 0, 0))
+>n : Symbol(n, Decl(mod.js, 0, 0))

 exports.n.K = function () {
->exports.n.K : Symbol(n.K, Decl(mod.js, 0, 15))
->exports.n : Symbol(n.K, Decl(mod.js, 0, 15))
+>exports.n : Symbol(n, Decl(mod.js, 0, 0))
 >exports : Symbol("mod", Decl(mod.js, 0, 0))
->n : Symbol(n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
->K : Symbol(n.K, Decl(mod.js, 0, 15))
+>n : Symbol(n, Decl(mod.js, 0, 0))

     this.x = 10;
->this.x : Symbol(K.x, Decl(mod.js, 1, 27))
->this : Symbol(K, Decl(mod.js, 1, 13))
->x : Symbol(K.x, Decl(mod.js, 1, 27))
 }
 exports.Classic = class {
 >exports.Classic : Symbol(Classic, Decl(mod.js, 3, 1))
->exports : Symbol(Classic, Decl(mod.js, 3, 1))
+>exports : Symbol("mod", Decl(mod.js, 0, 0))
 >Classic : Symbol(Classic, Decl(mod.js, 3, 1))

     constructor() {
@@= skipped -35, +30 lines =@@

 var k = new s.n.K()
 >k : Symbol(k, Decl(use.js, 2, 3))
->s.n.K : Symbol(s.n.K, Decl(mod.js, 0, 15))
->s.n : Symbol(s.n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
+>s.n : Symbol(s.n, Decl(mod.js, 0, 0))
 >s : Symbol(s, Decl(use.js, 0, 6))
->n : Symbol(s.n, Decl(mod.js, 0, 0), Decl(mod.js, 1, 8))
->K : Symbol(s.n.K, Decl(mod.js, 0, 15))
+>n : Symbol(s.n, Decl(mod.js, 0, 0))

 k.x
->k.x : Symbol(K.x, Decl(mod.js, 1, 27))
 >k : Symbol(k, Decl(use.js, 2, 3))
->x : Symbol(K.x, Decl(mod.js, 1, 27))

 var classic = new s.Classic()
 >classic : Symbol(classic, Decl(use.js, 4, 3))
@@= skipped -26, +22 lines =@@
 >classic : Symbol(classic, Decl(use.js, 9, 13))

     c.x
->c.x : Symbol(K.x, Decl(mod.js, 1, 27))
 >c : Symbol(c, Decl(use.js, 9, 11))
->x : Symbol(K.x, Decl(mod.js, 1, 27))

     classic.p
->classic.p : Symbol(s.Classic.p, Decl(mod.js, 5, 19))
 >classic : Symbol(classic, Decl(use.js, 9, 13))
->p : Symbol(s.Classic.p, Decl(mod.js, 5, 19))
 }


//// [tests/cases/conformance/salsa/contextualTypedSpecialAssignment.ts] ////

=== test.js ===
/** @typedef {{
    status: 'done'
    m(n: number): void
}} DoneStatus */

// property assignment
var ns = {}
>ns : { x: DoneStatus; }
>{} : { x: DoneStatus; }

/** @type {DoneStatus} */
ns.x = {
>ns.x = {    status: 'done',    m(n) { }} : { status: "done"; m(n: number): void; }
>ns.x : DoneStatus
>ns : { x: DoneStatus; }
>x : DoneStatus
>{    status: 'done',    m(n) { }} : { status: "done"; m(n: number): void; }

    status: 'done',
>status : "done"
>'done' : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}

ns.x = {
>ns.x = {    status: 'done',    m(n) { }} : { status: string; m(n: any): void; }
>ns.x : DoneStatus
>ns : { x: DoneStatus; }
>x : DoneStatus
>{    status: 'done',    m(n) { }} : { status: string; m(n: any): void; }

    status: 'done',
>status : string
>'done' : "done"

    m(n) { }
>m : (n: any) => void
>n : any
}
ns.x
>ns.x : DoneStatus
>ns : { x: DoneStatus; }
>x : DoneStatus


// this-property assignment
class Thing {
>Thing : Thing

    constructor() {
        /** @type {DoneStatus} */
        this.s = {
>this.s = {            status: 'done',            m(n) { }        } : { status: "done"; m(n: number): void; }
>this.s : DoneStatus
>this : this
>s : DoneStatus
>{            status: 'done',            m(n) { }        } : { status: "done"; m(n: number): void; }

            status: 'done',
>status : "done"
>'done' : "done"

            m(n) { }
>m : (n: number) => void
>n : number
        }
    }

    fail() {
>fail : () => void

        this.s = {
>this.s = {            status: 'done',            m(n) { }        } : { status: "done"; m(n: number): void; }
>this.s : DoneStatus
>this : this
>s : DoneStatus
>{            status: 'done',            m(n) { }        } : { status: "done"; m(n: number): void; }

            status: 'done',
>status : "done"
>'done' : "done"

            m(n) { }
>m : (n: number) => void
>n : number
        }
    }
}

// exports-property assignment

/** @type {DoneStatus} */
exports.x = {
>exports.x = {    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }
>exports.x : { status: "done"; m(n: number): void; }
>exports : typeof import("test")
>x : { status: "done"; m(n: number): void; }
>{    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }

    status: "done",
>status : "done"
>"done" : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}
exports.x
>exports.x : { status: "done"; m(n: number): void; }
>exports : typeof import("test")
>x : { status: "done"; m(n: number): void; }

/** @type {DoneStatus} */
module.exports.y = {
>module.exports.y = {    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }
>module.exports.y : { status: "done"; m(n: number): void; }
>module.exports : typeof import("test")
>module : { "\"test\"": typeof import("test"); }
>exports : typeof import("test")
>y : { status: "done"; m(n: number): void; }
>{    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }

    status: "done",
>status : "done"
>"done" : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}
module.exports.y
>module.exports.y : { status: "done"; m(n: number): void; }
>module.exports : typeof import("test")
>module : { "\"test\"": typeof import("test"); }
>exports : typeof import("test")
>y : { status: "done"; m(n: number): void; }

// prototype-property assignment
/** @type {DoneStatus} */
Thing.prototype.x = {
>Thing.prototype.x = {    status: 'done',    m(n) { }} : { status: "done"; m(n: number): void; }
>Thing.prototype.x : any
>Thing.prototype : Thing
>Thing : typeof Thing
>prototype : Thing
>x : any
>{    status: 'done',    m(n) { }} : { status: "done"; m(n: number): void; }

    status: 'done',
>status : "done"
>'done' : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}
Thing.prototype.x
>Thing.prototype.x : any
>Thing.prototype : Thing
>Thing : typeof Thing
>prototype : Thing
>x : any

// prototype assignment
function F() {
>F : { (): void; prototype: DoneStatus; }
}
/** @type {DoneStatus} */
F.prototype = {
>F.prototype = {    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }
>F.prototype : DoneStatus
>F : { (): void; prototype: DoneStatus; }
>prototype : DoneStatus
>{    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }

    status: "done",
>status : "done"
>"done" : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}

=== mod.js ===
// module.exports assignment
/** @type {{ status: 'done', m(n: number): void }} */
module.exports = {
>module.exports = {    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }
>module.exports : { status: "done"; m(n: number): void; }
>module : { "export=": { status: "done"; m(n: number): void; }; }
>exports : { status: "done"; m(n: number): void; }
>{    status: "done",    m(n) { }} : { status: "done"; m(n: number): void; }

    status: "done",
>status : "done"
>"done" : "done"

    m(n) { }
>m : (n: number) => void
>n : number
}


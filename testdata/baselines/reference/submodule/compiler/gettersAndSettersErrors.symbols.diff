--- old.gettersAndSettersErrors.symbols
+++ new.gettersAndSettersErrors.symbols
@@= skipped -4, +4 lines =@@
 >C : Symbol(C, Decl(gettersAndSettersErrors.ts, 0, 0))

     public get Foo() { return "foo";} // ok
->Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))
+>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37))

     public set Foo(foo:string) {} // ok
->Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))
+>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37))
 >foo : Symbol(foo, Decl(gettersAndSettersErrors.ts, 2, 19))

     public Foo = 0; // error - duplicate identifier Foo - confirmed
->Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 0, 9), Decl(gettersAndSettersErrors.ts, 1, 37), Decl(gettersAndSettersErrors.ts, 2, 33))
+>Foo : Symbol(C.Foo, Decl(gettersAndSettersErrors.ts, 2, 33))

     public get Goo(v:string):string {return null;} // error - getters must not have a parameter
 >Goo : Symbol(C.Goo, Decl(gettersAndSettersErrors.ts, 4, 19), Decl(gettersAndSettersErrors.ts, 5, 50))
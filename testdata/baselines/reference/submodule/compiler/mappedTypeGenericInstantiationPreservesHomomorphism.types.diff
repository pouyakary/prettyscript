--- old.mappedTypeGenericInstantiationPreservesHomomorphism.types
+++ new.mappedTypeGenericInstantiationPreservesHomomorphism.types
@@= skipped -9, +9 lines =@@

 === api.ts ===
 import {usePrivateType} from './internal';
->usePrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
+>usePrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 extends unknown ? { [K in keyof T_1]: T[any][K]; } : never

 export const mappedUnionWithPrivateType = <T extends unknown[]>(...args: T) => usePrivateType(...args);
->mappedUnionWithPrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
-><T extends unknown[]>(...args: T) => usePrivateType(...args) : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
+>mappedUnionWithPrivateType : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 extends unknown ? { [K in keyof T_1]: T[any][K]; } : never
+><T extends unknown[]>(...args: T) => usePrivateType(...args) : <T extends unknown[]>(...args: T) => T[any] extends infer T_1 extends unknown ? { [K in keyof T_1]: T[any][K]; } : never
 >args : T
->usePrivateType(...args) : T[any] extends infer T_1 ? { [K in keyof T_1]: T_1[K]; } : never
->usePrivateType : <T_1 extends unknown[]>(...args: T_1) => T_1[any] extends infer T_2 ? { [K in keyof T_2]: T_2[K]; } : never
+>usePrivateType(...args) : T_1[any] extends infer T extends unknown ? { [K in keyof T]: T_1[any][K]; } : never
+>usePrivateType : <T_1 extends unknown[]>(...args: T_1) => T_3[any] extends infer T_2 extends unknown ? { [K in keyof T_2]: T_3[any][K]; } : never
 >...args : unknown
 >args : T

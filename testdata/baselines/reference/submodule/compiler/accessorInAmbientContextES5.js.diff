--- old.accessorInAmbientContextES5.js
+++ new.accessorInAmbientContextES5.js
@@= skipped -28, +28 lines =@@
 }

 //// [accessorInAmbientContextES5.js]
-// Should allow accessor in ambient contexts even when targeting ES5
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var _RegularClass_shouldError_accessor_storage;
 // Regular class should still error when targeting ES5
 class RegularClass {
-    constructor() {
-        _RegularClass_shouldError_accessor_storage.set(this, void 0);
-    }
-    get shouldError() { return __classPrivateFieldGet(this, _RegularClass_shouldError_accessor_storage, "f"); } // Should still error
-    set shouldError(value) { __classPrivateFieldSet(this, _RegularClass_shouldError_accessor_storage, value, "f"); }
+    accessor shouldError; // Should still error
 }
-_RegularClass_shouldError_accessor_storage = new WeakMap();


 //// [accessorInAmbientContextES5.d.ts]
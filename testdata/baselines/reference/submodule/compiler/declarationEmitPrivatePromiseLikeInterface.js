//// [tests/cases/compiler/declarationEmitPrivatePromiseLikeInterface.ts] ////

//// [http-client.ts]
type TPromise<ResolveType, RejectType = any> = Omit<Promise<ResolveType>, "then" | "catch"> & {
    then<TResult1 = ResolveType, TResult2 = never>(
        onfulfilled?: ((value: ResolveType) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: RejectType) => TResult2 | PromiseLike<TResult2>) | undefined | null,
    ): TPromise<TResult1 | TResult2, RejectType>;
    catch<TResult = never>(
        onrejected?: ((reason: RejectType) => TResult | PromiseLike<TResult>) | undefined | null,
    ): TPromise<ResolveType | TResult, RejectType>;
};

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}

export class HttpClient<SecurityDataType = unknown> {
    public request = <T = any, E = any>(): TPromise<HttpResponse<T, E>> => {
        return '' as any;
    };
}
//// [Api.ts]
import { HttpClient } from "./http-client";

export class Api<SecurityDataType = unknown> {
    constructor(private http: HttpClient<SecurityDataType>) { }

    abc1 = () => this.http.request();
    abc2 = () => this.http.request();
    abc3 = () => this.http.request();
}

//// [http-client.js]
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
class HttpClient {
    request = () => {
        return '';
    };
}
exports.HttpClient = HttpClient;
//// [Api.js]
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
class Api {
    http;
    constructor(http) {
        this.http = http;
    }
    abc1 = () => this.http.request();
    abc2 = () => this.http.request();
    abc3 = () => this.http.request();
}
exports.Api = Api;


//// [http-client.d.ts]
type TPromise<ResolveType, RejectType = any> = Omit<Promise<ResolveType>, "then" | "catch"> & {
    then<TResult1 = ResolveType, TResult2 = never>(onfulfilled?: ((value: ResolveType) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: RejectType) => TResult2 | PromiseLike<TResult2>) | undefined | null): TPromise<TResult1 | TResult2, RejectType>;
    catch<TResult = never>(onrejected?: ((reason: RejectType) => TResult | PromiseLike<TResult>) | undefined | null): TPromise<ResolveType | TResult, RejectType>;
};
export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}
export declare class HttpClient<SecurityDataType = unknown> {
    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>, any>;
}
export {};
//// [Api.d.ts]
import { HttpClient } from "./http-client";
export declare class Api<SecurityDataType = unknown> {
    private http;
    constructor(http: HttpClient<SecurityDataType>);
    abc1: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    abc2: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    abc3: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                            };
                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

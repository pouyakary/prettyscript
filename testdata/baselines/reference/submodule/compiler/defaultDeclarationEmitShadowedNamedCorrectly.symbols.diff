--- old.defaultDeclarationEmitShadowedNamedCorrectly.symbols
+++ new.defaultDeclarationEmitShadowedNamedCorrectly.symbols
@@= skipped -4, +4 lines =@@
 >me : Symbol(me, Decl(this.ts, 0, 6))

 export interface Things<P, T> {
->Things : Symbol(me.Things, Decl(this.ts, 0, 29))
+>Things : Symbol(Things, Decl(this.ts, 0, 29))
 >P : Symbol(P, Decl(this.ts, 1, 24))
 >T : Symbol(T, Decl(this.ts, 1, 26))

     p: P;
->p : Symbol(me.Things.p, Decl(this.ts, 1, 31))
+>p : Symbol(Things.p, Decl(this.ts, 1, 31))
 >P : Symbol(P, Decl(this.ts, 1, 24))

     t: T;
->t : Symbol(me.Things.t, Decl(this.ts, 2, 9))
+>t : Symbol(Things.t, Decl(this.ts, 2, 9))
 >T : Symbol(T, Decl(this.ts, 1, 26))
 }
 export function make<P, CTor>(x: { new (): CTor & {props: P} }): Things<P, CTor> {
@@= skipped -20, +20 lines =@@
 >CTor : Symbol(CTor, Decl(this.ts, 5, 23))
 >props : Symbol(props, Decl(this.ts, 5, 51))
 >P : Symbol(P, Decl(this.ts, 5, 21))
->Things : Symbol(me.Things, Decl(this.ts, 0, 29))
+>Things : Symbol(Things, Decl(this.ts, 0, 29))
 >P : Symbol(P, Decl(this.ts, 5, 21))
 >CTor : Symbol(CTor, Decl(this.ts, 5, 23))

@@= skipped -8, +8 lines =@@
 }

 export interface Props {
->Props : Symbol(me.Props, Decl(this.ts, 7, 1))
+>Props : Symbol(Props, Decl(this.ts, 7, 1))
 }

 export default class MyComponent {
@@= skipped -8, +8 lines =@@

     props: Props;
 >props : Symbol(me.default.props, Decl(this.ts, 12, 34))
->Props : Symbol(me.Props, Decl(this.ts, 7, 1))
+>Props : Symbol(Props, Decl(this.ts, 7, 1))
 }
 export namespace Something {
->Something : Symbol(me.Something, Decl(this.ts, 14, 1))
+>Something : Symbol(Something, Decl(this.ts, 14, 1))

     let MyComponent = 2; // Shadow declaration, so symbol is only usable via the self-import
 >MyComponent : Symbol(MyComponent, Decl(this.ts, 16, 7))
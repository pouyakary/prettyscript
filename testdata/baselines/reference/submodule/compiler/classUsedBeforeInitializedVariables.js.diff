--- old.classUsedBeforeInitializedVariables.js
+++ new.classUsedBeforeInitializedVariables.js
@@= skipped -50, +50 lines =@@

 //// [classUsedBeforeInitializedVariables.js]
 class Test {
-    constructor() {
-        this.p1 = 0;
-        this.p2 = this.p1;
-        this.p3 = this.p4;
-        this.p4 = 0;
-        this.p7 = {
-            hello: (this.p6 = "string"),
-        };
-        this.directlyAssigned = this.directlyAssigned;
-        this.withinArrowFunction = () => this.withinArrowFunction;
-        this.withinFunction = function () {
-            return this.withinFunction;
-        };
-        this.withinObjectLiteral = {
-            [this.withinObjectLiteral]: true,
-        };
-        this.withinObjectLiteralGetterName = {
-            get [this.withinObjectLiteralGetterName]() {
-                return true;
-            }
-        };
-        this.withinObjectLiteralSetterName = {
-            set [this.withinObjectLiteralSetterName](_) { }
-        };
-        this.withinClassDeclarationExtension = (class extends this.withinClassDeclarationExtension {
-        });
-        this.fromOptional = this.p5;
-        // These error cases are ignored (not checked by control flow analysis)
-        this.assignedByArrowFunction = (() => this.assignedByFunction)();
-        this.assignedByFunction = (function () {
-            return this.assignedByFunction;
-        })();
-    }
+    p1 = 0;
+    p2 = this.p1;
+    p3 = this.p4;
+    p4 = 0;
+    p5;
+    p6;
+    p7 = {
+        hello: (this.p6 = "string"),
+    };
+    directlyAssigned = this.directlyAssigned;
+    withinArrowFunction = () => this.withinArrowFunction;
+    withinFunction = function () {
+        return this.withinFunction;
+    };
+    withinObjectLiteral = {
+        [this.withinObjectLiteral]: true,
+    };
+    withinObjectLiteralGetterName = {
+        get [this.withinObjectLiteralGetterName]() {
+            return true;
+        }
+    };
+    withinObjectLiteralSetterName = {
+        set [this.withinObjectLiteralSetterName](_) { }
+    };
+    withinClassDeclarationExtension = (class extends this.withinClassDeclarationExtension {
+    });
+    fromOptional = this.p5;
+    // These error cases are ignored (not checked by control flow analysis)
+    assignedByArrowFunction = (() => this.assignedByFunction)();
+    assignedByFunction = (function () {
+        return this.assignedByFunction;
+    })();
 }
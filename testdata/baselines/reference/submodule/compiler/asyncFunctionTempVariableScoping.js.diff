--- old.asyncFunctionTempVariableScoping.js
+++ new.asyncFunctionTempVariableScoping.js
@@= skipped -5, +5 lines =@@
 async ({ foo, bar, ...rest }) => bar(await foo);

 //// [asyncFunctionTempVariableScoping.js]
-// https://github.com/Microsoft/TypeScript/issues/19187
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __rest = (this && this.__rest) || function (s, e) {
     var t = {};
     for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
@@= skipped -21, +11 lines =@@
         }
     return t;
 };
-(_a) => __awaiter(this, void 0, void 0, function* () {
+// https://github.com/Microsoft/TypeScript/issues/19187
+async (_a) => {
     var { foo, bar } = _a, rest = __rest(_a, ["foo", "bar"]);
-    return bar(yield foo);
-});
+    return bar(await foo);
+};
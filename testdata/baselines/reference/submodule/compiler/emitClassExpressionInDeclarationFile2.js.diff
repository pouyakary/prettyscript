--- old.emitClassExpressionInDeclarationFile2.js
+++ new.emitClassExpressionInDeclarationFile2.js
@@= skipped -32, +32 lines =@@

 //// [emitClassExpressionInDeclarationFile2.js]
 "use strict";
-var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
-    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
-    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
-};
-var _a;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Test = exports.FooItem = exports.noPrivates = void 0;
 exports.WithTags = WithTags;
-exports.noPrivates = (_a = class {
-        constructor() {
-            this.p = 12;
-        }
-        static getTags() { }
-        tags() { }
-    },
-    __setFunctionName(_a, "noPrivates"),
-    _a.ps = -1,
-    _a);
+var noPrivates = class {
+    static getTags() { }
+    tags() { }
+    static ps = -1;
+    p = 12;
+}
+// altered repro from #15066 to add private property
+;
+exports.noPrivates = noPrivates;
 // altered repro from #15066 to add private property
 class FooItem {
-    constructor() {
-        this.property = "capitalism";
-    }
     foo() { }
+    name;
+    property = "capitalism";
 }
 exports.FooItem = FooItem;
 function WithTags(Base) {
@@= skipped -38, +31 lines =@@
 const test = new Test();
 Test.getTags();
 test.tags();
+
+
+//// [emitClassExpressionInDeclarationFile2.d.ts]
+export declare var noPrivates: {
+    new (): {
+        tags(): void;
+        p: number;
+    };
+    getTags(): void;
+    ps: number;
+};
+export declare class FooItem {
+    foo(): void;
+    name?: string;
+    private property;
+}
+export type Constructor<T> = new (...args: any[]) => T;
+export declare function WithTags<T extends Constructor<FooItem>>(Base: T): {
+    new (...args: any[]): {
+        foo(): void;
+        name?: string;
+        property: string;
+        tags(): void;
+    };
+    getTags(): void;
+} & T;
+declare const Test_base: {
+    new (...args: any[]): {
+        foo(): void;
+        name?: string;
+        property: string;
+        tags(): void;
+    };
+    getTags(): void;
+} & typeof FooItem;
+export declare class Test extends Test_base {
+}
+export {};
--- old.privacyFunctionParameterDeclFile.types
+++ new.privacyFunctionParameterDeclFile.types
@@= skipped -782, +782 lines =@@
 >privateModule : any

         myMethod(param: privateModule.publicClass): void;
->myMethod : (param: privateModule.publicClass) => void
+>myMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
     }
@@= skipped -8, +8 lines =@@
 >publicClassWithPrivateModuleParameterTypes : publicClassWithPrivateModuleParameterTypes

         static myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : (param: privateModule.publicClass) => void
+>myPublicStaticMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
         myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : (param: privateModule.publicClass) => void
+>myPublicMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
@@= skipped -19, +19 lines =@@
         }
     }
     export function publicFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass) {
->publicFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>publicFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
     }
     export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
->publicAmbientFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>publicAmbientFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any

@@= skipped -19, +19 lines =@@
 >privateModule : any

         myMethod(param: privateModule.publicClass): void;
->myMethod : (param: privateModule.publicClass) => void
+>myMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
     }
@@= skipped -8, +8 lines =@@
 >privateClassWithPrivateModuleParameterTypes : privateClassWithPrivateModuleParameterTypes

         static myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : (param: privateModule.publicClass) => void
+>myPublicStaticMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
         myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : (param: privateModule.publicClass) => void
+>myPublicMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
@@= skipped -19, +19 lines =@@
         }
     }
     function privateFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass) {
->privateFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>privateFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
     }
     declare function privateAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
->privateAmbientFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>privateAmbientFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
 }
@@= skipped -275, +275 lines =@@
 >privateModule : any

             myMethod(param: privateModule.publicClass): void;
->myMethod : (param: privateModule.publicClass) => void
+>myMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
@@= skipped -8, +8 lines =@@
 >publicClassWithPrivateModuleParameterTypes : publicClassWithPrivateModuleParameterTypes

             static myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : (param: privateModule.publicClass) => void
+>myPublicStaticMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
             }
             myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : (param: privateModule.publicClass) => void
+>myPublicMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
             }
@@= skipped -19, +19 lines =@@
             }
         }
         export function publicFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass) {
->publicFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>publicFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
         export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
->publicAmbientFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>publicAmbientFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any

@@= skipped -19, +19 lines =@@
 >privateModule : any

             myMethod(param: privateModule.publicClass): void;
->myMethod : (param: privateModule.publicClass) => void
+>myMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
@@= skipped -8, +8 lines =@@
 >privateClassWithPrivateModuleParameterTypes : privateClassWithPrivateModuleParameterTypes

             static myPublicStaticMethod(param: privateModule.publicClass) {
->myPublicStaticMethod : (param: privateModule.publicClass) => void
+>myPublicStaticMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
             }
             myPublicMethod(param: privateModule.publicClass) {
->myPublicMethod : (param: privateModule.publicClass) => void
+>myPublicMethod : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
             }
@@= skipped -19, +19 lines =@@
             }
         }
         function privateFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass) {
->privateFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>privateFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
         }
         declare function privateAmbientFunctionWithPrivateModuleParameterTypes(param: privateModule.publicClass): void;
->privateAmbientFunctionWithPrivateModuleParameterTypes : (param: privateModule.publicClass) => void
+>privateAmbientFunctionWithPrivateModuleParameterTypes : (param: publicClass) => void
 >param : publicClass
 >privateModule : any
     }
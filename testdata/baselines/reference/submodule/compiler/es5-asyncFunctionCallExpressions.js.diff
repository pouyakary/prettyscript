--- old.es5-asyncFunctionCallExpressions.js
+++ new.es5-asyncFunctionCallExpressions.js
@@= skipped -88, +88 lines =@@


 //// [es5-asyncFunctionCallExpressions.js]
-function callExpression0() {
-    return __awaiter(this, void 0, void 0, function* () {
-        yield x(y, z);
-    });
-}
-function callExpression1() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x)(y, z);
-    });
-}
-function callExpression2() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(yield y, z);
-    });
-}
-function callExpression3() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(y, yield z);
-    });
-}
-function callExpression4() {
-    return __awaiter(this, void 0, void 0, function* () {
-        yield x(...y, z);
-    });
-}
-function callExpression5() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x)(...y, z);
-    });
-}
-function callExpression6() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(...(yield y), z);
-    });
-}
-function callExpression7() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(...y, yield z);
-    });
-}
-function callExpression8() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(yield y, ...z);
-    });
-}
-function callExpression9() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x(y, ...(yield z));
-    });
-}
-function callExpression10() {
-    return __awaiter(this, void 0, void 0, function* () {
-        yield x.a(y, z);
-    });
-}
-function callExpression11() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x.a)(y, z);
-    });
-}
-function callExpression12() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x).a(y, z);
-    });
-}
-function callExpression13() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x.a(yield y, z);
-    });
-}
-function callExpression14() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x.a(y, yield z);
-    });
-}
-function callExpression15() {
-    return __awaiter(this, void 0, void 0, function* () {
-        yield x[a](y, z);
-    });
-}
-function callExpression16() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x[a])(y, z);
-    });
-}
-function callExpression17() {
-    return __awaiter(this, void 0, void 0, function* () {
-        (yield x)[a](y, z);
-    });
-}
-function callExpression18() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x[yield a](y, z);
-    });
-}
-function callExpression19() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x[a](yield y, z);
-    });
-}
-function callExpression20() {
-    return __awaiter(this, void 0, void 0, function* () {
-        x[a](y, yield z);
-    });
+async function callExpression0() {
+    await x(y, z);
+}
+async function callExpression1() {
+    (await x)(y, z);
+}
+async function callExpression2() {
+    x(await y, z);
+}
+async function callExpression3() {
+    x(y, await z);
+}
+async function callExpression4() {
+    await x(...y, z);
+}
+async function callExpression5() {
+    (await x)(...y, z);
+}
+async function callExpression6() {
+    x(...(await y), z);
+}
+async function callExpression7() {
+    x(...y, await z);
+}
+async function callExpression8() {
+    x(await y, ...z);
+}
+async function callExpression9() {
+    x(y, ...(await z));
+}
+async function callExpression10() {
+    await x.a(y, z);
+}
+async function callExpression11() {
+    (await x.a)(y, z);
+}
+async function callExpression12() {
+    (await x).a(y, z);
+}
+async function callExpression13() {
+    x.a(await y, z);
+}
+async function callExpression14() {
+    x.a(y, await z);
+}
+async function callExpression15() {
+    await x[a](y, z);
+}
+async function callExpression16() {
+    (await x[a])(y, z);
+}
+async function callExpression17() {
+    (await x)[a](y, z);
+}
+async function callExpression18() {
+    x[await a](y, z);
+}
+async function callExpression19() {
+    x[a](await y, z);
+}
+async function callExpression20() {
+    x[a](y, await z);
 }
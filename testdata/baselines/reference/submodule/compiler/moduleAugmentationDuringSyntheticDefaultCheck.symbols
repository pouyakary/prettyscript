//// [tests/cases/compiler/moduleAugmentationDuringSyntheticDefaultCheck.ts] ////

=== idx.test.ts ===
/// <reference path="./idx" />

import moment = require("moment-timezone");
>moment : Symbol(moment, Decl(idx.test.ts, 0, 0))

=== node_modules/moment/index.d.ts ===
declare function moment(): moment.Moment;
>moment : Symbol(moment, Decl(index.d.ts, 0, 0), Decl(index.d.ts, 0, 41), Decl(index.d.ts, 1, 16))
>moment : Symbol(moment, Decl(index.d.ts, 0, 0), Decl(index.d.ts, 0, 41), Decl(index.d.ts, 1, 16))
>Moment : Symbol(moment.Moment, Decl(index.d.ts, 1, 26), Decl(index.d.ts, 2, 25))

declare namespace moment {
>moment : Symbol(moment, Decl(index.d.ts, 0, 0), Decl(index.d.ts, 0, 41), Decl(index.d.ts, 1, 16))

  interface Moment extends Object {
>Moment : Symbol(Moment, Decl(index.d.ts, 1, 26), Decl(index.d.ts, 2, 25))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    valueOf(): number;
>valueOf : Symbol(Moment.valueOf, Decl(index.d.ts, 2, 35))
  }
}
export = moment;
>moment : Symbol(moment, Decl(index.d.ts, 0, 0), Decl(index.d.ts, 0, 41), Decl(index.d.ts, 1, 16))

=== node_modules/moment-timezone/index.d.ts ===
import * as moment from 'moment';
>moment : Symbol(moment, Decl(index.d.ts, 0, 6))

export = moment;
>moment : Symbol(moment, Decl(index.d.ts, 0, 6))

declare module "moment" {
>"moment" : Symbol(moment, Decl(index.d.ts, 0, 0), Decl(index.d.ts, 0, 41), Decl(index.d.ts, 1, 16))

    interface Moment {
>Moment : Symbol(Moment, Decl(index.d.ts, 1, 26), Decl(index.d.ts, 2, 25))

        tz(): string;
>tz : Symbol(Moment.tz, Decl(index.d.ts, 3, 22))
    }
}

--- old.jsxComponentTypeErrors.types
+++ new.jsxComponentTypeErrors.types
@@= skipped -12, +12 lines =@@
 }

 function FunctionComponent<T extends string>({type}: {type?: T}) {
->FunctionComponent : typeof FunctionComponent
+>FunctionComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }
 >type : T | undefined
 >type : T | undefined

@@= skipped -14, +14 lines =@@
 FunctionComponent.useThis = function() {
 >FunctionComponent.useThis = function() {  return <this type="foo" />;} : () => JSX.Element
 >FunctionComponent.useThis : () => JSX.Element
->FunctionComponent : typeof FunctionComponent
+>FunctionComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }
 >useThis : () => JSX.Element
 >function() {  return <this type="foo" />;} : () => JSX.Element

   return <this type="foo" />;
 ><this type="foo" /> : JSX.Element
->this : typeof FunctionComponent
+>this : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }
 >type : "foo"
 }

@@= skipped -19, +19 lines =@@
 }

 const MixedComponent = Math.random() ? FunctionComponent : ClassComponent;
->MixedComponent : typeof FunctionComponent | typeof ClassComponent
->Math.random() ? FunctionComponent : ClassComponent : typeof FunctionComponent | typeof ClassComponent
+>MixedComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; } | typeof ClassComponent
+>Math.random() ? FunctionComponent : ClassComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; } | typeof ClassComponent
 >Math.random() : number
 >Math.random : () => number
 >Math : Math
 >random : () => number
->FunctionComponent : typeof FunctionComponent
+>FunctionComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }
 >ClassComponent : typeof ClassComponent

 const elem1 = <FunctionComponent type="abc" />;
 >elem1 : JSX.Element
 ><FunctionComponent type="abc" /> : JSX.Element
->FunctionComponent : typeof FunctionComponent
+>FunctionComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }
 >type : "abc"

 const elem2 = <FunctionComponent<"abc"> />;
 >elem2 : JSX.Element
 ><FunctionComponent<"abc"> /> : JSX.Element
->FunctionComponent : typeof FunctionComponent
+>FunctionComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; }

 const elem3 = <ClassComponent />;
 >elem3 : JSX.Element
@@= skipped -28, +28 lines =@@
 const elem4 = <MixedComponent />;
 >elem4 : JSX.Element
 ><MixedComponent /> : JSX.Element
->MixedComponent : typeof FunctionComponent | typeof ClassComponent
+>MixedComponent : { <T extends string>({ type }: { type?: T | undefined; }): { type: T | undefined; }; useThis: () => JSX.Element; } | typeof ClassComponent

 const obj = {
 >obj : { MemberFunctionComponent(): {}; MemberClassComponent: typeof MemberClassComponent; }
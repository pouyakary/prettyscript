--- old.operationsAvailableOnPromisedType.js
+++ new.operationsAvailableOnPromisedType.js
@@= skipped -31, +31 lines =@@


 //// [operationsAvailableOnPromisedType.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-var __asyncValues = (this && this.__asyncValues) || function (o) {
-    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
-    var m = o[Symbol.asyncIterator], i;
-    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
-    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
-    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
-};
-function fn(a, b, c, d, e, f, g) {
-    return __awaiter(this, void 0, void 0, function* () {
-        var _a, e_1, _b, _c, _d, c_1, c_1_1;
-        // All errors
-        a | b;
-        b | a;
-        a + b;
-        a > b;
-        b++;
-        --b;
-        a === b;
-        [...c];
-        for (const s of c) {
-            fn(b, b, c, d, e, f, g);
-            d.prop;
-        }
-        try {
-            for (_d = true, c_1 = __asyncValues(c); c_1_1 = yield c_1.next(), _a = c_1_1.done, !_a; _d = true) {
-                _c = c_1_1.value;
-                _d = false;
-                const s = _c;
-            }
-        }
-        catch (e_1_1) { e_1 = { error: e_1_1 }; }
-        finally {
-            try {
-                if (!_d && !_a && (_b = c_1.return)) yield _b.call(c_1);
-            }
-            finally { if (e_1) throw e_1.error; }
-        }
-        e();
-        f();
-        new g();
-        b();
-    });
+async function fn(a, b, c, d, e, f, g) {
+    // All errors
+    a | b;
+    b | a;
+    a + b;
+    a > b;
+    b++;
+    --b;
+    a === b;
+    [...c];
+    for (const s of c) {
+        fn(b, b, c, d, e, f, g);
+        d.prop;
+    }
+    for await (const s of c) { }
+    e();
+    f();
+    new g();
+    b();
 }
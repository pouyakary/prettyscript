--- old.classUpdateTests.js
+++ new.classUpdateTests.js
@@= skipped -119, +119 lines =@@
 // test codegen for instance properties
 //
 class A {
-    constructor() {
-        this.p1 = 0;
-        this.p2 = 0;
-    }
+    p1 = 0;
+    p2 = 0;
+    p3;
 }
 class B {
-    constructor() {
-        this.p1 = 0;
-        this.p2 = 0;
-    }
+    p1 = 0;
+    p2 = 0;
+    p3;
+    constructor() { }
 }
 class C {
+    p1;
+    p2;
     constructor(p1 = 0, p2 = 0, p3 = 0) {
         this.p1 = p1;
         this.p2 = p2;
@@= skipped -23, +24 lines =@@
 class D {
 }
 class E extends D {
-    constructor() {
-        super(...arguments);
-        this.p1 = 0;
-    }
+    p1 = 0;
 }
 class F extends E {
     constructor() { } // ERROR - super call required
 }
 class G extends D {
-    constructor() {
-        super();
-        this.p1 = 0;
-    } // NO ERROR
+    p1 = 0;
+    constructor() { super(); } // NO ERROR
 }
 class H {
     constructor() { super(); } // ERROR - no super call allowed
@@= skipped -21, +16 lines =@@
     constructor() { super(); } // ERROR - no super call allowed
 }
 class J extends G {
+    p1;
     constructor(p1) {
         super(); // NO ERROR
         this.p1 = p1;
     }
 }
 class K extends G {
+    p1;
     constructor(p1) {
         var i = 0;
         super();
@@= skipped -13, +15 lines =@@
     }
 }
 class L extends G {
+    p1;
     constructor(p1) {
         super(); // NO ERROR
         this.p1 = p1;
     }
 }
 class M extends G {
+    p1;
     constructor(p1) {
         var i = 0;
         super();
@@= skipped -16, +18 lines =@@
 // test this reference in field initializers
 //
 class N {
+    p1 = 0;
+    p2 = this.p1;
     constructor() {
-        this.p1 = 0;
-        this.p2 = this.p1;
         this.p2 = 0;
     }
 }
@@= skipped -11, +11 lines =@@
 //
 class O {
     constructor() {
-        this.p1 = 0; // ERROR
     }
+    p1 = 0; // ERROR
 }
 class P {
     constructor() {
-        this.p1 = 0; // ERROR
     }
+    p1 = 0; // ERROR
 }
 class Q {
     constructor() {
-        this.p1 = 0; // ERROR
     }
+    this;
+    p1 = 0; // ERROR
 }
 class R {
     constructor() {
-        this.p1 = 0; // ERROR
     }
+    this;
+    p1 = 0; // ERROR
 }
--- old.reverseMappedTypeIntersectionConstraint.types
+++ new.reverseMappedTypeIntersectionConstraint.types
@@= skipped -212, +212 lines =@@
 >x : number

 declare function foo<T extends XNumber>(props: {[K in keyof T & keyof XNumber]: T[K]}): void;
->foo : <T extends XNumber>(props: { [K in keyof T & keyof XNumber]: T[K]; }) => void
+>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => void
 >props : { [K in keyof T & "x"]: T[K]; }

 function bar(props: {x: number, y: string}) {
@@= skipped -11, +11 lines =@@

   return foo(props); // no error because lack of excess property check by design
 >foo(props) : void
->foo : <T extends XNumber>(props: { [K in keyof T & keyof XNumber]: T[K]; }) => void
+>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => void
 >props : { x: number; y: string; }
 }

 foo({x: 1, y: 'foo'});
 >foo({x: 1, y: 'foo'}) : void
->foo : <T extends XNumber>(props: { [K in keyof T & keyof XNumber]: T[K]; }) => void
+>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => void
 >{x: 1, y: 'foo'} : { x: 1; y: string; }
 >x : 1
 >1 : 1
@@= skipped -15, +15 lines =@@

 foo({...{x: 1, y: 'foo'}}); // no error because lack of excess property check by design
 >foo({...{x: 1, y: 'foo'}}) : void
->foo : <T extends XNumber>(props: { [K in keyof T & keyof XNumber]: T[K]; }) => void
+>foo : <T extends XNumber>(props: { [K in keyof T & "x"]: T[K]; }) => void
 >{...{x: 1, y: 'foo'}} : { x: 1; y: string; }
 >{x: 1, y: 'foo'} : { x: 1; y: string; }
 >x : 1
@@= skipped -117, +117 lines =@@

 interface MachineConfig<TActor extends ProvidedActor> {
   types?: {
->types : { actors?: TActor; } | undefined
+>types : { actors?: TActor | undefined; } | undefined

     actors?: TActor;
 >actors : TActor | undefined
@@= skipped -45, +45 lines =@@
 >"foo" : "foo"

 const config = createXMachine({
->config : { types: { actors: { src: "str"; logic: typeof child; }; }; invoke: { readonly src: "str"; }; }
->createXMachine({  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10}) : { types: { actors: { src: "str"; logic: typeof child; }; }; invoke: { readonly src: "str"; }; }
+>config : { types: { actors: { src: "str"; logic: () => any; }; }; invoke: { readonly src: "str"; }; }
+>createXMachine({  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10}) : { types: { actors: { src: "str"; logic: () => any; }; }; invoke: { readonly src: "str"; }; }
 >createXMachine : <const TConfig extends MachineConfig<TActor>, TActor extends ProvidedActor = TConfig extends { types: { actors: ProvidedActor; }; } ? TConfig["types"]["actors"] : ProvidedActor>(config: { [K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K]; }) => TConfig
->{  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10} : { types: { actors: { src: "str"; logic: typeof child; }; }; invoke: { src: "str"; }; extra: number; }
+>{  types: {} as {    actors: {      src: "str";      logic: typeof child;    };  },  invoke: {    src: "str",  },  extra: 10} : { types: { actors: { src: "str"; logic: () => any; }; }; invoke: { src: "str"; }; extra: number; }

   types: {} as {
->types : { actors: { src: "str"; logic: typeof child; }; }
->{} as {    actors: {      src: "str";      logic: typeof child;    };  } : { actors: { src: "str"; logic: typeof child; }; }
+>types : { actors: { src: "str"; logic: () => any; }; }
+>{} as {    actors: {      src: "str";      logic: typeof child;    };  } : { actors: { src: "str"; logic: () => any; }; }
 >{} : {}

     actors: {
->actors : { src: "str"; logic: typeof child; }
+>actors : { src: "str"; logic: () => any; }

       src: "str";
 >src : "str"
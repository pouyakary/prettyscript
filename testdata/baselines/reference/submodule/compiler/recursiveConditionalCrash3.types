//// [tests/cases/compiler/recursiveConditionalCrash3.ts] ////

=== recursiveConditionalCrash3.ts ===
// #43529

export {}
/**
 *
 * Some helper Types and Interfaces..
 *
 */

export type CanBeExpanded<T extends object = object, D = string> = {
>CanBeExpanded : CanBeExpanded<T, D>

    value: T
>value : T

    default: D
>default : D
}

interface Base {

}

interface User extends Base {
    id: string,
>id : string

    role: CanBeExpanded<Role>,
>role : CanBeExpanded<Role, string>

    note: string,
>note : string
}

interface Role extends Base {
    id: string,
>id : string

    user: CanBeExpanded<User>,
>user : CanBeExpanded<User, string>

    x: string
>x : string
}

// This interface will be expanded in circular way.
interface X extends Base {
    id: string,
>id : string

    name: string,
>name : string

    user: CanBeExpanded<User>,
>user : CanBeExpanded<User, string>

    role: CanBeExpanded<Role>
>role : CanBeExpanded<Role, string>

    roles: CanBeExpanded<Role[]>
>roles : CanBeExpanded<Role[], string>
}

type Join<K, P> = K extends string | number ?
>Join : Join<K, P>

    P extends string | number ?
        `${K}${"" extends P ? "" : "."}${P}`
        : never : never;

type PrefixWith<P, S, C = '.'> = P extends '' ? `${string & S}` : `${string & P}${string & C}${string & S}`
>PrefixWith : PrefixWith<P, S, C>

type SplitWithAllPossibleCombinations<S extends string, D extends string> =
>SplitWithAllPossibleCombinations : SplitWithAllPossibleCombinations<S, D>

    string extends S ? string :
        S extends '' ? '' :
            S extends `${infer T}${D}${infer U}` ?
                T | Join<T, SplitWithAllPossibleCombinations<U, D>>
                : S;


/**
 * This function will return all possibile keys that can be expanded on T, only to the N deep level
 */
type KeysCanBeExpanded_<T, N extends number, Depth extends number[]> = N extends Depth['length'] ? never :
>KeysCanBeExpanded_ : KeysCanBeExpanded_<T, N, Depth>

    T extends CanBeExpanded ?
        KeysCanBeExpanded_<T['value'], N, Depth> :
        T extends Array<infer U> ? KeysCanBeExpanded_<U, N, Depth> :

            T extends object ?
                {
                    [K in keyof T ] :
                    T[K] extends object ?
                        K extends string | number
                            ? `${K}` | Join<`${K}`, KeysCanBeExpanded_<T[K], N, [1, ...Depth]>>
                            : never
                        : never

                }[keyof T]
                :
                never

export type KeysCanBeExpanded<T, N extends number = 4> = KeysCanBeExpanded_<T, N, []>
>KeysCanBeExpanded : KeysCanBeExpanded<T, N>

/**
 * Expand keys on `O` based on `Keys` parameter.
 */
type Expand__<O, Keys, P extends string, N extends number , Depth extends unknown[] > =
>Expand__ : Expand__<O, Keys, P, N, Depth>

    N extends Depth['length'] ?
        O extends CanBeExpanded ?
            O['default'] :
            O :
        O extends CanBeExpanded ?
            Expand__<O[P extends Keys ? 'value' : 'default'], Keys, P, N, Depth> :
            O extends Array<infer U> ?
                Expand__<U, Keys, P, N, Depth>[]
                : O extends object ?
                {
                    [K in keyof O]-?: Expand__<O[K], Keys, PrefixWith<P, K>, N, [1, ...Depth]>
                }
                : O



type SplitAC<K> = SplitWithAllPossibleCombinations<K extends string ? K : '', '.'> extends infer Ko ? Ko : ''
>SplitAC : SplitAC<K>

type Expand_<T, K, N extends number = 4> = Expand__<T, SplitAC<K>, '', N, []>
>Expand_ : Expand_<T, K, N>

type AllKeys<T, N extends number = 4> = KeysCanBeExpanded<T, N> extends infer R ? R : never
>AllKeys : AllKeys<T, N>



/**
 * If I open the popup, (pointing with the mouse on the Expand), the compiler shows the type Expand, expanded as expected.
 *
 * It's fast and it doesn't use additional memory
 *
 */
export type Expand<T extends object, K extends AllKeys<T, N> = never, N extends number = 4> = Expand_<T, K, N>
>Expand : Expand<T, K, N>

/**
 * These two functions work as charm, also they are superfast and as expected they don't use additional Memory
 */
let y1: Expand<X>
>y1 : { id: string; name: string; user: string; role: string; roles: string; }

let y2: Expand<X, 'user.role.user.role'>
>y2 : { id: string; name: string; user: { id: string; role: { id: string; user: { id: string; role: string; note: string; }; x: string; }; note: string; }; role: string; roles: string; }


/**
 *
 * ... nevertheless when I need to use the Expand in other Types, as the following examples, the popup show "loading..." and without show any information and
 * the Memory Heap grows to 1.2gb (in my case) every time... You can see it opening the Chrome DevTools and check the memory Tab.
 *
 * *******
 * I think this is causing "FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory"
 * on my project during the `yarn start`.
 * *******
 *
 */

type UseQueryOptions<T extends Base, K extends AllKeys<T, 4> > = Expand<T, K>
>UseQueryOptions : T extends CanBeExpanded<object, string> ? T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_2 ? T_2 extends T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_2 extends CanBeExpanded<object, string> ? T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_3 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never : T extends (infer U)[] ? any[] : T extends object ? { [K_1 in keyof T]-?: T[K_1] extends infer T_1 ? T_1 extends T[K_1] ? T_1 extends CanBeExpanded<object, string> ? T_1[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_1[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_3 : never : never : T_1 extends (infer U)[] ? any[] : T_1 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_1 : never : never; } : T

type UseQueryOptions2<T , K  > = Expand_<T, K>
>UseQueryOptions2 : T extends CanBeExpanded<object, string> ? T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_2 ? T_2 extends T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_2 extends CanBeExpanded<object, string> ? T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_3 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[`${string & K_1}` extends infer T_3 ? T_3 extends `${string & K_1}` ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never : T extends (infer U)[] ? any[] : T extends object ? { [K_1 in keyof T]-?: T[K_1] extends infer T_1 ? T_1 extends T[K_1] ? T_1 extends CanBeExpanded<object, string> ? T_1[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_1[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[`${string & K_1}` extends infer T_2 ? T_2 extends `${string & K_1}` ? T_2 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: any; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: any; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: any; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: any; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: any; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: any; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: any; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: any; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_3 : never : never : T_1 extends (infer U)[] ? any[] : T_1 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10[PrefixWith<`${string & K_2}`, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<`${string & K_2}`, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_1]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? any : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? any : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? any : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? any : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? any : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? any : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? any : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_2[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9[PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> extends infer T_3 ? T_3 extends PrefixWith<PrefixWith<`${string & K_2}`, K_3, ".">, K_1, "."> ? T_3 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? any : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_4 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_1 in keyof T_1]-?: T_1[K_1] extends infer T_2 ? T_2 extends T_1[K_1] ? T_2 extends CanBeExpanded<object, string> ? T_2["default"] : T_2 : never : never; } : T_2 : never : never; } : T_2 : never : never; } : T_1 : never : never; } : T

type UseQueryOptions3<T , K  > = Expand_<T, K> extends infer O ? O : never
>UseQueryOptions3 : UseQueryOptions3<T, K>

type ExpandResult<T,K> = Expand_<T, K> extends infer O ? O : never
>ExpandResult : ExpandResult<T, K>

type UseQueryOptions4<T , K  > = ExpandResult<T,K>
>UseQueryOptions4 : UseQueryOptions4<T, K>


/**
 * but as you can see here, the expansion of Interface X it's still working.
 *
 * If a memory is still high, it may need some seconds to show popup.
 *
 */
let t: UseQueryOptions<X, 'role.user.role'>
>t : { id: string; name: string; user: string; role: { id: string; user: { id: string; role: { id: string; user: string; x: string; }; note: string; }; x: string; }; roles: string; }


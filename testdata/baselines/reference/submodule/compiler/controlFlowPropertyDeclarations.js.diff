--- old.controlFlowPropertyDeclarations.js
+++ new.controlFlowPropertyDeclarations.js
@@= skipped -151, +151 lines =@@

 //// [controlFlowPropertyDeclarations.js]
 "use strict";
-// Repro from ##8913
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.StyleParser = exports.HTMLtoJSX = void 0;
 var HTMLDOMPropertyConfig = require('react/lib/HTMLDOMPropertyConfig');
@@= skipped -87, +86 lines =@@
     return /^\d+px$/.test(value);
 }
 class HTMLtoJSX {
-    constructor() {
-        /**
-         * Handles processing of the specified text node
-         *
-         * @param {TextNode} node
-         */
-        this._visitText = (node) => {
-            var parentTag = node.parentNode && node.parentNode.tagName.toLowerCase();
-            if (parentTag === 'textarea' || parentTag === 'style') {
-                // Ignore text content of textareas and styles, as it will have already been moved
-                // to a "defaultValue" attribute and "dangerouslySetInnerHTML" attribute respectively.
-                return;
-            }
-            var text = '';
-            if (this._inPreTag) {
-                // If this text is contained within a <pre>, we need to ensure the JSX
-                // whitespace coalescing rules don't eat the whitespace. This means
-                // wrapping newlines and sequences of two or more spaces in variables.
-                text = text
-                    .replace(/\r/g, '')
-                    .replace(/( {2,}|\n|\t|\{|\})/g, function (whitespace) {
-                    return '{' + JSON.stringify(whitespace) + '}';
-                });
-            }
-            else {
-                // If there's a newline in the text, adjust the indent level
-                if (text.indexOf('\n') > -1) {
-                }
-            }
-            this.output += text;
-        };
-    }
+    output;
+    level;
+    _inPreTag;
+    /**
+     * Handles processing of the specified text node
+     *
+     * @param {TextNode} node
+     */
+    _visitText = (node) => {
+        var parentTag = node.parentNode && node.parentNode.tagName.toLowerCase();
+        if (parentTag === 'textarea' || parentTag === 'style') {
+            // Ignore text content of textareas and styles, as it will have already been moved
+            // to a "defaultValue" attribute and "dangerouslySetInnerHTML" attribute respectively.
+            return;
+        }
+        var text = '';
+        if (this._inPreTag) {
+            // If this text is contained within a <pre>, we need to ensure the JSX
+            // whitespace coalescing rules don't eat the whitespace. This means
+            // wrapping newlines and sequences of two or more spaces in variables.
+            text = text
+                .replace(/\r/g, '')
+                .replace(/( {2,}|\n|\t|\{|\})/g, function (whitespace) {
+                return '{' + JSON.stringify(whitespace) + '}';
+            });
+        }
+        else {
+            // If there's a newline in the text, adjust the indent level
+            if (text.indexOf('\n') > -1) {
+            }
+        }
+        this.output += text;
+    };
 }
 exports.HTMLtoJSX = HTMLtoJSX;
 ;
@@= skipped -39, +40 lines =@@
  * Handles parsing of inline styles
  */
 class StyleParser {
-    constructor() {
-        this.styles = {};
-        this.toJSXString = () => {
-            for (var key in this.styles) {
-                if (!this.styles.hasOwnProperty(key)) {
-                }
+    styles = {};
+    toJSXString = () => {
+        for (var key in this.styles) {
+            if (!this.styles.hasOwnProperty(key)) {
             }
-        };
-    }
+        }
+    };
 }
 exports.StyleParser = StyleParser;
APISample_Watch.ts(11,21): error TS2307: Cannot find module 'typescript' or its corresponding type declarations.
APISample_Watch.ts(14,27): error TS7006: Parameter 'path' implicitly has an 'any' type.
APISample_Watch.ts(45,61): error TS7006: Parameter 'options' implicitly has an 'any' type.
APISample_Watch.ts(45,70): error TS7006: Parameter 'host' implicitly has an 'any' type.
APISample_Watch.ts(45,76): error TS7006: Parameter 'oldProgram' implicitly has an 'any' type.
APISample_Watch.ts(51,31): error TS7006: Parameter 'program' implicitly has an 'any' type.


==== APISample_Watch.ts (6 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
     *       at: https://github.com/Microsoft/TypeScript-wiki/blob/master/Using-the-Compiler-API.md#writing-an-incremental-program-watcher
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var os: any;
    
    import ts = require("typescript");
                        ~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'typescript' or its corresponding type declarations.
    
    const formatHost: ts.FormatDiagnosticsHost = {
        getCanonicalFileName: path => path,
                              ~~~~
!!! error TS7006: Parameter 'path' implicitly has an 'any' type.
        getCurrentDirectory: ts.sys.getCurrentDirectory,
        getNewLine: () => ts.sys.newLine,
    }
    
    function watchMain() {
        const configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
        if (!configPath) {
            throw new Error("Could not find a valid 'tsconfig.json'.");
        }
    
        // TypeScript can use several different program creation "strategies":
        //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
        //  * ts.createSemanticDiagnosticsBuilderProgram
        //  * ts.createAbstractBuilder
        // The first two produce "builder programs". These use an incremental strategy to only re-check and emit files whose
        // contents may have changed, or whose dependencies may have changes which may impact change the result of prior type-check and emit.
        // The last uses an ordinary program which does a full type check after every change.
        // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
        // For pure type-checking scenarios, or when another tool/process handles emit, using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
    
        // Note that there is another overload for `createWatchCompilerHost` that takes a set of root files.
        const host = ts.createWatchCompilerHost(configPath, {}, ts.sys,
            ts.createSemanticDiagnosticsBuilderProgram,
            reportDiagnostic,
            reportWatchStatusChanged,
        );
    
        // You can technically override any given hook on the host, though you probably don't need to.
        // Note that we're assuming `origCreateProgram` and `origPostProgramCreate` doesn't use `this` at all.
        const origCreateProgram = host.createProgram;
        host.createProgram = (rootNames: ReadonlyArray<string>, options, host, oldProgram) => {
                                                                ~~~~~~~
!!! error TS7006: Parameter 'options' implicitly has an 'any' type.
                                                                         ~~~~
!!! error TS7006: Parameter 'host' implicitly has an 'any' type.
                                                                               ~~~~~~~~~~
!!! error TS7006: Parameter 'oldProgram' implicitly has an 'any' type.
            console.log("** We're about to create the program! **");
            return origCreateProgram(rootNames, options, host, oldProgram);
        }
        const origPostProgramCreate = host.afterProgramCreate;
    
        host.afterProgramCreate = program => {
                                  ~~~~~~~
!!! error TS7006: Parameter 'program' implicitly has an 'any' type.
            console.log("** We finished making the program! **");
            origPostProgramCreate!(program);
        };
    
        // `createWatchProgram` creates an initial program, watches files, and updates the program over time.
        ts.createWatchProgram(host);
    }
    
    function reportDiagnostic(diagnostic: ts.Diagnostic) {
        console.error("Error", diagnostic.code, ":",
            ts.flattenDiagnosticMessageText(diagnostic.messageText, formatHost.getNewLine())
        );
    }
    
    /**
     * Prints a diagnostic every time the watch status changes.
     * This is mainly for messages like "Starting compilation" or "Compilation completed".
     */
    function reportWatchStatusChanged(diagnostic: ts.Diagnostic) {
        console.info(ts.formatDiagnostic(diagnostic, formatHost));
    }
    
    watchMain();
    
==== node_modules/typescript/package.json (0 errors) ====
    {
        "name": "typescript",
        "types": "/.ts/typescript.d.ts"
    }
    
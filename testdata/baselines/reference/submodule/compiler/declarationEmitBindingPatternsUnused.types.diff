--- old.declarationEmitBindingPatternsUnused.types
+++ new.declarationEmitBindingPatternsUnused.types
@@= skipped -33, +33 lines =@@

 // 2.Can change in meaning for typeof value if we remove alias
 function shadowedVariable({ value: alias }: { value: string }): typeof value { return value }
->shadowedVariable : ({ value: alias }: { value: string; }) => typeof value
+>shadowedVariable : ({ value: alias }: { value: string; }) => string
 >value : any
 >alias : string
 >value : string
@@= skipped -38, +38 lines =@@
 }

 function referencedInSignarture({ name: alias }: Named): typeof alias {
->referencedInSignarture : ({ name: alias }: Named) => typeof alias
+>referencedInSignarture : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -10, +10 lines =@@
 }

 function referencedInSignartureKeyword({ function: alias }: { function: string }): typeof alias {
->referencedInSignartureKeyword : ({ function: alias }: { function: string; }) => typeof alias
+>referencedInSignartureKeyword : ({ function: alias }: { function: string; }) => string
 >function : any
 >alias : string
 >function : string
@@= skipped -11, +11 lines =@@
 }

 function referencedInInferredType({ name: alias }: Named) {
->referencedInInferredType : ({ name: alias }: Named) => { name: typeof alias; }
+>referencedInInferredType : ({ name: alias }: Named) => { name: string; }
 >name : any
 >alias : string

     type Named2 = { name: typeof alias }
->Named2 : { name: typeof alias; }
+>Named2 : { name: string; }
 >name : string
 >alias : string

     return null! as Named2
->null! as Named2 : { name: typeof alias; }
+>null! as Named2 : { name: string; }
 >null! : null
 }

 function referencedInNestedFunction({ name: alias }: Named) {
->referencedInNestedFunction : ({ name: alias }: Named) => (p: typeof alias) => void
+>referencedInNestedFunction : ({ name: alias }: Named) => (p: string) => void
 >name : any
 >alias : string

     return function(p: typeof alias) {
->function(p: typeof alias) {    } : (p: typeof alias) => void
+>function(p: typeof alias) {    } : (p: string) => void
 >p : string
 >alias : string

@@= skipped -28, +28 lines =@@
 }

 function referencedNestedAlias({ p: { name: alias } }: { p: Named }): typeof alias {
->referencedNestedAlias : ({ p: { name: alias } }: { p: Named; }) => typeof alias
+>referencedNestedAlias : ({ p: { name: alias } }: { p: Named; }) => string
 >p : any
 >name : any
 >alias : string
@@= skipped -12, +12 lines =@@
 }

 function referencedArrayAlias([a, b, { name: alias }]: Named[]): typeof alias {
->referencedArrayAlias : ([a, b, { name: alias }]: Named[]) => typeof alias
+>referencedArrayAlias : ([a, b, { name: alias }]: Named[]) => string
 >a : Named
 >b : Named
 >name : any
@@= skipped -102, +102 lines =@@
 >alias : string
 	}
 	set x({ name: alias }: Named & { o: typeof alias }) {
->x : Named & { o: typeof alias; }
+>x : Named & { o: string; }
 >name : any
 >alias : string
 >o : string
@@= skipped -8, +8 lines =@@
         
     }
 	mReturnType({ name: alias }: Named): typeof alias {
->mReturnType : ({ name: alias }: Named) => typeof alias
+>mReturnType : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -9, +9 lines =@@
 >null! : null
     }
 	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias> {
->mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
+>mRerturnTypeNested : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -9, +9 lines =@@
 >null! : null
     }
     mParameter({ name: alias }: Named, p: typeof alias) {
->mParameter : ({ name: alias }: Named, p: typeof alias) => any
+>mParameter : ({ name: alias }: Named, p: string) => any
 >name : any
 >alias : string
 >p : string
@@= skipped -17, +17 lines =@@
 >alias : string

 let referencedInSignartureReturnTypeFnType: ({ name: alias }: Named) => typeof alias;
->referencedInSignartureReturnTypeFnType : ({ name: alias }: Named) => typeof alias
+>referencedInSignartureReturnTypeFnType : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string

 let referencedInSignartureParamTypeFnType: ({ name: alias }: Named, p: typeof alias) => void;
->referencedInSignartureParamTypeFnType : ({ name: alias }: Named, p: typeof alias) => void
+>referencedInSignartureParamTypeFnType : ({ name: alias }: Named, p: string) => void
 >name : any
 >alias : string
 >p : string
@@= skipped -18, +18 lines =@@
 >alias : string

 let referencedInSignartureReturnTypeCtorType: new ({ name: alias }: Named) => typeof alias;
->referencedInSignartureReturnTypeCtorType : new ({ name: alias }: Named) => typeof alias
+>referencedInSignartureReturnTypeCtorType : new ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string

 let referencedInSignartureParamTypeCtorType: new  ({ name: alias }: Named, p: typeof alias) => void;
->referencedInSignartureParamTypeCtorType : new ({ name: alias }: Named, p: typeof alias) => void
+>referencedInSignartureParamTypeCtorType : new ({ name: alias }: Named, p: string) => void
 >name : any
 >alias : string
 >p : string
@@= skipped -57, +57 lines =@@
 >alias : string

 	set x({ name: alias }: Named & { o: typeof alias })
->x : Named & { o: typeof alias; }
+>x : Named & { o: string; }
 >name : any
 >alias : string
 >o : string
 >alias : string

 	mReturnType({ name: alias }: Named): typeof alias;
->mReturnType : ({ name: alias }: Named) => typeof alias
+>mReturnType : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string

 	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias>;
->mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
+>mRerturnTypeNested : ({ name: alias }: Named) => string
 >name : any
 >alias : string
 >alias : string

     mParameter({ name: alias }: Named, p: typeof alias);
->mParameter : ({ name: alias }: Named, p: typeof alias) => any
+>mParameter : ({ name: alias }: Named, p: string) => any
 >name : any
 >alias : string
 >p : string
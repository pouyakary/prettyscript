--- old.isolatedDeclarationErrorsReturnTypes.js
+++ new.isolatedDeclarationErrorsReturnTypes.js
@@= skipped -360, +360 lines =@@
     static fnStaticExpressionPrivate = function foo(cb = function () { }) { return 0; };
     static fnStaticArrowPrivate = (cb = function () { }) => "S";
 }
+
+
+//// [isolatedDeclarationErrorsReturnTypes.d.ts]
+export declare const fnExpressionConstVariable: () => number;
+export declare const fnArrowConstVariable: () => string;
+export declare let fnExpressionLetVariable: () => number;
+export declare let fnArrowLetVariable: () => string;
+export declare var fnExpressionVarVariable: () => number;
+export declare var fnArrowVarVariable: () => string;
+export declare const fnExpressionConstVariableOk: () => number;
+export declare const fnArrowConstVariableOk: (cb?: () => void) => string;
+export declare let fnExpressionLetVariableOk: () => number;
+export declare let fnArrowLetVariableOk: (cb?: () => void) => string;
+export declare var fnExpressionVarVariableOk: () => number;
+export declare var fnArrowVarVariableOk: (cb?: () => void) => string;
+export declare class ExportedClass {
+    #private;
+    fnExpression: () => number;
+    fnArrow: () => string;
+    protected fnExpressionProtected: () => number;
+    protected fnArrowProtected: () => string;
+    static fnStaticExpression: () => number;
+    static fnStaticArrow: () => string;
+    protected static fnStaticExpressionProtected: () => number;
+    protected static fnStaticArrowProtected: () => string;
+    fnExpressionOk: () => number;
+    fnArrowOK: () => string;
+    protected fnExpressionProtectedOk: () => number;
+    protected fnArrowProtectedOK: () => string;
+    static fnStaticExpressionOk: () => number;
+    static fnStaticArrowOk: () => string;
+    protected static fnStaticExpressionProtectedOk: () => number;
+    protected static fnStaticArrowProtectedOk: () => string;
+    private fnExpressionPrivate;
+    private fnArrowPrivate;
+    private static fnStaticExpressionPrivate;
+    private static fnStaticArrowPrivate;
+}
+declare class IndirectlyExportedClass {
+    #private;
+    fnExpression: () => number;
+    fnArrow: () => string;
+    static fnStaticExpression: () => number;
+    static fnStaticArrow: () => string;
+    protected static fnStaticExpressionProtected: () => number;
+    protected static fnStaticArrowProtected: () => string;
+    private fnExpressionPrivate;
+    private fnArrowPrivate;
+    private static fnStaticExpressionPrivate;
+    private static fnStaticArrowPrivate;
+}
+export declare const instance: IndirectlyExportedClass;
+export declare const fnParamExpressionConstVariable: (cb?: () => void) => number;
+export declare const fnParamArrowConstVariable: (cb?: () => number) => string;
+export declare let fnParamExpressionLetVariable: (cb?: () => void) => number;
+export declare let fnParamArrowLetVariable: (cb?: () => number) => string;
+export declare var fnParamExpressionVarVariable: (cb?: () => void) => number;
+export declare var fnParamArrowVarVariable: (cb?: () => number) => string;
+export declare const fnParamExpressionConstVariableOwnerHasReturnType: (cb?: () => void) => number;
+export declare const fnParamArrowConstVariableOwnerHasReturnType: (cb?: () => void) => string;
+export declare let fnParamExpressionLetVariableOwnerHasReturnType: (cb?: () => void) => number;
+export declare let fnParamArrowLetVariableOwnerHasReturnType: (cb?: () => void) => string;
+export declare var fnParamExpressionVarVariableOwnerHasReturnType: (cb?: () => void) => number;
+export declare var fnParamArrowVarVariableOwnerHasReturnType: (cb?: () => void) => string;
+export declare const fnParamExpressionConstVariableOk: (cb?: () => void) => number;
+export declare const fnParamArrowConstVariableOk: (cb?: () => void) => string;
+export declare let fnParamExpressionLetVariableOk: (cb?: () => void) => number;
+export declare let fnParamArrowLetVariableOk: (cb?: () => void) => string;
+export declare var fnParamExpressionVarVariableOk: (cb?: () => void) => number;
+export declare var fnParamArrowVarVariableOk: (cb?: () => void) => string;
+export declare const fnParamExpressionConstVariableInternal: (cb?: () => void) => number;
+export declare const fnParamArrowConstVariableInternal: (cb?: () => number) => string;
+export declare let fnParamExpressionLetVariableInternal: (cb?: () => void) => number;
+export declare let fnParamArrowLetVariableInternal: (cb?: () => number) => string;
+export declare var fnParamExpressionVarVariableInternal: (cb?: () => void) => number;
+export declare var fnParamArrowVarVariableInternal: (cb?: () => number) => string;
+export declare class FnParamsExportedClass {
+    #private;
+    fnExpression: (cb?: () => void) => number;
+    fnArrow: (cb?: () => void) => string;
+    protected fnExpressionProtected: (cb?: () => void) => number;
+    protected fnArrowProtected: (cb?: () => void) => string;
+    static fnStaticExpression: (cb?: () => void) => number;
+    static fnStaticArrow: (cb?: () => void) => string;
+    protected static fnStaticExpressionProtected: (cb?: () => void) => number;
+    protected static fnStaticArrowProtected: (cb?: () => void) => string;
+    fnExpressionMethodHasReturn: (cb?: () => void) => number;
+    fnArrowMethodHasReturn: (cb?: () => void) => string;
+    protected fnExpressionProtectedMethodHasReturn: (cb?: () => void) => number;
+    protected fnArrowProtectedMethodHasReturn: (cb?: () => void) => string;
+    static fnStaticExpressionMethodHasReturn: (cb?: () => void) => number;
+    static fnStaticArrowMethodHasReturn: (cb?: () => void) => string;
+    protected static fnStaticExpressionProtectedMethodHasReturn: (cb?: () => void) => number;
+    protected static fnStaticArrowProtectedMethodHasReturn: (cb?: () => void) => string;
+    fnExpressionOnlyOnParam: (cb?: () => void) => number;
+    fnArrowOnlyOnParam: (cb?: () => void) => string;
+    protected fnExpressionProtectedOnlyOnParam: (cb?: () => void) => number;
+    protected fnArrowProtectedOnlyOnParam: (cb?: () => void) => string;
+    static fnStaticExpressionOnlyOnParam: (cb?: () => void) => number;
+    static fnStaticArrowOnlyOnParam: (cb?: () => void) => string;
+    protected static fnStaticExpressionProtectedOnlyOnParam: (cb?: () => void) => number;
+    protected static fnStaticArrowProtectedOnlyOnParam: (cb?: () => void) => string;
+    fnExpressionOk: (cb?: () => void) => number;
+    fnArrowOK: (cb?: () => void) => string;
+    protected fnExpressionProtectedOk: (cb?: () => void) => number;
+    protected fnArrowProtectedOK: (cb?: () => void) => string;
+    static fnStaticExpressionOk: (cb?: () => void) => number;
+    static fnStaticArrowOk: (cb?: () => void) => string;
+    protected static fnStaticExpressionProtectedOk: (cb?: () => void) => number;
+    protected static fnStaticArrowProtectedOk: (cb?: () => void) => string;
+    private fnExpressionPrivate;
+    private fnArrowPrivate;
+    private static fnStaticExpressionPrivate;
+    private static fnStaticArrowPrivate;
+}
+export {};
--- old.privacyFunctionParameterDeclFile.js
+++ new.privacyFunctionParameterDeclFile.js
@@= skipped -697, +697 lines =@@
 }
 exports.publicClass = publicClass;
 class publicClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
 }
 exports.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
 class publicClassWithWithPublicParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
 }
 exports.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
 class privateClassWithWithPrivateParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
     }
 }
 class privateClassWithWithPublicParmeterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -22, +24 lines =@@
 function privateFunctionWithPublicParmeterTypes(param) {
 }
 class publicClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     myPublicMethod(param) {
@@= skipped -13, +15 lines =@@
 function publicFunctionWithPrivateModuleParameterTypes(param) {
 }
 class privateClassWithPrivateModuleParameterTypes {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     myPublicMethod(param) {
@@= skipped -19, +21 lines =@@
     }
     publicModule.publicClass = publicClass;
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     publicModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -20, +22 lines =@@
     }
     privateModule.publicClass = publicClass;
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     privateModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     privateModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     privateModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -16, +18 lines =@@
 class publicClassInGlobal {
 }
 class publicClassWithWithPublicParmeterTypesInGlobal {
+    param1;
+    param2;
     static myPublicStaticMethod(param) {
     }
     static myPrivateStaticMethod(param) {
@@= skipped -30, +32 lines =@@
         }
         privateModule.publicClass = publicClass;
         class publicClassWithWithPrivateParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
         }
         privateModule.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
         class publicClassWithWithPublicParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
         }
         privateModule.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
         class privateClassWithWithPrivateParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
             }
         }
         class privateClassWithWithPublicParmeterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
         function privateFunctionWithPublicParmeterTypes(param) {
         }
         class publicClassWithPrivateModuleParameterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
         }
         privateModule.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
         class privateClassWithPrivateModuleParameterTypes {
+            param1;
+            param2;
             static myPublicStaticMethod(param) {
             }
             myPublicMethod(param) {
@@= skipped -13, +15 lines =@@
         }
     })(privateModule || (privateModule = {}));
     class publicClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModuleInGlobal.publicClassWithWithPrivateParmeterTypes = publicClassWithWithPrivateParmeterTypes;
     class publicClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -15, +17 lines =@@
     }
     publicModuleInGlobal.publicClassWithWithPublicParmeterTypes = publicClassWithWithPublicParmeterTypes;
     class privateClassWithWithPrivateParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -14, +16 lines =@@
         }
     }
     class privateClassWithWithPublicParmeterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         static myPrivateStaticMethod(param) {
@@= skipped -24, +26 lines =@@
     function privateFunctionWithPublicParmeterTypes(param) {
     }
     class publicClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
@@= skipped -14, +16 lines =@@
     }
     publicModuleInGlobal.publicFunctionWithPrivateModuleParameterTypes = publicFunctionWithPrivateModuleParameterTypes;
     class privateClassWithPrivateModuleParameterTypes {
+        param1;
+        param2;
         static myPublicStaticMethod(param) {
         }
         myPublicMethod(param) {
APISample_WatchWithOwnWatchHost.ts(8,21): error TS2307: Cannot find module 'typescript' or its corresponding type declarations.
APISample_WatchWithOwnWatchHost.ts(22,32): error TS7006: Parameter 'options' implicitly has an 'any' type.
APISample_WatchWithOwnWatchHost.ts(39,27): error TS7006: Parameter 'rootNames' implicitly has an 'any' type.
APISample_WatchWithOwnWatchHost.ts(39,38): error TS7006: Parameter 'options' implicitly has an 'any' type.
APISample_WatchWithOwnWatchHost.ts(39,47): error TS7006: Parameter 'host' implicitly has an 'any' type.
APISample_WatchWithOwnWatchHost.ts(39,53): error TS7006: Parameter 'oldProgram' implicitly has an 'any' type.
APISample_WatchWithOwnWatchHost.ts(45,31): error TS7006: Parameter 'program' implicitly has an 'any' type.


==== APISample_WatchWithOwnWatchHost.ts (7 errors) ====
    /*
     * Note: This test is a public API sample. This sample verifies creating abstract builder to watch list of root files
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var console: any;
    
    import ts = require("typescript");
                        ~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'typescript' or its corresponding type declarations.
    
    function watchMain() {
        // get list of files and compiler options somehow
        const files: string[] = [];
        const options: ts.CompilerOptions = {};
    
        const host: ts.WatchCompilerHostOfFilesAndCompilerOptions<ts.BuilderProgram> = {
            rootFiles: files,
            options,
    
            useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,
            getNewLine: () => ts.sys.newLine,
            getCurrentDirectory: ts.sys.getCurrentDirectory,
            getDefaultLibFileName: options => ts.getDefaultLibFilePath(options),
                                   ~~~~~~~
!!! error TS7006: Parameter 'options' implicitly has an 'any' type.
    
            fileExists: ts.sys.fileExists,
            readFile: ts.sys.readFile,
            directoryExists: ts.sys.directoryExists,
            getDirectories: ts.sys.getDirectories,
            readDirectory: ts.sys.readDirectory,
            realpath: ts.sys.realpath,
    
            watchFile: ts.sys.watchFile!,
            watchDirectory: ts.sys.watchDirectory!,
            createProgram: ts.createAbstractBuilder
        };
    
        // You can technically override any given hook on the host, though you probably don't need to.
        // Note that we're assuming `origCreateProgram` and `origPostProgramCreate` doesn't use `this` at all.
        const origCreateProgram = host.createProgram;
        host.createProgram = (rootNames, options, host, oldProgram) => {
                              ~~~~~~~~~
!!! error TS7006: Parameter 'rootNames' implicitly has an 'any' type.
                                         ~~~~~~~
!!! error TS7006: Parameter 'options' implicitly has an 'any' type.
                                                  ~~~~
!!! error TS7006: Parameter 'host' implicitly has an 'any' type.
                                                        ~~~~~~~~~~
!!! error TS7006: Parameter 'oldProgram' implicitly has an 'any' type.
            console.log("** We're about to create the program! **");
            return origCreateProgram(rootNames, options, host, oldProgram);
        }
        const origPostProgramCreate = host.afterProgramCreate;
    
        host.afterProgramCreate = program => {
                                  ~~~~~~~
!!! error TS7006: Parameter 'program' implicitly has an 'any' type.
            console.log("** We finished making the program! **");
            origPostProgramCreate!(program);
        };
    
        // `createWatchProgram` creates an initial program, watches files, and updates the program over time.
        ts.createWatchProgram(host);
    }
    
    watchMain();
    
==== node_modules/typescript/package.json (0 errors) ====
    {
        "name": "typescript",
        "types": "/.ts/typescript.d.ts"
    }
    
--- old.asyncFunctionWithForStatementNoInitializer.js
+++ new.asyncFunctionWithForStatementNoInitializer.js
@@= skipped -26, +26 lines =@@
 }

 //// [asyncFunctionWithForStatementNoInitializer.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-function test1() {
-    return __awaiter(this, void 0, void 0, function* () {
-        let i = 0;
-        let limit = 10;
-        for (; i < limit; ++i) {
-        }
-    });
-}
-function test2() {
-    return __awaiter(this, void 0, void 0, function* () {
-        let i = 0;
-        let limit = 10;
-        for (i = 1; i < limit; ++i) {
-        }
-    });
-}
-function test3() {
-    return __awaiter(this, void 0, void 0, function* () {
-        let i = 0;
-        for (;; ++i) {
-        }
-    });
-}
-function test4() {
-    return __awaiter(this, void 0, void 0, function* () {
-        for (;;) {
-        }
-    });
+async function test1() {
+    let i = 0;
+    let limit = 10;
+    for (; i < limit; ++i) {
+    }
+}
+async function test2() {
+    let i = 0;
+    let limit = 10;
+    for (i = 1; i < limit; ++i) {
+    }
+}
+async function test3() {
+    let i = 0;
+    for (;; ++i) {
+    }
+}
+async function test4() {
+    for (;;) {
+    }
 }
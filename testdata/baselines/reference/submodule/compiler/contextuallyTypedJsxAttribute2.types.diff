--- old.contextuallyTypedJsxAttribute2.types
+++ new.contextuallyTypedJsxAttribute2.types
@@= skipped -10, +10 lines =@@
 >ElementType : any

 function UnwrappedLink<T extends ElementType = ElementType>(
->UnwrappedLink : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element
+>UnwrappedLink : <T extends ElementType = ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element

   props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">,
->props : Omit<React.ComponentPropsWithRef<React.ElementType extends T ? "a" : T>, "as">
+>props : Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">

 ) {
   return <a></a>;
@@= skipped -14, +14 lines =@@

 <UnwrappedLink onClick={(e) => {}} />;
 ><UnwrappedLink onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element
+>UnwrappedLink : <T extends ElementType = ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element
 >onClick : (e: React.MouseEvent<HTMLAnchorElement>) => void
 >(e) => {} : (e: React.MouseEvent<HTMLAnchorElement>) => void
 >e : React.MouseEvent<HTMLAnchorElement>

 function UnwrappedLink2<T extends ElementType = ElementType>(
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
+>UnwrappedLink2 : <T extends ElementType = ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => JSX.Element

   props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & {
->props : Omit<React.ComponentPropsWithRef<React.ElementType extends T ? "a" : T>, "as"> & { as?: T; }
+>props : Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }

     as?: T;
 >as : T | undefined
@@= skipped -24, +24 lines =@@

 <UnwrappedLink2 onClick={(e) => {}} />;
 ><UnwrappedLink2 onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
+>UnwrappedLink2 : <T extends ElementType = ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => JSX.Element
 >onClick : (e: React.MouseEvent<HTMLAnchorElement>) => void
 >(e) => {} : (e: React.MouseEvent<HTMLAnchorElement>) => void
 >e : React.MouseEvent<HTMLAnchorElement>

 <UnwrappedLink2 as="button" onClick={(e) => {}} />;
 ><UnwrappedLink2 as="button" onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
+>UnwrappedLink2 : <T extends ElementType = ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => JSX.Element
 >as : "button"
 >onClick : (e: React.MouseEvent<HTMLButtonElement>) => void
 >(e) => {} : (e: React.MouseEvent<HTMLButtonElement>) => void
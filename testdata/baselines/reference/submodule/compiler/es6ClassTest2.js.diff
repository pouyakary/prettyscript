--- old.es6ClassTest2.js
+++ new.es6ClassTest2.js
@@= skipped -161, +161 lines =@@

 //// [es6ClassTest2.js]
 class BasicMonster {
+    name;
+    health;
     constructor(name, health) {
         this.name = name;
         this.health = health;
-        this.isAlive = true;
     }
     attack(target) {
         // WScript.Echo("Attacks " + target);
     }
+    isAlive = true;
 }
 var m1 = new BasicMonster("1", 100);
 var m2 = new BasicMonster("2", 100);
@@= skipped -15, +17 lines =@@
 m1.health = 0;
 console.log(m5.isAlive.toString());
 class GetSetMonster {
+    name;
+    _health;
     constructor(name, _health) {
         this.name = name;
         this._health = _health;
@@= skipped -27, +29 lines =@@
 m3.health = 0;
 var x = m5.isAlive.toString();
 class OverloadedMonster {
+    name;
+    health;
     constructor(name, health) {
         this.name = name;
         this.health = health;
-        this.isAlive = true;
     }
     attack(target) {
         //WScript.Echo("Attacks " + target);
     }
+    isAlive = true;
 }
 var m5 = new OverloadedMonster("1");
 var m6 = new OverloadedMonster("2");
@@= skipped -20, +22 lines =@@
 }
 function foo() { return true; }
 class PrototypeMonster {
-    constructor() {
-        this.age = 1;
-        this.b = foo();
-    }
+    age = 1;
+    name;
+    b = foo();
 }
 class SuperParent {
     constructor(a) {
@@= skipped -24, +23 lines =@@
         super.c();
     }
 }
-let Statics = (() => {
-    class Statics {
-        static baz() {
-            return "";
-        }
+class Statics {
+    static foo = 1;
+    static bar;
+    static baz() {
+        return "";
     }
-    Statics.foo = 1;
-    return Statics;
-})();
+}
 var stat = new Statics();
 class ImplementsInterface {
+    x;
+    z;
     constructor() {
         this.x = 1;
         this.z = "foo";
@@= skipped -19, +19 lines =@@
 class Visibility {
     foo() { }
     bar() { }
+    x;
+    y;
+    z;
     constructor() {
         this.x = 1;
         this.y = 2;
     }
 }
 class BaseClassWithConstructor {
+    x;
+    s;
     constructor(x, s) {
         this.x = x;
         this.s = s;
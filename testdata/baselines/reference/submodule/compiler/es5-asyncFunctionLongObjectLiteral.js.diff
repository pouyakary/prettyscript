--- old.es5-asyncFunctionLongObjectLiteral.js
+++ new.es5-asyncFunctionLongObjectLiteral.js
@@= skipped -30, +30 lines =@@

 //// [es5-asyncFunctionLongObjectLiteral.js]
 // the generated code from both should be similar
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-const fooShort = () => __awaiter(this, void 0, void 0, function* () {
-    return {
-        a: yield Promise.resolve(0),
-        b: yield Promise.resolve(1),
-        c: yield Promise.resolve(2),
-        d: yield Promise.resolve(3),
-        e: yield Promise.resolve(4),
-    };
-});
-const fooLong = () => __awaiter(this, void 0, void 0, function* () {
-    return {
-        a: yield Promise.resolve(0),
-        b: yield Promise.resolve(1),
-        c: yield Promise.resolve(2),
-        d: yield Promise.resolve(3),
-        e: yield Promise.resolve(4),
-        f: yield Promise.resolve(5),
-        g: yield Promise.resolve(6),
-        h: yield Promise.resolve(7),
-        i: yield Promise.resolve(8),
-        j: yield Promise.resolve(9),
-    };
-});
+const fooShort = async () => {
+    return {
+        a: await Promise.resolve(0),
+        b: await Promise.resolve(1),
+        c: await Promise.resolve(2),
+        d: await Promise.resolve(3),
+        e: await Promise.resolve(4),
+    };
+};
+const fooLong = async () => {
+    return {
+        a: await Promise.resolve(0),
+        b: await Promise.resolve(1),
+        c: await Promise.resolve(2),
+        d: await Promise.resolve(3),
+        e: await Promise.resolve(4),
+        f: await Promise.resolve(5),
+        g: await Promise.resolve(6),
+        h: await Promise.resolve(7),
+        i: await Promise.resolve(8),
+        j: await Promise.resolve(9),
+    };
+};
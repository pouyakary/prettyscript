--- old.targetTypeTest1.symbols
+++ new.targetTypeTest1.symbols
@@= skipped -1, +1 lines =@@

 === targetTypeTest1.ts ===
 declare class Point
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 {
       constructor(x: number, y: number);
 >x : Symbol(x, Decl(targetTypeTest1.ts, 2, 18))
@@= skipped -16, +16 lines =@@
 >add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 5, 17))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 5, 28))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))

       static origin: Point;
 >origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))

 }

@@= skipped -12, +12 lines =@@
 // Because Point is a constructor function, this is inferred
 // to be Point and return type is inferred to be void
 function Point(x, y) {
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >x : Symbol(x, Decl(targetTypeTest1.ts, 13, 15))
 >y : Symbol(y, Decl(targetTypeTest1.ts, 13, 17))

@@= skipped -30, +30 lines =@@
 // Point.origin declared as type Point
 Point.origin = new Point(0, 0);
 >Point.origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >origin : Symbol(Point.origin, Decl(targetTypeTest1.ts, 5, 48), Decl(targetTypeTest1.ts, 22, 17))
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))

 // Point.prototype declared as type Point
 // this inferred as Point because of obj.prop assignment
 // dx, dy, and return type inferred using target typing
 Point.prototype.add = function(dx, dy) {
 >Point.prototype.add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
->Point.prototype : Symbol(Point.prototype)
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
->prototype : Symbol(Point.prototype)
+>Point.prototype : Symbol(Point.prototype, Decl(targetTypeTest1.ts, 34, 19))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
+>prototype : Symbol(Point.prototype, Decl(targetTypeTest1.ts, 34, 19))
 >add : Symbol(Point.add, Decl(targetTypeTest1.ts, 4, 23))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 30, 31))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 30, 34))

     return new Point(this.x + dx, this.y + dy);
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 30, 31))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 30, 34))

@@= skipped -30, +30 lines =@@
 // this in function add inferred to be type of object literal (i.e. Point)
 // dx, dy, and return type of add inferred using target typing
 Point.prototype = {
->Point.prototype : Symbol(Point.prototype)
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
->prototype : Symbol(Point.prototype)
+>Point.prototype : Symbol(Point.prototype, Decl(targetTypeTest1.ts, 34, 19))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
+>prototype : Symbol(Point.prototype, Decl(targetTypeTest1.ts, 34, 19))

     x: 0,
 >x : Symbol(x, Decl(targetTypeTest1.ts, 39, 19))
@@= skipped -16, +16 lines =@@
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 42, 21))

         return new Point(this.x + dx, this.y + dy);
->Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0), Decl(targetTypeTest1.ts, 22, 17))
+>Point : Symbol(Point, Decl(targetTypeTest1.ts, 8, 1), Decl(targetTypeTest1.ts, 0, 0))
 >dx : Symbol(dx, Decl(targetTypeTest1.ts, 42, 18))
 >dy : Symbol(dy, Decl(targetTypeTest1.ts, 42, 21))
     }
@@= skipped -49, +49 lines =@@
 }

 C.prototype = 
->C.prototype : Symbol(C.prototype)
+>C.prototype : Symbol(C.prototype, Decl(targetTypeTest1.ts, 62, 1))
 >C : Symbol(C, Decl(targetTypeTest1.ts, 57, 1), Decl(targetTypeTest1.ts, 50, 1))
->prototype : Symbol(C.prototype)
+>prototype : Symbol(C.prototype, Decl(targetTypeTest1.ts, 62, 1))

 	{	a:0,
 >a : Symbol(a, Decl(targetTypeTest1.ts, 65, 2))
--- old.inlineMappedTypeModifierDeclarationEmit.js
+++ new.inlineMappedTypeModifierDeclarationEmit.js
@@= skipped -50, +50 lines =@@
 exports.processedInternally2 = exports.processedInternally1 = void 0;
 exports.wrappedTest1 = wrappedTest1;
 exports.wrappedTest2 = wrappedTest2;
-var other_1 = require("./other");
+const other_1 = require("./other");
 function wrappedTest1(obj, k) {
     return (0, other_1.test1)(obj, k);
 }
@@= skipped -20, +20 lines =@@
 export declare function test2<T, K extends string>(obj: T, k: K): OmitUnveiled<T, K>;
 export {};
 //// [index.d.ts]
-export declare function wrappedTest1<T, K extends string>(obj: T, k: K): Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never;
+export declare function wrappedTest1<T, K extends string>(obj: T, k: K): Exclude<keyof T_1, K> extends infer T extends keyof T_1 ? { [P in T]: T_1[P]; } : never;
 export declare function wrappedTest2<T, K extends string>(obj: T, k: K): { [P in Exclude<keyof T, K>]: T[P]; };
 export type Obj = {
     a: number;
@@= skipped -12, +12 lines =@@
 export declare const processedInternally2: {
     foo: string;
 };
+
+
+//// [DtsFileErrors]
+
+
+index.d.ts(1,88): error TS2304: Cannot find name 'T_1'.
+index.d.ts(1,126): error TS2304: Cannot find name 'T_1'.
+index.d.ts(1,144): error TS2304: Cannot find name 'T_1'.
+
+
+==== index.d.ts (3 errors) ====
+    export declare function wrappedTest1<T, K extends string>(obj: T, k: K): Exclude<keyof T_1, K> extends infer T extends keyof T_1 ? { [P in T]: T_1[P]; } : never;
+                                                                                           ~~~
+!!! error TS2304: Cannot find name 'T_1'.
+                                                                                                                                 ~~~
+!!! error TS2304: Cannot find name 'T_1'.
+                                                                                                                                                   ~~~
+!!! error TS2304: Cannot find name 'T_1'.
+    export declare function wrappedTest2<T, K extends string>(obj: T, k: K): { [P in Exclude<keyof T, K>]: T[P]; };
+    export type Obj = {
+        a: number;
+        readonly foo: string;
+    };
+    export declare const processedInternally1: {
+        readonly foo: string;
+    };
+    export declare const processedInternally2: {
+        foo: string;
+    };
+    
+==== other.d.ts (0 errors) ====
+    type OmitReal<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;
+    type OmitUnveiled<T, K extends string | number | symbol> = {
+        [P in Exclude<keyof T, K>]: T[P];
+    };
+    export declare function test1<T, K extends string>(obj: T, k: K): OmitReal<T, K>;
+    export declare function test2<T, K extends string>(obj: T, k: K): OmitUnveiled<T, K>;
+    export {};
+    
--- old.abstractPropertyInConstructor.js
+++ new.abstractPropertyInConstructor.js
@@= skipped -97, +97 lines =@@
 //// [abstractPropertyInConstructor.js]
 class AbstractClass {
     constructor(str, other) {
-        this.other = this.prop;
-        this.fn = () => this.prop;
         this.method(parseInt(str));
         let val = this.prop.toLowerCase();
         if (!str) {
@@= skipped -15, +13 lines =@@
         // OK, references are to another instance
         other.cb(other.prop);
     }
+    prop;
+    cb;
+    other = this.prop;
+    fn = () => this.prop;
     method2() {
         this.prop = this.prop + "!";
     }
 }
 class DerivedAbstractClass extends AbstractClass {
+    cb = (s) => { };
     constructor(str, other, yetAnother) {
         super(str, other);
-        this.cb = (s) => { };
         // there is no implementation of 'prop' in any base class
         this.cb(this.prop.toLowerCase());
         this.method(1);
@@= skipped -17, +21 lines =@@
     }
 }
 class Implementation extends DerivedAbstractClass {
+    prop = "";
+    cb = (s) => { };
     constructor(str, other, yetAnother) {
         super(str, other, yetAnother);
-        this.prop = "";
-        this.cb = (s) => { };
         this.cb(this.prop);
     }
     method(n) {
@@= skipped -19, +19 lines =@@
     }
 }
 class C1 {
+    x;
+    y;
     constructor() {
         let self = this; // ok
         let { x, y: y1 } = this; // error
@@= skipped -7, +9 lines =@@
     }
 }
 class C2 {
+    x;
+    y;
     constructor() {
         let self = this; // ok
         let { x, y: y1 } = this; // ok
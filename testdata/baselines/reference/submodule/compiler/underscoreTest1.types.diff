--- old.underscoreTest1.types
+++ new.underscoreTest1.types
@@= skipped -3224, +3224 lines =@@
 >obj : T

         chain<T>(list: T[]): ChainedArray<T>;
->chain : { <T>(list: T[]): ChainedArray<T>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T_1>(obj: T_1): ChainedObject<T_1>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >list : T[]

         chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
->chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T_1>(obj: T_1): ChainedObject<T_1>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >list : Dictionary<T>

         chain<T>(obj: T): ChainedObject<T>;
->chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T>(obj: T): ChainedObject<T>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >obj : T

         each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
+>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : T[]
 >iterator : Iterator_<T, void>
 >context : any

         each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->each : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
+>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, void>
 >context : any

         forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
+>forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : T[]
 >iterator : Iterator_<T, void>
 >context : any

         forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->forEach : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
+>forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, void>
 >context : any

         map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
+>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >iterator : Iterator_<T, U>
 >context : any

         map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->map : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
+>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, U>
 >context : any

         collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
+>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >iterator : Iterator_<T, U>
 >context : any

         collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->collect : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
+>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, U>
 >context : any

         reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         reduceRight<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         reduceRight<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         reduceRight<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         reduceRight<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         foldr<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         foldr<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         foldr<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any

         foldr<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any

         find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
+>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->find : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
+>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
+>detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->detect : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
+>detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->select : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         where<T>(list: T[], properties: Object): T[];
->where : { <T>(list: T[], properties: Object): T[]; <T_1>(list: Dictionary<T_1>, properties: Object): T_1[]; }
+>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
 >list : T[]
 >properties : Object

         where<T>(list: Dictionary<T>, properties: Object): T[];
->where : { <T_1>(list: T_1[], properties: Object): T_1[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
+>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
 >list : Dictionary<T>
 >properties : Object

         findWhere<T>(list: T[], properties: Object): T;
->findWhere : { <T>(list: T[], properties: Object): T; <T_1>(list: Dictionary<T_1>, properties: Object): T_1; }
+>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
 >list : T[]
 >properties : Object

         findWhere<T>(list: Dictionary<T>, properties: Object): T;
->findWhere : { <T_1>(list: T_1[], properties: Object): T_1; <T>(list: Dictionary<T>, properties: Object): T; }
+>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
 >list : Dictionary<T>
 >properties : Object

         reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any

         any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any

         contains<T>(list: T[], value: T): boolean;
->contains : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
+>contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : T[]
 >value : T

         contains<T>(list: Dictionary<T>, value: T): boolean;
->contains : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
+>contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : Dictionary<T>
 >value : T

         include<T>(list: T[], value: T): boolean;
->include : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
+>include : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : T[]
 >value : T

         include<T>(list: Dictionary<T>, value: T): boolean;
->include : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
+>include : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : Dictionary<T>
 >value : T

@@= skipped -370, +370 lines =@@
 >propertyName : string

         max<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
+>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any

         max<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->max : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
+>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any

         min<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
+>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any

         min<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->min : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
+>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any

         sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any

         sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any

         sortBy<T>(list: T[], propertyName: string): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: T[], propertyName: string): T[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : T[]
 >propertyName : string

         sortBy<T>(list: Dictionary<T>, propertyName: string): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : Dictionary<T>
 >propertyName : string

         groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any

         groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any

         groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : T[]
 >propertyName : string

         groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : Dictionary<T>
 >propertyName : string

         countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any

         countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any

         countBy<T>(list: T[], propertyName: string): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : T[]
 >propertyName : string

         countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : Dictionary<T>
 >propertyName : string

         shuffle<T>(list: T[]): T[];
->shuffle : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
+>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : T[]

         shuffle<T>(list: Dictionary<T>): T[];
->shuffle : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
+>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : Dictionary<T>

         toArray<T>(list: T[]): T[];
->toArray : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
+>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : T[]

         toArray<T>(list: Dictionary<T>): T[];
->toArray : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
+>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : Dictionary<T>

         size<T>(list: T[]): number;
->size : { <T>(list: T[]): number; <T_1>(list: Dictionary<T_1>): number; }
+>size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
 >list : T[]

         size<T>(list: Dictionary<T>): number;
->size : { <T_1>(list: T_1[]): number; <T>(list: Dictionary<T>): number; }
+>size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
 >list : Dictionary<T>

         first<T>(list: T[]): T;
->first : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]

         first<T>(list: T[], count: number): T[];
->first : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number

         head<T>(list: T[]): T;
->head : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>head : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]

         head<T>(list: T[], count: number): T[];
->head : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>head : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number

         take<T>(list: T[]): T;
->take : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>take : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]

         take<T>(list: T[], count: number): T[];
->take : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>take : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number

         initial<T>(list: T[]): T;
->initial : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]

         initial<T>(list: T[], count: number): T[];
->initial : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number

         last<T>(list: T[]): T;
->last : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]

         last<T>(list: T[], count: number): T[];
->last : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number

@@= skipped -168, +168 lines =@@
 >list : T[]

         flatten<T>(list: T[][]): T[];
->flatten : { <T>(list: T[][]): T[]; <T_1>(array: any[], shallow?: boolean): T_1[]; }
+>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >list : T[][]

         flatten<T>(array: any[], shallow?: boolean): T[];
->flatten : { <T_1>(list: T_1[][]): T_1[]; <T>(array: any[], shallow?: boolean): T[]; }
+>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >array : any[]
 >shallow : boolean

@@= skipped -27, +27 lines =@@
 >others : T[][]

         uniq<T>(list: T[], isSorted?: boolean): T[];
->uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
+>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean

         uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->uniq : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
+>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 >iterator : Iterator_<T, U>
 >context : any

         unique<T>(list: T[], isSorted?: boolean): T[];
->unique : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
+>unique : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean

         unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->unique : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
+>unique : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 >iterator : Iterator_<T, U>
 >context : any

         zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
->zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0_1, T1_1, T2>(a0: T0_1[], a1: T1_1[], a2: T2[]): Tuple3<T0_1, T1_1, T2>[]; <T0_1, T1_1, T2, T3>(a0: T0_1[], a1: T1_1[], a2: T2[], a3: T3[]): Tuple4<T0_1, T1_1, T2, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]

         zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
->zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0_1, T1_1, T2_1, T3>(a0: T0_1[], a1: T1_1[], a2: T2_1[], a3: T3[]): Tuple4<T0_1, T1_1, T2_1, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]
 >a2 : T2[]

         zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
->zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0_1, T1_1, T2_1>(a0: T0_1[], a1: T1_1[], a2: T2_1[]): Tuple3<T0_1, T1_1, T2_1>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]
 >a2 : T2[]
@@= skipped -67, +67 lines =@@
 >fromIndex : number

         sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
->sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T_1>(list: T_1[], obj: T_1, iterator?: Iterator_<T_1, any>, context?: any): number; }
+>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
 >list : T[]
 >obj : T
 >propertyName : string

         sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
->sortedIndex : { <T_1>(list: T_1[], obj: T_1, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
+>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
 >list : T[]
 >obj : T
 >iterator : Iterator_<T, any>
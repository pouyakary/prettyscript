--- old.inferTypePredicates.js
+++ new.inferTypePredicates.js
@@= skipped -318, +318 lines =@@
 const numsOrNull = [1, 2, 3, 4, null];
 const filteredNumsTruthy = numsOrNull.filter(x => !!x); // should error
 const filteredNumsNonNullish = numsOrNull.filter(x => x !== null); // should ok
-const evenSquaresInline = // should error
- [1, 2, 3, 4]
+const evenSquaresInline = [1, 2, 3, 4]
     .map(x => x % 2 === 0 ? x * x : null)
     .filter(x => !!x); // tests truthiness, not non-nullishness
 const isTruthy = (x) => !!x;
-const evenSquares = // should error
- [1, 2, 3, 4]
+const evenSquares = [1, 2, 3, 4]
     .map(x => x % 2 === 0 ? x * x : null)
     .filter(isTruthy);
-const evenSquaresNonNull = // should ok
- [1, 2, 3, 4]
+const evenSquaresNonNull = [1, 2, 3, 4]
     .map(x => x % 2 === 0 ? x * x : null)
     .filter(x => x !== null);
 function isNonNull(x) {
@@= skipped -149, +146 lines =@@
     }
 }
 class C2 extends C1 {
-    constructor() {
-        super(...arguments);
-        this.z = 0;
-    }
+    z = 0;
 }
 if (c.isC2()) {
     let c2 = c; // should error
@@= skipped -155, +152 lines =@@
 declare let snd: string | number | Date;
 declare function isNumberWithThis(this: Date, x: number | string): x is number;
 declare function narrowFromAny(x: any): x is number;
-declare const noInferenceFromRest: (...f: ["a" | "b"]) => boolean;
-declare const noInferenceFromImpossibleRest: (...f: []) => boolean;
+declare const noInferenceFromRest: (f_0: "a" | "b") => boolean;
+declare const noInferenceFromImpossibleRest: () => boolean;
 declare function inferWithRest(x: string | null, ...f: ["a", "b"]): x is string;
 declare const foobar: {
     type: "foo";
@@= skipped -10, +10 lines =@@
     type: "bar";
     bar: string;
 };
-declare const foobarPred: (fb: typeof foobar) => fb is {
+declare const foobarPred: (fb: {
+    type: "foo";
+    foo: number;
+} | {
+    type: "bar";
+    bar: string;
+}) => fb is {
     type: "foo";
     foo: number;
 };
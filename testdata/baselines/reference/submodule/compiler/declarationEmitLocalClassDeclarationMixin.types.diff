--- old.declarationEmitLocalClassDeclarationMixin.types
+++ new.declarationEmitLocalClassDeclarationMixin.types
@@= skipped -4, +4 lines =@@
 >args : any[]

 function mixin<B extends Constructor<{}>>(Base: B) {
->mixin : <B extends Constructor<{}>>(Base: B) => { new (...args: any[]): PrivateMixed; prototype: mixin<any>.PrivateMixed; } & B
+>mixin : <B extends Constructor<{}>>(Base: B) => { new (...args: any[]): PrivateMixed; prototype: mixin.PrivateMixed; } & B
 >Base : B

     class PrivateMixed extends Base {
@@= skipped -12, +12 lines =@@
 >2 : 2
     }
     return PrivateMixed;
->PrivateMixed : { new (...args: any[]): PrivateMixed; prototype: mixin<any>.PrivateMixed; } & B
+>PrivateMixed : { new (...args: any[]): PrivateMixed; prototype: mixin.PrivateMixed; } & B
 }

 export class Unmixed {
@@= skipped -12, +12 lines =@@
 }

 export const Mixed = mixin(Unmixed);
->Mixed : { new (...args: any[]): mixin<typeof Unmixed>.PrivateMixed; prototype: mixin<any>.PrivateMixed; } & typeof Unmixed
->mixin(Unmixed) : { new (...args: any[]): mixin<typeof Unmixed>.PrivateMixed; prototype: mixin<any>.PrivateMixed; } & typeof Unmixed
->mixin : <B extends Constructor<{}>>(Base: B) => { new (...args: any[]): PrivateMixed; prototype: mixin<any>.PrivateMixed; } & B
+>Mixed : { new (...args: any[]): mixin.PrivateMixed; prototype: mixin.PrivateMixed; } & typeof Unmixed
+>mixin(Unmixed) : { new (...args: any[]): mixin.PrivateMixed; prototype: mixin.PrivateMixed; } & typeof Unmixed
+>mixin : <B extends Constructor<{}>>(Base: B) => { new (...args: any[]): PrivateMixed; prototype: mixin.PrivateMixed; } & B
 >Unmixed : typeof Unmixed

 function Filter<C extends Constructor<{}>>(ctor: C) {
->Filter : <C extends Constructor<{}>>(ctor: C) => ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter<any>.FilterMixin; }) & C
+>Filter : <C extends Constructor<{}>>(ctor: C) => ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter.FilterMixin; }) & C
 >ctor : C

     abstract class FilterMixin extends ctor {
@@= skipped -23, +23 lines =@@
 >12 : 12
     }
     return FilterMixin;
->FilterMixin : ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter<any>.FilterMixin; }) & C
+>FilterMixin : ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter.FilterMixin; }) & C
 }

 export class FilteredThing extends Filter(Unmixed) {
 >FilteredThing : FilteredThing
->Filter(Unmixed) : Filter<typeof Unmixed>.FilterMixin & Unmixed
->Filter : <C extends Constructor<{}>>(ctor: C) => ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter<any>.FilterMixin; }) & C
+>Filter(Unmixed) : Filter.FilterMixin & Unmixed
+>Filter : <C extends Constructor<{}>>(ctor: C) => ((abstract new (...args: any[]) => FilterMixin) & { prototype: Filter.FilterMixin; }) & C
 >Unmixed : typeof Unmixed

     match(path: string) {
--- old.privacyFunctionReturnTypeDeclFile.types
+++ new.privacyFunctionReturnTypeDeclFile.types
@@= skipped -1254, +1254 lines =@@
 >privateModule : any

         myMethod(): privateModule.publicClass;
->myMethod : () => privateModule.publicClass
+>myMethod : () => publicClass
 >privateModule : any
     }
     export class publicClassWithPrivateModuleParameterTypes {
 >publicClassWithPrivateModuleParameterTypes : publicClassWithPrivateModuleParameterTypes

         static myPublicStaticMethod(): privateModule.publicClass { 
->myPublicStaticMethod : () => privateModule.publicClass
+>myPublicStaticMethod : () => publicClass
 >privateModule : any

             return null;
         }
         myPublicMethod(): privateModule.publicClass { 
->myPublicMethod : () => privateModule.publicClass
+>myPublicMethod : () => publicClass
 >privateModule : any

             return null;
@@= skipped -38, +38 lines =@@
         }
     }
     export function publicFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass { 
->publicFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>publicFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

         return null;
@@= skipped -15, +15 lines =@@
 >publicClass : typeof publicClass
     }
     export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass; 
->publicAmbientFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>publicAmbientFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

     interface privateInterfaceWithPrivateModuleParameterTypes {
@@= skipped -15, +15 lines =@@
 >privateModule : any

         myMethod(): privateModule.publicClass;
->myMethod : () => privateModule.publicClass
+>myMethod : () => publicClass
 >privateModule : any
     }
     class privateClassWithPrivateModuleParameterTypes {
 >privateClassWithPrivateModuleParameterTypes : privateClassWithPrivateModuleParameterTypes

         static myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : () => privateModule.publicClass
+>myPublicStaticMethod : () => publicClass
 >privateModule : any

             return null;
         }
         myPublicMethod(): privateModule.publicClass {
->myPublicMethod : () => privateModule.publicClass
+>myPublicMethod : () => publicClass
 >privateModule : any

             return null;
@@= skipped -38, +38 lines =@@
         }
     }
     function privateFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass {
->privateFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>privateFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

         return null;
@@= skipped -15, +15 lines =@@
 >publicClass : typeof publicClass
     }
     declare function privateAmbientFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass; 
->privateAmbientFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>privateAmbientFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any
 }

@@= skipped -431, +431 lines =@@
 >privateModule : any

             myMethod(): privateModule.publicClass;
->myMethod : () => privateModule.publicClass
+>myMethod : () => publicClass
 >privateModule : any
         }
         export class publicClassWithPrivateModuleParameterTypes {
 >publicClassWithPrivateModuleParameterTypes : publicClassWithPrivateModuleParameterTypes

             static myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : () => privateModule.publicClass
+>myPublicStaticMethod : () => publicClass
 >privateModule : any

                 return null;
             }
             myPublicMethod(): privateModule.publicClass {
->myPublicMethod : () => privateModule.publicClass
+>myPublicMethod : () => publicClass
 >privateModule : any

                 return null;
@@= skipped -38, +38 lines =@@
             }
         }
         export function publicFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass {
->publicFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>publicFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

             return null;
@@= skipped -15, +15 lines =@@
 >publicClass : typeof publicClass
         }
         export declare function publicAmbientFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass;
->publicAmbientFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>publicAmbientFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

         interface privateInterfaceWithPrivateModuleParameterTypes {
@@= skipped -15, +15 lines =@@
 >privateModule : any

             myMethod(): privateModule.publicClass;
->myMethod : () => privateModule.publicClass
+>myMethod : () => publicClass
 >privateModule : any
         }
         class privateClassWithPrivateModuleParameterTypes {
 >privateClassWithPrivateModuleParameterTypes : privateClassWithPrivateModuleParameterTypes

             static myPublicStaticMethod(): privateModule.publicClass {
->myPublicStaticMethod : () => privateModule.publicClass
+>myPublicStaticMethod : () => publicClass
 >privateModule : any

                 return null;
             }
             myPublicMethod(): privateModule.publicClass {
->myPublicMethod : () => privateModule.publicClass
+>myPublicMethod : () => publicClass
 >privateModule : any

                 return null;
@@= skipped -38, +38 lines =@@
             }
         }
         function privateFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass {
->privateFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>privateFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any

             return null;
@@= skipped -15, +15 lines =@@
 >publicClass : typeof publicClass
         }
         declare function privateAmbientFunctionWithPrivateModuleParameterTypes(): privateModule.publicClass;
->privateAmbientFunctionWithPrivateModuleParameterTypes : () => privateModule.publicClass
+>privateAmbientFunctionWithPrivateModuleParameterTypes : () => publicClass
 >privateModule : any
     }

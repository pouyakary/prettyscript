--- old.declarationEmitPrivatePromiseLikeInterface.js
+++ new.declarationEmitPrivatePromiseLikeInterface.js
@@= skipped -36, +36 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.HttpClient = void 0;
 class HttpClient {
-    constructor() {
-        this.request = () => {
-            return '';
-        };
-    }
+    request = () => {
+        return '';
+    };
 }
 exports.HttpClient = HttpClient;
 //// [Api.js]
@@= skipped -12, +10 lines =@@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Api = void 0;
 class Api {
+    http;
     constructor(http) {
         this.http = http;
-        this.abc1 = () => this.http.request();
-        this.abc2 = () => this.http.request();
-        this.abc3 = () => this.http.request();
     }
+    abc1 = () => this.http.request();
+    abc2 = () => this.http.request();
+    abc3 = () => this.http.request();
 }
 exports.Api = Api;

@@= skipped -20, +21 lines =@@
     error: E;
 }
 export declare class HttpClient<SecurityDataType = unknown> {
-    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>>;
+    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>, any>;
 }
 export {};
+//// [Api.d.ts]
+import { HttpClient } from "./http-client";
+export declare class Api<SecurityDataType = unknown> {
+    private http;
+    constructor(http: HttpClient<SecurityDataType>);
+    abc1: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+    };
+    abc2: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+    };
+    abc3: () => Omit<Promise<import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+        then<TResult1 = import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+            then<TResult1 = TResult | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                then<TResult1 = TResult | TResult_1 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                    then<TResult1 = TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                    then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                    then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                        then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                        then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                            then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult | TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                        catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                            then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & {
+                                                then<TResult1 = TResult1_1 | TResult2_1, TResult2 = never>(onfulfilled?: (value: TResult1_1 | TResult2_1) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult | TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                            catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & {
+                                                then<TResult1 = TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>, TResult2 = never>(onfulfilled?: (value: TResult | TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | import("./http-client").HttpResponse<any, any>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Omit<Promise<TResult1 | TResult2>, "catch" | "then"> & /*elided*/ any;
+                                                catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Omit<Promise<TResult_1 | TResult_2 | TResult_3 | TResult_4 | TResult_5 | TResult_6 | TResult_7 | TResult_8 | TResult_9 | TResult_10 | TResult | import("./http-client").HttpResponse<any, any>>, "catch" | "then"> & /*elided*/ any;
+                                            };
+                                        };
+                                    };
+                                };
+                            };
+                        };
+                    };
+                };
+            };
+        };
+    };
+}
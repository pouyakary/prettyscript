--- old.declFileGenericType.types
+++ new.declFileGenericType.types
@@= skipped -14, +14 lines =@@
 >x : T

     export function F2<T>(x: T): C.A<C.B> { return null; }
->F2 : <T>(x: T) => C.A<C.B>
+>F2 : <T>(x: T) => A<B>
 >x : T
 >C : any
 >C : any

     export function F3<T>(x: T): C.A<C.B>[] { return null; }
->F3 : <T>(x: T) => C.A<C.B>[]
+>F3 : <T>(x: T) => A<B>[]
 >x : T
 >C : any
 >C : any

     export function F4<T extends A<B>>(x: T): Array<C.A<C.B>> { return null; }
->F4 : <T extends A<B>>(x: T) => Array<C.A<C.B>>
+>F4 : <T extends A<B>>(x: T) => A<B>[]
 >x : T
 >C : any
 >C : any
@@= skipped -57, +57 lines =@@
 >F3 : <T>(x: T) => C.A<C.B>[]

 export var e = C.F4;
->e : <T extends C.A<C.B>>(x: T) => Array<C.A<C.B>>
->C.F4 : <T extends C.A<C.B>>(x: T) => Array<C.A<C.B>>
+>e : <T extends C.A<C.B>>(x: T) => C.A<C.B>[]
+>C.F4 : <T extends C.A<C.B>>(x: T) => C.A<C.B>[]
 >C : typeof C
->F4 : <T extends C.A<C.B>>(x: T) => Array<C.A<C.B>>
+>F4 : <T extends C.A<C.B>>(x: T) => C.A<C.B>[]

 export var x = (new C.D<C.A<C.B>>(new C.A<C.B>())).val;
 >x : C.A<C.B>